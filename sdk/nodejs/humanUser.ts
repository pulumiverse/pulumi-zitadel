// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * **Caution: Email can only be set verified if a password is set for the user, either with initialPassword or during runtime**
 *
 * Resource representing a human user situated under an organization, which then can be authorized through memberships or direct grants on other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumiverse/zitadel";
 *
 * const _default = new zitadel.HumanUser("default", {
 *     orgId: data.zitadel_org["default"].id,
 *     userName: "humanfull@localhost.com",
 *     firstName: "firstname",
 *     lastName: "lastname",
 *     nickName: "nickname",
 *     displayName: "displayname",
 *     preferredLanguage: "de",
 *     gender: "GENDER_MALE",
 *     phone: "+41799999999",
 *     isPhoneVerified: true,
 *     email: "test@zitadel.com",
 *     isEmailVerified: true,
 *     initialPassword: "Password1!",
 * });
 * ```
 *
 * ## Import
 *
 * terraform # The resource can be imported using the ID format `id[:org_id][:initial_password]>`, e.g.
 *
 * ```sh
 *  $ pulumi import zitadel:index/humanUser:HumanUser imported '123456789012345678:123456789012345678:Password1!'
 * ```
 */
export class HumanUser extends pulumi.CustomResource {
    /**
     * Get an existing HumanUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HumanUserState, opts?: pulumi.CustomResourceOptions): HumanUser {
        return new HumanUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/humanUser:HumanUser';

    /**
     * Returns true if the given object is an instance of HumanUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HumanUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HumanUser.__pulumiType;
    }

    /**
     * Display name of the user
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Email of the user
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * First name of the user
     */
    public readonly firstName!: pulumi.Output<string>;
    /**
     * Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
     */
    public readonly gender!: pulumi.Output<string | undefined>;
    /**
     * Initially set password for the user, not changeable after creation
     */
    public readonly initialPassword!: pulumi.Output<string | undefined>;
    /**
     * Is the email verified of the user, can only be true if password of the user is set
     */
    public readonly isEmailVerified!: pulumi.Output<boolean | undefined>;
    /**
     * Is the phone verified of the user
     */
    public readonly isPhoneVerified!: pulumi.Output<boolean | undefined>;
    /**
     * Last name of the user
     */
    public readonly lastName!: pulumi.Output<string>;
    /**
     * Loginnames
     */
    public /*out*/ readonly loginNames!: pulumi.Output<string[]>;
    /**
     * Nick name of the user
     */
    public readonly nickName!: pulumi.Output<string | undefined>;
    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Phone of the user
     */
    public readonly phone!: pulumi.Output<string | undefined>;
    /**
     * Preferred language of the user
     */
    public readonly preferredLanguage!: pulumi.Output<string | undefined>;
    /**
     * Preferred login name
     */
    public /*out*/ readonly preferredLoginName!: pulumi.Output<string>;
    /**
     * State of the user
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Username
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a HumanUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HumanUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HumanUserArgs | HumanUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HumanUserState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["gender"] = state ? state.gender : undefined;
            resourceInputs["initialPassword"] = state ? state.initialPassword : undefined;
            resourceInputs["isEmailVerified"] = state ? state.isEmailVerified : undefined;
            resourceInputs["isPhoneVerified"] = state ? state.isPhoneVerified : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["loginNames"] = state ? state.loginNames : undefined;
            resourceInputs["nickName"] = state ? state.nickName : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["phone"] = state ? state.phone : undefined;
            resourceInputs["preferredLanguage"] = state ? state.preferredLanguage : undefined;
            resourceInputs["preferredLoginName"] = state ? state.preferredLoginName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as HumanUserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.firstName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firstName'");
            }
            if ((!args || args.lastName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lastName'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["gender"] = args ? args.gender : undefined;
            resourceInputs["initialPassword"] = args ? args.initialPassword : undefined;
            resourceInputs["isEmailVerified"] = args ? args.isEmailVerified : undefined;
            resourceInputs["isPhoneVerified"] = args ? args.isPhoneVerified : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["nickName"] = args ? args.nickName : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["phone"] = args ? args.phone : undefined;
            resourceInputs["preferredLanguage"] = args ? args.preferredLanguage : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["loginNames"] = undefined /*out*/;
            resourceInputs["preferredLoginName"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HumanUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HumanUser resources.
 */
export interface HumanUserState {
    /**
     * Display name of the user
     */
    displayName?: pulumi.Input<string>;
    /**
     * Email of the user
     */
    email?: pulumi.Input<string>;
    /**
     * First name of the user
     */
    firstName?: pulumi.Input<string>;
    /**
     * Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
     */
    gender?: pulumi.Input<string>;
    /**
     * Initially set password for the user, not changeable after creation
     */
    initialPassword?: pulumi.Input<string>;
    /**
     * Is the email verified of the user, can only be true if password of the user is set
     */
    isEmailVerified?: pulumi.Input<boolean>;
    /**
     * Is the phone verified of the user
     */
    isPhoneVerified?: pulumi.Input<boolean>;
    /**
     * Last name of the user
     */
    lastName?: pulumi.Input<string>;
    /**
     * Loginnames
     */
    loginNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Nick name of the user
     */
    nickName?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * Phone of the user
     */
    phone?: pulumi.Input<string>;
    /**
     * Preferred language of the user
     */
    preferredLanguage?: pulumi.Input<string>;
    /**
     * Preferred login name
     */
    preferredLoginName?: pulumi.Input<string>;
    /**
     * State of the user
     */
    state?: pulumi.Input<string>;
    /**
     * Username
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HumanUser resource.
 */
export interface HumanUserArgs {
    /**
     * Display name of the user
     */
    displayName?: pulumi.Input<string>;
    /**
     * Email of the user
     */
    email: pulumi.Input<string>;
    /**
     * First name of the user
     */
    firstName: pulumi.Input<string>;
    /**
     * Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
     */
    gender?: pulumi.Input<string>;
    /**
     * Initially set password for the user, not changeable after creation
     */
    initialPassword?: pulumi.Input<string>;
    /**
     * Is the email verified of the user, can only be true if password of the user is set
     */
    isEmailVerified?: pulumi.Input<boolean>;
    /**
     * Is the phone verified of the user
     */
    isPhoneVerified?: pulumi.Input<boolean>;
    /**
     * Last name of the user
     */
    lastName: pulumi.Input<string>;
    /**
     * Nick name of the user
     */
    nickName?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * Phone of the user
     */
    phone?: pulumi.Input<string>;
    /**
     * Preferred language of the user
     */
    preferredLanguage?: pulumi.Input<string>;
    /**
     * Username
     */
    userName: pulumi.Input<string>;
}
