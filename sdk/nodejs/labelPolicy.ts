// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing the custom label policy of an organization.
 *
 * ## Import
 *
 * terraform # The resource can be imported using the ID format `<[org_id]>`, e.g.
 *
 * ```sh
 *  $ pulumi import zitadel:index/labelPolicy:LabelPolicy imported '123456789012345678'
 * ```
 */
export class LabelPolicy extends pulumi.CustomResource {
    /**
     * Get an existing LabelPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LabelPolicyState, opts?: pulumi.CustomResourceOptions): LabelPolicy {
        return new LabelPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/labelPolicy:LabelPolicy';

    /**
     * Returns true if the given object is an instance of LabelPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LabelPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LabelPolicy.__pulumiType;
    }

    /**
     * hex value for background color
     */
    public readonly backgroundColor!: pulumi.Output<string>;
    /**
     * hex value for background color dark theme
     */
    public readonly backgroundColorDark!: pulumi.Output<string>;
    /**
     * disable watermark
     */
    public readonly disableWatermark!: pulumi.Output<boolean>;
    /**
     * hex value for font color
     */
    public readonly fontColor!: pulumi.Output<string>;
    /**
     * hex value for font color dark theme
     */
    public readonly fontColorDark!: pulumi.Output<string>;
    public readonly fontHash!: pulumi.Output<string | undefined>;
    public readonly fontPath!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fontUrl!: pulumi.Output<string>;
    /**
     * hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
     */
    public readonly hideLoginNameSuffix!: pulumi.Output<boolean>;
    public readonly iconDarkHash!: pulumi.Output<string | undefined>;
    public readonly iconDarkPath!: pulumi.Output<string | undefined>;
    public readonly iconHash!: pulumi.Output<string | undefined>;
    public readonly iconPath!: pulumi.Output<string | undefined>;
    public /*out*/ readonly iconUrl!: pulumi.Output<string>;
    public /*out*/ readonly iconUrlDark!: pulumi.Output<string>;
    public readonly logoDarkHash!: pulumi.Output<string | undefined>;
    public readonly logoDarkPath!: pulumi.Output<string | undefined>;
    public readonly logoHash!: pulumi.Output<string | undefined>;
    public readonly logoPath!: pulumi.Output<string | undefined>;
    public /*out*/ readonly logoUrl!: pulumi.Output<string>;
    public /*out*/ readonly logoUrlDark!: pulumi.Output<string>;
    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * hex value for primary color
     */
    public readonly primaryColor!: pulumi.Output<string>;
    /**
     * hex value for primary color dark theme
     */
    public readonly primaryColorDark!: pulumi.Output<string>;
    /**
     * set the label policy active after creating/updating
     */
    public readonly setActive!: pulumi.Output<boolean | undefined>;
    /**
     * hex value for warn color
     */
    public readonly warnColor!: pulumi.Output<string>;
    /**
     * hex value for warn color dark theme
     */
    public readonly warnColorDark!: pulumi.Output<string>;

    /**
     * Create a LabelPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LabelPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LabelPolicyArgs | LabelPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LabelPolicyState | undefined;
            resourceInputs["backgroundColor"] = state ? state.backgroundColor : undefined;
            resourceInputs["backgroundColorDark"] = state ? state.backgroundColorDark : undefined;
            resourceInputs["disableWatermark"] = state ? state.disableWatermark : undefined;
            resourceInputs["fontColor"] = state ? state.fontColor : undefined;
            resourceInputs["fontColorDark"] = state ? state.fontColorDark : undefined;
            resourceInputs["fontHash"] = state ? state.fontHash : undefined;
            resourceInputs["fontPath"] = state ? state.fontPath : undefined;
            resourceInputs["fontUrl"] = state ? state.fontUrl : undefined;
            resourceInputs["hideLoginNameSuffix"] = state ? state.hideLoginNameSuffix : undefined;
            resourceInputs["iconDarkHash"] = state ? state.iconDarkHash : undefined;
            resourceInputs["iconDarkPath"] = state ? state.iconDarkPath : undefined;
            resourceInputs["iconHash"] = state ? state.iconHash : undefined;
            resourceInputs["iconPath"] = state ? state.iconPath : undefined;
            resourceInputs["iconUrl"] = state ? state.iconUrl : undefined;
            resourceInputs["iconUrlDark"] = state ? state.iconUrlDark : undefined;
            resourceInputs["logoDarkHash"] = state ? state.logoDarkHash : undefined;
            resourceInputs["logoDarkPath"] = state ? state.logoDarkPath : undefined;
            resourceInputs["logoHash"] = state ? state.logoHash : undefined;
            resourceInputs["logoPath"] = state ? state.logoPath : undefined;
            resourceInputs["logoUrl"] = state ? state.logoUrl : undefined;
            resourceInputs["logoUrlDark"] = state ? state.logoUrlDark : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["primaryColor"] = state ? state.primaryColor : undefined;
            resourceInputs["primaryColorDark"] = state ? state.primaryColorDark : undefined;
            resourceInputs["setActive"] = state ? state.setActive : undefined;
            resourceInputs["warnColor"] = state ? state.warnColor : undefined;
            resourceInputs["warnColorDark"] = state ? state.warnColorDark : undefined;
        } else {
            const args = argsOrState as LabelPolicyArgs | undefined;
            if ((!args || args.backgroundColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backgroundColor'");
            }
            if ((!args || args.backgroundColorDark === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backgroundColorDark'");
            }
            if ((!args || args.disableWatermark === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disableWatermark'");
            }
            if ((!args || args.fontColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fontColor'");
            }
            if ((!args || args.fontColorDark === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fontColorDark'");
            }
            if ((!args || args.hideLoginNameSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hideLoginNameSuffix'");
            }
            if ((!args || args.primaryColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryColor'");
            }
            if ((!args || args.primaryColorDark === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryColorDark'");
            }
            if ((!args || args.warnColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'warnColor'");
            }
            if ((!args || args.warnColorDark === undefined) && !opts.urn) {
                throw new Error("Missing required property 'warnColorDark'");
            }
            resourceInputs["backgroundColor"] = args ? args.backgroundColor : undefined;
            resourceInputs["backgroundColorDark"] = args ? args.backgroundColorDark : undefined;
            resourceInputs["disableWatermark"] = args ? args.disableWatermark : undefined;
            resourceInputs["fontColor"] = args ? args.fontColor : undefined;
            resourceInputs["fontColorDark"] = args ? args.fontColorDark : undefined;
            resourceInputs["fontHash"] = args ? args.fontHash : undefined;
            resourceInputs["fontPath"] = args ? args.fontPath : undefined;
            resourceInputs["hideLoginNameSuffix"] = args ? args.hideLoginNameSuffix : undefined;
            resourceInputs["iconDarkHash"] = args ? args.iconDarkHash : undefined;
            resourceInputs["iconDarkPath"] = args ? args.iconDarkPath : undefined;
            resourceInputs["iconHash"] = args ? args.iconHash : undefined;
            resourceInputs["iconPath"] = args ? args.iconPath : undefined;
            resourceInputs["logoDarkHash"] = args ? args.logoDarkHash : undefined;
            resourceInputs["logoDarkPath"] = args ? args.logoDarkPath : undefined;
            resourceInputs["logoHash"] = args ? args.logoHash : undefined;
            resourceInputs["logoPath"] = args ? args.logoPath : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["primaryColor"] = args ? args.primaryColor : undefined;
            resourceInputs["primaryColorDark"] = args ? args.primaryColorDark : undefined;
            resourceInputs["setActive"] = args ? args.setActive : undefined;
            resourceInputs["warnColor"] = args ? args.warnColor : undefined;
            resourceInputs["warnColorDark"] = args ? args.warnColorDark : undefined;
            resourceInputs["fontUrl"] = undefined /*out*/;
            resourceInputs["iconUrl"] = undefined /*out*/;
            resourceInputs["iconUrlDark"] = undefined /*out*/;
            resourceInputs["logoUrl"] = undefined /*out*/;
            resourceInputs["logoUrlDark"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LabelPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LabelPolicy resources.
 */
export interface LabelPolicyState {
    /**
     * hex value for background color
     */
    backgroundColor?: pulumi.Input<string>;
    /**
     * hex value for background color dark theme
     */
    backgroundColorDark?: pulumi.Input<string>;
    /**
     * disable watermark
     */
    disableWatermark?: pulumi.Input<boolean>;
    /**
     * hex value for font color
     */
    fontColor?: pulumi.Input<string>;
    /**
     * hex value for font color dark theme
     */
    fontColorDark?: pulumi.Input<string>;
    fontHash?: pulumi.Input<string>;
    fontPath?: pulumi.Input<string>;
    fontUrl?: pulumi.Input<string>;
    /**
     * hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
     */
    hideLoginNameSuffix?: pulumi.Input<boolean>;
    iconDarkHash?: pulumi.Input<string>;
    iconDarkPath?: pulumi.Input<string>;
    iconHash?: pulumi.Input<string>;
    iconPath?: pulumi.Input<string>;
    iconUrl?: pulumi.Input<string>;
    iconUrlDark?: pulumi.Input<string>;
    logoDarkHash?: pulumi.Input<string>;
    logoDarkPath?: pulumi.Input<string>;
    logoHash?: pulumi.Input<string>;
    logoPath?: pulumi.Input<string>;
    logoUrl?: pulumi.Input<string>;
    logoUrlDark?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * hex value for primary color
     */
    primaryColor?: pulumi.Input<string>;
    /**
     * hex value for primary color dark theme
     */
    primaryColorDark?: pulumi.Input<string>;
    /**
     * set the label policy active after creating/updating
     */
    setActive?: pulumi.Input<boolean>;
    /**
     * hex value for warn color
     */
    warnColor?: pulumi.Input<string>;
    /**
     * hex value for warn color dark theme
     */
    warnColorDark?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LabelPolicy resource.
 */
export interface LabelPolicyArgs {
    /**
     * hex value for background color
     */
    backgroundColor: pulumi.Input<string>;
    /**
     * hex value for background color dark theme
     */
    backgroundColorDark: pulumi.Input<string>;
    /**
     * disable watermark
     */
    disableWatermark: pulumi.Input<boolean>;
    /**
     * hex value for font color
     */
    fontColor: pulumi.Input<string>;
    /**
     * hex value for font color dark theme
     */
    fontColorDark: pulumi.Input<string>;
    fontHash?: pulumi.Input<string>;
    fontPath?: pulumi.Input<string>;
    /**
     * hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
     */
    hideLoginNameSuffix: pulumi.Input<boolean>;
    iconDarkHash?: pulumi.Input<string>;
    iconDarkPath?: pulumi.Input<string>;
    iconHash?: pulumi.Input<string>;
    iconPath?: pulumi.Input<string>;
    logoDarkHash?: pulumi.Input<string>;
    logoDarkPath?: pulumi.Input<string>;
    logoHash?: pulumi.Input<string>;
    logoPath?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * hex value for primary color
     */
    primaryColor: pulumi.Input<string>;
    /**
     * hex value for primary color dark theme
     */
    primaryColorDark: pulumi.Input<string>;
    /**
     * set the label policy active after creating/updating
     */
    setActive?: pulumi.Input<boolean>;
    /**
     * hex value for warn color
     */
    warnColor: pulumi.Input<string>;
    /**
     * hex value for warn color dark theme
     */
    warnColorDark: pulumi.Input<string>;
}
