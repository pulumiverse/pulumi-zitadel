// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Datasource representing a serviceaccount situated under an organization, which then can be authorized through memberships or direct grants on other resources.
 */
export function getMachineUsers(args: GetMachineUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetMachineUsersResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zitadel:index/getMachineUsers:getMachineUsers", {
        "orgId": args.orgId,
        "userName": args.userName,
        "userNameMethod": args.userNameMethod,
    }, opts);
}

/**
 * A collection of arguments for invoking getMachineUsers.
 */
export interface GetMachineUsersArgs {
    /**
     * ID of the organization
     */
    orgId?: string;
    /**
     * Username
     */
    userName: string;
    /**
     * Method for querying machine users by username, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE
     */
    userNameMethod?: string;
}

/**
 * A collection of values returned by getMachineUsers.
 */
export interface GetMachineUsersResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ID of the organization
     */
    readonly orgId?: string;
    /**
     * A set of all IDs.
     */
    readonly userIds: string[];
    /**
     * Username
     */
    readonly userName: string;
    /**
     * Method for querying machine users by username, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE
     */
    readonly userNameMethod?: string;
}
/**
 * Datasource representing a serviceaccount situated under an organization, which then can be authorized through memberships or direct grants on other resources.
 */
export function getMachineUsersOutput(args: GetMachineUsersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMachineUsersResult> {
    return pulumi.output(args).apply((a: any) => getMachineUsers(a, opts))
}

/**
 * A collection of arguments for invoking getMachineUsers.
 */
export interface GetMachineUsersOutputArgs {
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * Username
     */
    userName: pulumi.Input<string>;
    /**
     * Method for querying machine users by username, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE
     */
    userNameMethod?: pulumi.Input<string>;
}
