// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing the grant of a project to a different organization, also containing the available roles which can be given to the members of the projectgrant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumiverse/zitadel";
 *
 * const _default = new zitadel.ProjectGrant("default", {
 *     orgId: data.zitadel_org["default"].id,
 *     projectId: data.zitadel_project["default"].id,
 *     grantedOrgId: data.zitadel_org.granted_org.id,
 *     roleKeys: ["super-user"],
 * });
 * ```
 *
 * ## Import
 *
 * terraform The resource can be imported using the ID format `<id:project_id[:org_id]>`, e.g.
 *
 * ```sh
 *  $ pulumi import zitadel:index/projectGrant:ProjectGrant imported '123456789012345678:123456789012345678:123456789012345678'
 * ```
 */
export class ProjectGrant extends pulumi.CustomResource {
    /**
     * Get an existing ProjectGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectGrantState, opts?: pulumi.CustomResourceOptions): ProjectGrant {
        return new ProjectGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/projectGrant:ProjectGrant';

    /**
     * Returns true if the given object is an instance of ProjectGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectGrant.__pulumiType;
    }

    /**
     * ID of the organization granted the project
     */
    public readonly grantedOrgId!: pulumi.Output<string>;
    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * ID of the project
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * List of roles granted
     */
    public readonly roleKeys!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ProjectGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectGrantArgs | ProjectGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectGrantState | undefined;
            resourceInputs["grantedOrgId"] = state ? state.grantedOrgId : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["roleKeys"] = state ? state.roleKeys : undefined;
        } else {
            const args = argsOrState as ProjectGrantArgs | undefined;
            if ((!args || args.grantedOrgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grantedOrgId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["grantedOrgId"] = args ? args.grantedOrgId : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["roleKeys"] = args ? args.roleKeys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectGrant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectGrant resources.
 */
export interface ProjectGrantState {
    /**
     * ID of the organization granted the project
     */
    grantedOrgId?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the project
     */
    projectId?: pulumi.Input<string>;
    /**
     * List of roles granted
     */
    roleKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ProjectGrant resource.
 */
export interface ProjectGrantArgs {
    /**
     * ID of the organization granted the project
     */
    grantedOrgId: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the project
     */
    projectId: pulumi.Input<string>;
    /**
     * List of roles granted
     */
    roleKeys?: pulumi.Input<pulumi.Input<string>[]>;
}
