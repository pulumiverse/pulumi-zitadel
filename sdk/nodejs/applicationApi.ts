// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing an API application belonging to a project, with all configuration possibilities.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumiverse/zitadel";
 *
 * const _default = new zitadel.ApplicationApi("default", {
 *     orgId: data.zitadel_org["default"].id,
 *     projectId: data.zitadel_project["default"].id,
 *     authMethodType: "API_AUTH_METHOD_TYPE_BASIC",
 * });
 * ```
 *
 * ## Import
 *
 * terraform The resource can be imported using the ID format `<id:project_id[:org_id][:client_id][:client_secret]>`, e.g.
 *
 * ```sh
 *  $ pulumi import zitadel:index/applicationApi:ApplicationApi imported '123456789012345678:123456789012345678:123456789012345678:123456789012345678@zitadel:JuaDFFeOak5DGE655KCYPSAclSkbMVEJXXuX1lEMBT14eLMSs0A0qhafKX5SA2Df'
 * ```
 */
export class ApplicationApi extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationApiState, opts?: pulumi.CustomResourceOptions): ApplicationApi {
        return new ApplicationApi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/applicationApi:ApplicationApi';

    /**
     * Returns true if the given object is an instance of ApplicationApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationApi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationApi.__pulumiType;
    }

    /**
     * Auth method type, supported values: API*AUTH*METHOD*TYPE*BASIC, API*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT
     */
    public readonly authMethodType!: pulumi.Output<string | undefined>;
    /**
     * generated ID for this config
     */
    public /*out*/ readonly clientId!: pulumi.Output<string>;
    /**
     * generated secret for this config
     */
    public /*out*/ readonly clientSecret!: pulumi.Output<string>;
    /**
     * Name of the application
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * ID of the project
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a ApplicationApi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationApiArgs | ApplicationApiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationApiState | undefined;
            resourceInputs["authMethodType"] = state ? state.authMethodType : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as ApplicationApiArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["authMethodType"] = args ? args.authMethodType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["clientId"] = undefined /*out*/;
            resourceInputs["clientSecret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientId", "clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApplicationApi.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationApi resources.
 */
export interface ApplicationApiState {
    /**
     * Auth method type, supported values: API*AUTH*METHOD*TYPE*BASIC, API*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT
     */
    authMethodType?: pulumi.Input<string>;
    /**
     * generated ID for this config
     */
    clientId?: pulumi.Input<string>;
    /**
     * generated secret for this config
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Name of the application
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the project
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationApi resource.
 */
export interface ApplicationApiArgs {
    /**
     * Auth method type, supported values: API*AUTH*METHOD*TYPE*BASIC, API*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT
     */
    authMethodType?: pulumi.Input<string>;
    /**
     * Name of the application
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the project
     */
    projectId: pulumi.Input<string>;
}
