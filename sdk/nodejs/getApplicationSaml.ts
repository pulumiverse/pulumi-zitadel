// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Datasource representing a SAML application belonging to a project, with all configuration possibilities.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumi/zitadel";
 *
 * const default = zitadel.getApplicationSaml({
 *     orgId: data.zitadel_org["default"].id,
 *     projectId: data.zitadel_project["default"].id,
 *     appId: "123456789012345678",
 * });
 * ```
 */
export function getApplicationSaml(args: GetApplicationSamlArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationSamlResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zitadel:index/getApplicationSaml:getApplicationSaml", {
        "appId": args.appId,
        "orgId": args.orgId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getApplicationSaml.
 */
export interface GetApplicationSamlArgs {
    /**
     * The ID of this resource.
     */
    appId: string;
    /**
     * ID of the organization
     */
    orgId?: string;
    /**
     * ID of the project
     */
    projectId: string;
}

/**
 * A collection of values returned by getApplicationSaml.
 */
export interface GetApplicationSamlResult {
    /**
     * The ID of this resource.
     */
    readonly appId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Metadata as XML file
     */
    readonly metadataXml: string;
    /**
     * Name of the application
     */
    readonly name: string;
    /**
     * ID of the organization
     */
    readonly orgId?: string;
    /**
     * ID of the project
     */
    readonly projectId: string;
}
/**
 * Datasource representing a SAML application belonging to a project, with all configuration possibilities.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumi/zitadel";
 *
 * const default = zitadel.getApplicationSaml({
 *     orgId: data.zitadel_org["default"].id,
 *     projectId: data.zitadel_project["default"].id,
 *     appId: "123456789012345678",
 * });
 * ```
 */
export function getApplicationSamlOutput(args: GetApplicationSamlOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationSamlResult> {
    return pulumi.output(args).apply((a: any) => getApplicationSaml(a, opts))
}

/**
 * A collection of arguments for invoking getApplicationSaml.
 */
export interface GetApplicationSamlOutputArgs {
    /**
     * The ID of this resource.
     */
    appId: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the project
     */
    projectId: pulumi.Input<string>;
}
