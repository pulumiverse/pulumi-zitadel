// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing the authorization given to a user directly, including the given roles.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumiverse/zitadel";
 *
 * const _default = new zitadel.UserGrant("default", {
 *     projectId: data.zitadel_project["default"].id,
 *     orgId: data.zitadel_org["default"].id,
 *     roleKeys: ["super-user"],
 *     userId: data.zitadel_human_user["default"].id,
 * });
 * ```
 *
 * ## Import
 *
 * terraform # The resource can be imported using the ID format `<flow_type:trigger_type[:org_id]>`, e.g.
 *
 * ```sh
 *  $ pulumi import zitadel:index/userGrant:UserGrant imported '123456789012345678:123456789012345678:123456789012345678'
 * ```
 */
export class UserGrant extends pulumi.CustomResource {
    /**
     * Get an existing UserGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserGrantState, opts?: pulumi.CustomResourceOptions): UserGrant {
        return new UserGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/userGrant:UserGrant';

    /**
     * Returns true if the given object is an instance of UserGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGrant.__pulumiType;
    }

    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * ID of the granted project
     */
    public readonly projectGrantId!: pulumi.Output<string | undefined>;
    /**
     * ID of the project
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    /**
     * List of roles granted
     */
    public readonly roleKeys!: pulumi.Output<string[] | undefined>;
    /**
     * ID of the user
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserGrantArgs | UserGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserGrantState | undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectGrantId"] = state ? state.projectGrantId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["roleKeys"] = state ? state.roleKeys : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserGrantArgs | undefined;
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectGrantId"] = args ? args.projectGrantId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["roleKeys"] = args ? args.roleKeys : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGrant.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserGrant resources.
 */
export interface UserGrantState {
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the granted project
     */
    projectGrantId?: pulumi.Input<string>;
    /**
     * ID of the project
     */
    projectId?: pulumi.Input<string>;
    /**
     * List of roles granted
     */
    roleKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the user
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserGrant resource.
 */
export interface UserGrantArgs {
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * ID of the granted project
     */
    projectGrantId?: pulumi.Input<string>;
    /**
     * ID of the project
     */
    projectId?: pulumi.Input<string>;
    /**
     * List of roles granted
     */
    roleKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the user
     */
    userId: pulumi.Input<string>;
}
