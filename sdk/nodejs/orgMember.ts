// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing the membership of a user on an organization, defined with the given role.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumiverse/zitadel";
 *
 * const _default = new zitadel.OrgMember("default", {
 *     orgId: data.zitadel_org["default"].id,
 *     userId: data.zitadel_human_user["default"].id,
 *     roles: ["ORG_OWNER"],
 * });
 * ```
 *
 * ## Import
 *
 * terraform The resource can be imported using the ID format `<user_id[:org_id]>`, e.g.
 *
 * ```sh
 *  $ pulumi import zitadel:index/orgMember:OrgMember imported '123456789012345678:123456789012345678'
 * ```
 */
export class OrgMember extends pulumi.CustomResource {
    /**
     * Get an existing OrgMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgMemberState, opts?: pulumi.CustomResourceOptions): OrgMember {
        return new OrgMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/orgMember:OrgMember';

    /**
     * Returns true if the given object is an instance of OrgMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgMember.__pulumiType;
    }

    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * List of roles granted
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * ID of the user
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a OrgMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgMemberArgs | OrgMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgMemberState | undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as OrgMemberArgs | undefined;
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgMember resources.
 */
export interface OrgMemberState {
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * List of roles granted
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the user
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgMember resource.
 */
export interface OrgMemberArgs {
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * List of roles granted
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the user
     */
    userId: pulumi.Input<string>;
}
