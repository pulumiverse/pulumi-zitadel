// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing the default password complexity policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumi/zitadel";
 *
 * const defaultDefaultPasswordComplexityPolicy = new zitadel.DefaultPasswordComplexityPolicy("default", {
 *     hasLowercase: true,
 *     hasNumber: true,
 *     hasSymbol: true,
 *     hasUppercase: true,
 *     minLength: 8,
 * });
 * ```
 *
 * ## Import
 *
 * terraform # The resource can be imported using the ID format `<>`, e.g.
 *
 * ```sh
 *  $ pulumi import zitadel:index/defaultPasswordComplexityPolicy:DefaultPasswordComplexityPolicy imported ''
 * ```
 */
export class DefaultPasswordComplexityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DefaultPasswordComplexityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultPasswordComplexityPolicyState, opts?: pulumi.CustomResourceOptions): DefaultPasswordComplexityPolicy {
        return new DefaultPasswordComplexityPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/defaultPasswordComplexityPolicy:DefaultPasswordComplexityPolicy';

    /**
     * Returns true if the given object is an instance of DefaultPasswordComplexityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultPasswordComplexityPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultPasswordComplexityPolicy.__pulumiType;
    }

    /**
     * defines if the password MUST contain a lower case letter
     */
    public readonly hasLowercase!: pulumi.Output<boolean>;
    /**
     * defines if the password MUST contain a number
     */
    public readonly hasNumber!: pulumi.Output<boolean>;
    /**
     * defines if the password MUST contain a symbol. E.g. "$"
     */
    public readonly hasSymbol!: pulumi.Output<boolean>;
    /**
     * defines if the password MUST contain an upper case letter
     */
    public readonly hasUppercase!: pulumi.Output<boolean>;
    /**
     * Minimal length for the password
     */
    public readonly minLength!: pulumi.Output<number>;

    /**
     * Create a DefaultPasswordComplexityPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultPasswordComplexityPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultPasswordComplexityPolicyArgs | DefaultPasswordComplexityPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultPasswordComplexityPolicyState | undefined;
            resourceInputs["hasLowercase"] = state ? state.hasLowercase : undefined;
            resourceInputs["hasNumber"] = state ? state.hasNumber : undefined;
            resourceInputs["hasSymbol"] = state ? state.hasSymbol : undefined;
            resourceInputs["hasUppercase"] = state ? state.hasUppercase : undefined;
            resourceInputs["minLength"] = state ? state.minLength : undefined;
        } else {
            const args = argsOrState as DefaultPasswordComplexityPolicyArgs | undefined;
            if ((!args || args.hasLowercase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hasLowercase'");
            }
            if ((!args || args.hasNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hasNumber'");
            }
            if ((!args || args.hasSymbol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hasSymbol'");
            }
            if ((!args || args.hasUppercase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hasUppercase'");
            }
            if ((!args || args.minLength === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minLength'");
            }
            resourceInputs["hasLowercase"] = args ? args.hasLowercase : undefined;
            resourceInputs["hasNumber"] = args ? args.hasNumber : undefined;
            resourceInputs["hasSymbol"] = args ? args.hasSymbol : undefined;
            resourceInputs["hasUppercase"] = args ? args.hasUppercase : undefined;
            resourceInputs["minLength"] = args ? args.minLength : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultPasswordComplexityPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultPasswordComplexityPolicy resources.
 */
export interface DefaultPasswordComplexityPolicyState {
    /**
     * defines if the password MUST contain a lower case letter
     */
    hasLowercase?: pulumi.Input<boolean>;
    /**
     * defines if the password MUST contain a number
     */
    hasNumber?: pulumi.Input<boolean>;
    /**
     * defines if the password MUST contain a symbol. E.g. "$"
     */
    hasSymbol?: pulumi.Input<boolean>;
    /**
     * defines if the password MUST contain an upper case letter
     */
    hasUppercase?: pulumi.Input<boolean>;
    /**
     * Minimal length for the password
     */
    minLength?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DefaultPasswordComplexityPolicy resource.
 */
export interface DefaultPasswordComplexityPolicyArgs {
    /**
     * defines if the password MUST contain a lower case letter
     */
    hasLowercase: pulumi.Input<boolean>;
    /**
     * defines if the password MUST contain a number
     */
    hasNumber: pulumi.Input<boolean>;
    /**
     * defines if the password MUST contain a symbol. E.g. "$"
     */
    hasSymbol: pulumi.Input<boolean>;
    /**
     * defines if the password MUST contain an upper case letter
     */
    hasUppercase: pulumi.Input<boolean>;
    /**
     * Minimal length for the password
     */
    minLength: pulumi.Input<number>;
}
