// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Resource representing a generic JWT IdP of the organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zitadel from "@pulumiverse/zitadel";
 *
 * const _default = new zitadel.OrgIdpJwt("default", {
 *     orgId: data.zitadel_org["default"].id,
 *     stylingType: "STYLING_TYPE_UNSPECIFIED",
 *     jwtEndpoint: "https://jwtendpoint.com/jwt",
 *     issuer: "https://google.com",
 *     keysEndpoint: "https://jwtendpoint.com/keys",
 *     headerName: "x-auth-token",
 *     autoRegister: false,
 * });
 * ```
 *
 * ## Import
 *
 * terraform # The resource can be imported using the ID format `<id[:org_id]>`, e.g.
 *
 * ```sh
 *  $ pulumi import zitadel:index/orgIdpJwt:OrgIdpJwt imported '123456789012345678:123456789012345678'
 * ```
 */
export class OrgIdpJwt extends pulumi.CustomResource {
    /**
     * Get an existing OrgIdpJwt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgIdpJwtState, opts?: pulumi.CustomResourceOptions): OrgIdpJwt {
        return new OrgIdpJwt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zitadel:index/orgIdpJwt:OrgIdpJwt';

    /**
     * Returns true if the given object is an instance of OrgIdpJwt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgIdpJwt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgIdpJwt.__pulumiType;
    }

    /**
     * auto register for users from this idp
     */
    public readonly autoRegister!: pulumi.Output<boolean>;
    /**
     * the name of the header where the JWT is sent in, default is authorization
     */
    public readonly headerName!: pulumi.Output<string>;
    /**
     * the issuer of the jwt (for validation)
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * the endpoint where the jwt can be extracted
     */
    public readonly jwtEndpoint!: pulumi.Output<string>;
    /**
     * the endpoint to the key (JWK) which are used to sign the JWT with
     */
    public readonly keysEndpoint!: pulumi.Output<string>;
    /**
     * Name of the IDP
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the organization
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
     */
    public readonly stylingType!: pulumi.Output<string>;

    /**
     * Create a OrgIdpJwt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgIdpJwtArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgIdpJwtArgs | OrgIdpJwtState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgIdpJwtState | undefined;
            resourceInputs["autoRegister"] = state ? state.autoRegister : undefined;
            resourceInputs["headerName"] = state ? state.headerName : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["jwtEndpoint"] = state ? state.jwtEndpoint : undefined;
            resourceInputs["keysEndpoint"] = state ? state.keysEndpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["stylingType"] = state ? state.stylingType : undefined;
        } else {
            const args = argsOrState as OrgIdpJwtArgs | undefined;
            if ((!args || args.autoRegister === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoRegister'");
            }
            if ((!args || args.headerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'headerName'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            if ((!args || args.jwtEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jwtEndpoint'");
            }
            if ((!args || args.keysEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keysEndpoint'");
            }
            if ((!args || args.stylingType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stylingType'");
            }
            resourceInputs["autoRegister"] = args ? args.autoRegister : undefined;
            resourceInputs["headerName"] = args ? args.headerName : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["jwtEndpoint"] = args ? args.jwtEndpoint : undefined;
            resourceInputs["keysEndpoint"] = args ? args.keysEndpoint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["stylingType"] = args ? args.stylingType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgIdpJwt.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgIdpJwt resources.
 */
export interface OrgIdpJwtState {
    /**
     * auto register for users from this idp
     */
    autoRegister?: pulumi.Input<boolean>;
    /**
     * the name of the header where the JWT is sent in, default is authorization
     */
    headerName?: pulumi.Input<string>;
    /**
     * the issuer of the jwt (for validation)
     */
    issuer?: pulumi.Input<string>;
    /**
     * the endpoint where the jwt can be extracted
     */
    jwtEndpoint?: pulumi.Input<string>;
    /**
     * the endpoint to the key (JWK) which are used to sign the JWT with
     */
    keysEndpoint?: pulumi.Input<string>;
    /**
     * Name of the IDP
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
     */
    stylingType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrgIdpJwt resource.
 */
export interface OrgIdpJwtArgs {
    /**
     * auto register for users from this idp
     */
    autoRegister: pulumi.Input<boolean>;
    /**
     * the name of the header where the JWT is sent in, default is authorization
     */
    headerName: pulumi.Input<string>;
    /**
     * the issuer of the jwt (for validation)
     */
    issuer: pulumi.Input<string>;
    /**
     * the endpoint where the jwt can be extracted
     */
    jwtEndpoint: pulumi.Input<string>;
    /**
     * the endpoint to the key (JWK) which are used to sign the JWT with
     */
    keysEndpoint: pulumi.Input<string>;
    /**
     * Name of the IDP
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
    /**
     * Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE
     */
    stylingType: pulumi.Input<string>;
}
