// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Zitadel
{
    public static class GetApplicationOidcs
    {
        /// <summary>
        /// Datasource representing multiple OIDC applications belonging to a project.
        /// </summary>
        public static Task<GetApplicationOidcsResult> InvokeAsync(GetApplicationOidcsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApplicationOidcsResult>("zitadel:index/getApplicationOidcs:getApplicationOidcs", args ?? new GetApplicationOidcsArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource representing multiple OIDC applications belonging to a project.
        /// </summary>
        public static Output<GetApplicationOidcsResult> Invoke(GetApplicationOidcsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApplicationOidcsResult>("zitadel:index/getApplicationOidcs:getApplicationOidcs", args ?? new GetApplicationOidcsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetApplicationOidcsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the application
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Method for querying applications by name, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE
        /// </summary>
        [Input("nameMethod")]
        public string? NameMethod { get; set; }

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// ID of the project
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetApplicationOidcsArgs()
        {
        }
        public static new GetApplicationOidcsArgs Empty => new GetApplicationOidcsArgs();
    }

    public sealed class GetApplicationOidcsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the application
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Method for querying applications by name, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE
        /// </summary>
        [Input("nameMethod")]
        public Input<string>? NameMethod { get; set; }

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// ID of the project
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetApplicationOidcsInvokeArgs()
        {
        }
        public static new GetApplicationOidcsInvokeArgs Empty => new GetApplicationOidcsInvokeArgs();
    }


    [OutputType]
    public sealed class GetApplicationOidcsResult
    {
        /// <summary>
        /// A set of all IDs.
        /// </summary>
        public readonly ImmutableArray<string> AppIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the application
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Method for querying applications by name, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE
        /// </summary>
        public readonly string? NameMethod;
        /// <summary>
        /// ID of the organization
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// ID of the project
        /// </summary>
        public readonly string ProjectId;

        [OutputConstructor]
        private GetApplicationOidcsResult(
            ImmutableArray<string> appIds,

            string id,

            string name,

            string? nameMethod,

            string? orgId,

            string projectId)
        {
            AppIds = appIds;
            Id = id;
            Name = name;
            NameMethod = nameMethod;
            OrgId = orgId;
            ProjectId = projectId;
        }
    }
}
