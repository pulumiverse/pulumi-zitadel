// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Zitadel
{
    public static class GetTriggerActions
    {
        /// <summary>
        /// Resource representing triggers, when actions get started
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zitadel = Pulumi.Zitadel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Zitadel.GetTriggerActions.Invoke(new()
        ///     {
        ///         OrgId = data.Zitadel_org.Default.Id,
        ///         FlowType = "FLOW_TYPE_EXTERNAL_AUTHENTICATION",
        ///         TriggerType = "TRIGGER_TYPE_POST_AUTHENTICATION",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["triggerActions"] = @default,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTriggerActionsResult> InvokeAsync(GetTriggerActionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTriggerActionsResult>("zitadel:index/getTriggerActions:getTriggerActions", args ?? new GetTriggerActionsArgs(), options.WithDefaults());

        /// <summary>
        /// Resource representing triggers, when actions get started
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zitadel = Pulumi.Zitadel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Zitadel.GetTriggerActions.Invoke(new()
        ///     {
        ///         OrgId = data.Zitadel_org.Default.Id,
        ///         FlowType = "FLOW_TYPE_EXTERNAL_AUTHENTICATION",
        ///         TriggerType = "TRIGGER_TYPE_POST_AUTHENTICATION",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["triggerActions"] = @default,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTriggerActionsResult> Invoke(GetTriggerActionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTriggerActionsResult>("zitadel:index/getTriggerActions:getTriggerActions", args ?? new GetTriggerActionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTriggerActionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Type of the flow to which the action triggers belong
        /// </summary>
        [Input("flowType", required: true)]
        public string FlowType { get; set; } = null!;

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        /// <summary>
        /// Trigger type on when the actions get triggered
        /// </summary>
        [Input("triggerType", required: true)]
        public string TriggerType { get; set; } = null!;

        public GetTriggerActionsArgs()
        {
        }
        public static new GetTriggerActionsArgs Empty => new GetTriggerActionsArgs();
    }

    public sealed class GetTriggerActionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Type of the flow to which the action triggers belong
        /// </summary>
        [Input("flowType", required: true)]
        public Input<string> FlowType { get; set; } = null!;

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Trigger type on when the actions get triggered
        /// </summary>
        [Input("triggerType", required: true)]
        public Input<string> TriggerType { get; set; } = null!;

        public GetTriggerActionsInvokeArgs()
        {
        }
        public static new GetTriggerActionsInvokeArgs Empty => new GetTriggerActionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetTriggerActionsResult
    {
        /// <summary>
        /// IDs of the triggered actions
        /// </summary>
        public readonly ImmutableArray<string> ActionIds;
        /// <summary>
        /// Type of the flow to which the action triggers belong
        /// </summary>
        public readonly string FlowType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the organization
        /// </summary>
        public readonly string? OrgId;
        /// <summary>
        /// Trigger type on when the actions get triggered
        /// </summary>
        public readonly string TriggerType;

        [OutputConstructor]
        private GetTriggerActionsResult(
            ImmutableArray<string> actionIds,

            string flowType,

            string id,

            string? orgId,

            string triggerType)
        {
            ActionIds = actionIds;
            FlowType = flowType;
            Id = id;
            OrgId = orgId;
            TriggerType = triggerType;
        }
    }
}
