// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Zitadel
{
    /// <summary>
    /// Resource representing a SAML IdP on the organization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zitadel = Pulumiverse.Zitadel;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Zitadel.OrgIdpSaml("default", new()
    ///     {
    ///         OrgId = data.Zitadel_org.Default.Id,
    ///         Binding = "SAML_BINDING_POST",
    ///         WithSignedRequest = true,
    ///         IsLinkingAllowed = false,
    ///         IsCreationAllowed = true,
    ///         IsAutoCreation = false,
    ///         IsAutoUpdate = true,
    ///         MetadataXml = @"&lt;?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?&gt;
    /// &lt;md:EntityDescriptor xmlns:md=""urn:oasis:names:tc:SAML:2.0:metadata"" entityID=""https://saml.example.com/entityid"" validUntil=""2034-05-15T14:21:58.979Z""&gt;
    ///   &lt;md:IDPSSODescriptor WantAuthnRequestsSigned=""true"" protocolSupportEnumeration=""urn:oasis:names:tc:SAML:2.0:protocol""&gt;
    ///     &lt;md:KeyDescriptor use=""signing""&gt;
    ///       &lt;ds:KeyInfo xmlns:ds=""http://www.w3.org/2000/09/xmldsig#""&gt;
    ///         &lt;ds:X509Data&gt;
    ///           &lt;ds:X509Certificate&gt;MIIC4jCCAcoCCQC33wnybT5QZDANBgkqhkiG9w0BAQsFADAyMQswCQYDVQQGEwJV
    /// SzEPMA0GA1UECgwGQm94eUhRMRIwEAYDVQQDDAlNb2NrIFNBTUwwIBcNMjIwMjI4
    /// MjE0NjM4WhgPMzAyMTA3MDEyMTQ2MzhaMDIxCzAJBgNVBAYTAlVLMQ8wDQYDVQQK
    /// DAZCb3h5SFExEjAQBgNVBAMMCU1vY2sgU0FNTDCCASIwDQYJKoZIhvcNAQEBBQAD
    /// ggEPADCCAQoCggEBALGfYettMsct1T6tVUwTudNJH5Pnb9GGnkXi9Zw/e6x45DD0
    /// RuRONbFlJ2T4RjAE/uG+AjXxXQ8o2SZfb9+GgmCHuTJFNgHoZ1nFVXCmb/Hg8Hpd
    /// 4vOAGXndixaReOiq3EH5XvpMjMkJ3+8+9VYMzMZOjkgQtAqO36eAFFfNKX7dTj3V
    /// pwLkvz6/KFCq8OAwY+AUi4eZm5J57D31GzjHwfjH9WTeX0MyndmnNB1qV75qQR3b
    /// 2/W5sGHRv+9AarggJkF+ptUkXoLtVA51wcfYm6hILptpde5FQC8RWY1YrswBWAEZ
    /// NfyrR4JeSweElNHg4NVOs4TwGjOPwWGqzTfgTlECAwEAATANBgkqhkiG9w0BAQsF
    /// AAOCAQEAAYRlYflSXAWoZpFfwNiCQVE5d9zZ0DPzNdWhAybXcTyMf0z5mDf6FWBW
    /// 5Gyoi9u3EMEDnzLcJNkwJAAc39Apa4I2/tml+Jy29dk8bTyX6m93ngmCgdLh5Za4
    /// khuU3AM3L63g7VexCuO7kwkjh/+LqdcIXsVGO6XDfu2QOs1Xpe9zIzLpwm/RNYeX
    /// UjbSj5ce/jekpAw7qyVVL4xOyh8AtUW1ek3wIw1MJvEgEPt0d16oshWJpoS1OT8L
    /// r/22SvYEo3EmSGdTVGgk3x3s+A0qWAqTcyjr7Q4s/GKYRFfomGwz0TZ4Iw1ZN99M
    /// m0eo2USlSRTVl7QHRTuiuSThHpLKQQ==&lt;/ds:X509Certificate&gt;
    ///         &lt;/ds:X509Data&gt;
    ///       &lt;/ds:KeyInfo&gt;
    ///     &lt;/md:KeyDescriptor&gt;
    ///     &lt;md:NameIDFormat&gt;urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress&lt;/md:NameIDFormat&gt;
    ///     &lt;md:SingleSignOnService Binding=""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect"" Location=""https://mocksaml.com/api/saml/sso""/&gt;
    ///     &lt;md:SingleSignOnService Binding=""urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"" Location=""https://mocksaml.com/api/saml/sso""/&gt;
    ///   &lt;/md:IDPSSODescriptor&gt;
    /// &lt;/md:EntityDescriptor&gt;
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// ## Loading the XML Metadata
    /// 
    /// If you don't want to pass the XML metadata inline, you have plenty of options. For example:
    /// - local_file Data Source
    /// - http Data Source
    /// - terracurl_request Data Source
    /// - ...
    /// 
    /// ## Import
    /// 
    /// bash The resource can be imported using the ID format `&lt;id[:org_id]&gt;`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import zitadel:index/orgIdpSaml:OrgIdpSaml imported '123456789012345678:123456789012345678'
    /// ```
    /// </summary>
    [ZitadelResourceType("zitadel:index/orgIdpSaml:OrgIdpSaml")]
    public partial class OrgIdpSaml : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
        /// </summary>
        [Output("binding")]
        public Output<string?> Binding { get; private set; } = null!;

        /// <summary>
        /// enable if a new account in ZITADEL should be created automatically on login with an external account
        /// </summary>
        [Output("isAutoCreation")]
        public Output<bool> IsAutoCreation { get; private set; } = null!;

        /// <summary>
        /// enable if a the ZITADEL account fields should be updated automatically on each login
        /// </summary>
        [Output("isAutoUpdate")]
        public Output<bool> IsAutoUpdate { get; private set; } = null!;

        /// <summary>
        /// enable if users should be able to create a new account in ZITADEL when using an external account
        /// </summary>
        [Output("isCreationAllowed")]
        public Output<bool> IsCreationAllowed { get; private set; } = null!;

        /// <summary>
        /// enable if users should be able to link an existing ZITADEL user with an external account
        /// </summary>
        [Output("isLinkingAllowed")]
        public Output<bool> IsLinkingAllowed { get; private set; } = null!;

        /// <summary>
        /// The metadata XML as plain string
        /// </summary>
        [Output("metadataXml")]
        public Output<string> MetadataXml { get; private set; } = null!;

        /// <summary>
        /// Name of the IDP
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Whether the SAML IDP requires signed requests
        /// </summary>
        [Output("withSignedRequest")]
        public Output<bool?> WithSignedRequest { get; private set; } = null!;


        /// <summary>
        /// Create a OrgIdpSaml resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrgIdpSaml(string name, OrgIdpSamlArgs args, CustomResourceOptions? options = null)
            : base("zitadel:index/orgIdpSaml:OrgIdpSaml", name, args ?? new OrgIdpSamlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrgIdpSaml(string name, Input<string> id, OrgIdpSamlState? state = null, CustomResourceOptions? options = null)
            : base("zitadel:index/orgIdpSaml:OrgIdpSaml", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrgIdpSaml resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrgIdpSaml Get(string name, Input<string> id, OrgIdpSamlState? state = null, CustomResourceOptions? options = null)
        {
            return new OrgIdpSaml(name, id, state, options);
        }
    }

    public sealed class OrgIdpSamlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
        /// </summary>
        [Input("binding")]
        public Input<string>? Binding { get; set; }

        /// <summary>
        /// enable if a new account in ZITADEL should be created automatically on login with an external account
        /// </summary>
        [Input("isAutoCreation", required: true)]
        public Input<bool> IsAutoCreation { get; set; } = null!;

        /// <summary>
        /// enable if a the ZITADEL account fields should be updated automatically on each login
        /// </summary>
        [Input("isAutoUpdate", required: true)]
        public Input<bool> IsAutoUpdate { get; set; } = null!;

        /// <summary>
        /// enable if users should be able to create a new account in ZITADEL when using an external account
        /// </summary>
        [Input("isCreationAllowed", required: true)]
        public Input<bool> IsCreationAllowed { get; set; } = null!;

        /// <summary>
        /// enable if users should be able to link an existing ZITADEL user with an external account
        /// </summary>
        [Input("isLinkingAllowed", required: true)]
        public Input<bool> IsLinkingAllowed { get; set; } = null!;

        /// <summary>
        /// The metadata XML as plain string
        /// </summary>
        [Input("metadataXml", required: true)]
        public Input<string> MetadataXml { get; set; } = null!;

        /// <summary>
        /// Name of the IDP
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Whether the SAML IDP requires signed requests
        /// </summary>
        [Input("withSignedRequest")]
        public Input<bool>? WithSignedRequest { get; set; }

        public OrgIdpSamlArgs()
        {
        }
        public static new OrgIdpSamlArgs Empty => new OrgIdpSamlArgs();
    }

    public sealed class OrgIdpSamlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
        /// </summary>
        [Input("binding")]
        public Input<string>? Binding { get; set; }

        /// <summary>
        /// enable if a new account in ZITADEL should be created automatically on login with an external account
        /// </summary>
        [Input("isAutoCreation")]
        public Input<bool>? IsAutoCreation { get; set; }

        /// <summary>
        /// enable if a the ZITADEL account fields should be updated automatically on each login
        /// </summary>
        [Input("isAutoUpdate")]
        public Input<bool>? IsAutoUpdate { get; set; }

        /// <summary>
        /// enable if users should be able to create a new account in ZITADEL when using an external account
        /// </summary>
        [Input("isCreationAllowed")]
        public Input<bool>? IsCreationAllowed { get; set; }

        /// <summary>
        /// enable if users should be able to link an existing ZITADEL user with an external account
        /// </summary>
        [Input("isLinkingAllowed")]
        public Input<bool>? IsLinkingAllowed { get; set; }

        /// <summary>
        /// The metadata XML as plain string
        /// </summary>
        [Input("metadataXml")]
        public Input<string>? MetadataXml { get; set; }

        /// <summary>
        /// Name of the IDP
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Whether the SAML IDP requires signed requests
        /// </summary>
        [Input("withSignedRequest")]
        public Input<bool>? WithSignedRequest { get; set; }

        public OrgIdpSamlState()
        {
        }
        public static new OrgIdpSamlState Empty => new OrgIdpSamlState();
    }
}
