// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Zitadel
{
    public static class GetProjectRole
    {
        /// <summary>
        /// Datasource representing the project roles, which can be given as authorizations to users.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zitadel = Pulumi.Zitadel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Zitadel.GetProjectRole.Invoke(new()
        ///     {
        ///         OrgId = data.Zitadel_org.Default.Id,
        ///         ProjectId = data.Zitadel_project.Default.Id,
        ///         RoleKey = "key",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectRole"] = @default.Apply(getProjectRoleResult =&gt; getProjectRoleResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProjectRoleResult> InvokeAsync(GetProjectRoleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectRoleResult>("zitadel:index/getProjectRole:getProjectRole", args ?? new GetProjectRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource representing the project roles, which can be given as authorizations to users.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zitadel = Pulumi.Zitadel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Zitadel.GetProjectRole.Invoke(new()
        ///     {
        ///         OrgId = data.Zitadel_org.Default.Id,
        ///         ProjectId = data.Zitadel_project.Default.Id,
        ///         RoleKey = "key",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectRole"] = @default.Apply(getProjectRoleResult =&gt; getProjectRoleResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProjectRoleResult> Invoke(GetProjectRoleInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetProjectRoleResult>("zitadel:index/getProjectRole:getProjectRole", args ?? new GetProjectRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// ID of the project
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Key used for project role
        /// </summary>
        [Input("roleKey", required: true)]
        public string RoleKey { get; set; } = null!;

        public GetProjectRoleArgs()
        {
        }
        public static new GetProjectRoleArgs Empty => new GetProjectRoleArgs();
    }

    public sealed class GetProjectRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// ID of the project
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Key used for project role
        /// </summary>
        [Input("roleKey", required: true)]
        public Input<string> RoleKey { get; set; } = null!;

        public GetProjectRoleInvokeArgs()
        {
        }
        public static new GetProjectRoleInvokeArgs Empty => new GetProjectRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectRoleResult
    {
        /// <summary>
        /// Name used for project role
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Group used for project role
        /// </summary>
        public readonly string Group;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the organization
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// ID of the project
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Key used for project role
        /// </summary>
        public readonly string RoleKey;

        [OutputConstructor]
        private GetProjectRoleResult(
            string displayName,

            string group,

            string id,

            string orgId,

            string projectId,

            string roleKey)
        {
            DisplayName = displayName;
            Group = group;
            Id = id;
            OrgId = orgId;
            ProjectId = projectId;
            RoleKey = roleKey;
        }
    }
}
