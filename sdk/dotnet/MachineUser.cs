// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace scoretechnologies.Zitadel
{
    /// <summary>
    /// Resource representing a serviceaccount situated under an organization, which then can be authorized through memberships or direct grants on other resources.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zitadel = scoretechnologies.Zitadel;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Zitadel.MachineUser("default", new()
    ///     {
    ///         OrgId = data.Zitadel_org.Default.Id,
    ///         UserName = "machine@example.com",
    ///         Description = "a machine user",
    ///         WithSecret = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// bash The resource can be imported using the ID format `&lt;id:has_secret[:org_id][:client_id][:client_secret]&gt;`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import zitadel:index/machineUser:MachineUser imported '123456789012345678:123456789012345678:true:my-machine-user:j76mh34CHVrGGoXPQOg80lch67FIxwc2qIXjBkZoB6oMbf31eGMkB6bvRyaPjR2t'
    /// ```
    /// </summary>
    [ZitadelResourceType("zitadel:index/machineUser:MachineUser")]
    public partial class MachineUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access token type, supported values: ACCESS*TOKEN*TYPE*BEARER, ACCESS*TOKEN*TYPE*JWT
        /// </summary>
        [Output("accessTokenType")]
        public Output<string?> AccessTokenType { get; private set; } = null!;

        /// <summary>
        /// Value of the client ID if withSecret is true
        /// </summary>
        [Output("clientId")]
        public Output<string> ClientId { get; private set; } = null!;

        /// <summary>
        /// Value of the client secret if withSecret is true
        /// </summary>
        [Output("clientSecret")]
        public Output<string> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Description of the user
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Loginnames
        /// </summary>
        [Output("loginNames")]
        public Output<ImmutableArray<string>> LoginNames { get; private set; } = null!;

        /// <summary>
        /// Name of the machine user
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Preferred login name
        /// </summary>
        [Output("preferredLoginName")]
        public Output<string> PreferredLoginName { get; private set; } = null!;

        /// <summary>
        /// State of the user
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Username
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        /// <summary>
        /// Generate machine secret, only applicable if creation or change from false
        /// </summary>
        [Output("withSecret")]
        public Output<bool?> WithSecret { get; private set; } = null!;


        /// <summary>
        /// Create a MachineUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MachineUser(string name, MachineUserArgs args, CustomResourceOptions? options = null)
            : base("zitadel:index/machineUser:MachineUser", name, args ?? new MachineUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MachineUser(string name, Input<string> id, MachineUserState? state = null, CustomResourceOptions? options = null)
            : base("zitadel:index/machineUser:MachineUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/scoretechnologies",
                AdditionalSecretOutputs =
                {
                    "clientId",
                    "clientSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MachineUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MachineUser Get(string name, Input<string> id, MachineUserState? state = null, CustomResourceOptions? options = null)
        {
            return new MachineUser(name, id, state, options);
        }
    }

    public sealed class MachineUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access token type, supported values: ACCESS*TOKEN*TYPE*BEARER, ACCESS*TOKEN*TYPE*JWT
        /// </summary>
        [Input("accessTokenType")]
        public Input<string>? AccessTokenType { get; set; }

        /// <summary>
        /// Description of the user
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the machine user
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Username
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        /// <summary>
        /// Generate machine secret, only applicable if creation or change from false
        /// </summary>
        [Input("withSecret")]
        public Input<bool>? WithSecret { get; set; }

        public MachineUserArgs()
        {
        }
        public static new MachineUserArgs Empty => new MachineUserArgs();
    }

    public sealed class MachineUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access token type, supported values: ACCESS*TOKEN*TYPE*BEARER, ACCESS*TOKEN*TYPE*JWT
        /// </summary>
        [Input("accessTokenType")]
        public Input<string>? AccessTokenType { get; set; }

        [Input("clientId")]
        private Input<string>? _clientId;

        /// <summary>
        /// Value of the client ID if withSecret is true
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// Value of the client secret if withSecret is true
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Description of the user
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("loginNames")]
        private InputList<string>? _loginNames;

        /// <summary>
        /// Loginnames
        /// </summary>
        public InputList<string> LoginNames
        {
            get => _loginNames ?? (_loginNames = new InputList<string>());
            set => _loginNames = value;
        }

        /// <summary>
        /// Name of the machine user
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Preferred login name
        /// </summary>
        [Input("preferredLoginName")]
        public Input<string>? PreferredLoginName { get; set; }

        /// <summary>
        /// State of the user
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Username
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        /// <summary>
        /// Generate machine secret, only applicable if creation or change from false
        /// </summary>
        [Input("withSecret")]
        public Input<bool>? WithSecret { get; set; }

        public MachineUserState()
        {
        }
        public static new MachineUserState Empty => new MachineUserState();
    }
}
