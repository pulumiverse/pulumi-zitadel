// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Zitadel
{
    public static class GetHumanUser
    {
        /// <summary>
        /// Datasource representing a human user situated under an organization, which then can be authorized through memberships or direct grants on other resources.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zitadel = Pulumi.Zitadel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Zitadel.GetHumanUser.Invoke(new()
        ///     {
        ///         OrgId = data.Zitadel_org.Default.Id,
        ///         UserId = "123456789012345678",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["humanUser"] = @default.Apply(getHumanUserResult =&gt; getHumanUserResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetHumanUserResult> InvokeAsync(GetHumanUserArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetHumanUserResult>("zitadel:index/getHumanUser:getHumanUser", args ?? new GetHumanUserArgs(), options.WithDefaults());

        /// <summary>
        /// Datasource representing a human user situated under an organization, which then can be authorized through memberships or direct grants on other resources.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zitadel = Pulumi.Zitadel;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Zitadel.GetHumanUser.Invoke(new()
        ///     {
        ///         OrgId = data.Zitadel_org.Default.Id,
        ///         UserId = "123456789012345678",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["humanUser"] = @default.Apply(getHumanUserResult =&gt; getHumanUserResult),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetHumanUserResult> Invoke(GetHumanUserInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetHumanUserResult>("zitadel:index/getHumanUser:getHumanUser", args ?? new GetHumanUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHumanUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("userId", required: true)]
        public string UserId { get; set; } = null!;

        public GetHumanUserArgs()
        {
        }
        public static new GetHumanUserArgs Empty => new GetHumanUserArgs();
    }

    public sealed class GetHumanUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the organization
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        /// <summary>
        /// The ID of this resource.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public GetHumanUserInvokeArgs()
        {
        }
        public static new GetHumanUserInvokeArgs Empty => new GetHumanUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetHumanUserResult
    {
        /// <summary>
        /// Display name of the user
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Email of the user
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// First name of the user
        /// </summary>
        public readonly string FirstName;
        /// <summary>
        /// Gender of the user
        /// </summary>
        public readonly string Gender;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Is the email verified of the user, can only be true if password of the user is set
        /// </summary>
        public readonly bool IsEmailVerified;
        /// <summary>
        /// Is the phone verified of the user
        /// </summary>
        public readonly bool IsPhoneVerified;
        /// <summary>
        /// Last name of the user
        /// </summary>
        public readonly string LastName;
        /// <summary>
        /// Loginnames
        /// </summary>
        public readonly ImmutableArray<string> LoginNames;
        /// <summary>
        /// Nick name of the user
        /// </summary>
        public readonly string NickName;
        /// <summary>
        /// ID of the organization
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// Phone of the user
        /// </summary>
        public readonly string Phone;
        /// <summary>
        /// Preferred language of the user
        /// </summary>
        public readonly string PreferredLanguage;
        /// <summary>
        /// Preferred login name
        /// </summary>
        public readonly string PreferredLoginName;
        /// <summary>
        /// State of the user
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string UserId;
        /// <summary>
        /// Username
        /// </summary>
        public readonly string UserName;

        [OutputConstructor]
        private GetHumanUserResult(
            string displayName,

            string email,

            string firstName,

            string gender,

            string id,

            bool isEmailVerified,

            bool isPhoneVerified,

            string lastName,

            ImmutableArray<string> loginNames,

            string nickName,

            string orgId,

            string phone,

            string preferredLanguage,

            string preferredLoginName,

            string state,

            string userId,

            string userName)
        {
            DisplayName = displayName;
            Email = email;
            FirstName = firstName;
            Gender = gender;
            Id = id;
            IsEmailVerified = isEmailVerified;
            IsPhoneVerified = isPhoneVerified;
            LastName = lastName;
            LoginNames = loginNames;
            NickName = nickName;
            OrgId = orgId;
            Phone = phone;
            PreferredLanguage = preferredLanguage;
            PreferredLoginName = preferredLoginName;
            State = state;
            UserId = userId;
            UserName = userName;
        }
    }
}
