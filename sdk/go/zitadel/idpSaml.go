// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel/internal"
)

// Resource representing a SAML IDP on the instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.NewIdpSaml(ctx, "default", &zitadel.IdpSamlArgs{
//				Name:              pulumi.String("LDAP"),
//				Binding:           pulumi.String("SAML_BINDING_POST"),
//				WithSignedRequest: pulumi.Bool(true),
//				IsLinkingAllowed:  pulumi.Bool(false),
//				IsCreationAllowed: pulumi.Bool(true),
//				IsAutoCreation:    pulumi.Bool(false),
//				IsAutoUpdate:      pulumi.Bool(true),
//				MetadataXml: pulumi.String(`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
//
// <md:EntityDescriptor xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" entityID="https://saml.example.com/entityid" validUntil="2034-05-15T14:21:58.979Z">
//
//	<md:IDPSSODescriptor WantAuthnRequestsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
//	  <md:KeyDescriptor use="signing">
//	    <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
//	      <ds:X509Data>
//	        <ds:X509Certificate>MIIC4jCCAcoCCQC33wnybT5QZDANBgkqhkiG9w0BAQsFADAyMQswCQYDVQQGEwJV
//
// SzEPMA0GA1UECgwGQm94eUhRMRIwEAYDVQQDDAlNb2NrIFNBTUwwIBcNMjIwMjI4
// MjE0NjM4WhgPMzAyMTA3MDEyMTQ2MzhaMDIxCzAJBgNVBAYTAlVLMQ8wDQYDVQQK
// DAZCb3h5SFExEjAQBgNVBAMMCU1vY2sgU0FNTDCCASIwDQYJKoZIhvcNAQEBBQAD
// ggEPADCCAQoCggEBALGfYettMsct1T6tVUwTudNJH5Pnb9GGnkXi9Zw/e6x45DD0
// RuRONbFlJ2T4RjAE/uG+AjXxXQ8o2SZfb9+GgmCHuTJFNgHoZ1nFVXCmb/Hg8Hpd
// 4vOAGXndixaReOiq3EH5XvpMjMkJ3+8+9VYMzMZOjkgQtAqO36eAFFfNKX7dTj3V
// pwLkvz6/KFCq8OAwY+AUi4eZm5J57D31GzjHwfjH9WTeX0MyndmnNB1qV75qQR3b
// 2/W5sGHRv+9AarggJkF+ptUkXoLtVA51wcfYm6hILptpde5FQC8RWY1YrswBWAEZ
// NfyrR4JeSweElNHg4NVOs4TwGjOPwWGqzTfgTlECAwEAATANBgkqhkiG9w0BAQsF
// AAOCAQEAAYRlYflSXAWoZpFfwNiCQVE5d9zZ0DPzNdWhAybXcTyMf0z5mDf6FWBW
// 5Gyoi9u3EMEDnzLcJNkwJAAc39Apa4I2/tml+Jy29dk8bTyX6m93ngmCgdLh5Za4
// khuU3AM3L63g7VexCuO7kwkjh/+LqdcIXsVGO6XDfu2QOs1Xpe9zIzLpwm/RNYeX
// UjbSj5ce/jekpAw7qyVVL4xOyh8AtUW1ek3wIw1MJvEgEPt0d16oshWJpoS1OT8L
// r/22SvYEo3EmSGdTVGgk3x3s+A0qWAqTcyjr7Q4s/GKYRFfomGwz0TZ4Iw1ZN99M
// m0eo2USlSRTVl7QHRTuiuSThHpLKQQ==</ds:X509Certificate>
//
//	      </ds:X509Data>
//	    </ds:KeyInfo>
//	  </md:KeyDescriptor>
//	  <md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>
//	  <md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="https://mocksaml.com/api/saml/sso"/>
//	  <md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="https://mocksaml.com/api/saml/sso"/>
//	</md:IDPSSODescriptor>
//
// </md:EntityDescriptor>
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Loading the XML Metadata
//
// If you don't want to pass the XML metadata inline, you have plenty of options. For example:
// - localFile Data Source
// - http Data Source
// - terracurlRequest Data Source
// - ...
//
// ## Import
//
// bash The resource can be imported using the ID format `<id>`, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/idpSaml:IdpSaml imported '123456789012345678'
//
// ```
type IdpSaml struct {
	pulumi.CustomResourceState

	// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
	Binding pulumi.StringPtrOutput `pulumi:"binding"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolOutput `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolOutput `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolOutput `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolOutput `pulumi:"isLinkingAllowed"`
	// The metadata XML as plain string
	MetadataXml pulumi.StringOutput `pulumi:"metadataXml"`
	// Name of the IDP
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the SAML IDP requires signed requests
	WithSignedRequest pulumi.BoolPtrOutput `pulumi:"withSignedRequest"`
}

// NewIdpSaml registers a new resource with the given unique name, arguments, and options.
func NewIdpSaml(ctx *pulumi.Context,
	name string, args *IdpSamlArgs, opts ...pulumi.ResourceOption) (*IdpSaml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsAutoCreation == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoCreation'")
	}
	if args.IsAutoUpdate == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoUpdate'")
	}
	if args.IsCreationAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsCreationAllowed'")
	}
	if args.IsLinkingAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsLinkingAllowed'")
	}
	if args.MetadataXml == nil {
		return nil, errors.New("invalid value for required argument 'MetadataXml'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdpSaml
	err := ctx.RegisterResource("zitadel:index/idpSaml:IdpSaml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdpSaml gets an existing IdpSaml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdpSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdpSamlState, opts ...pulumi.ResourceOption) (*IdpSaml, error) {
	var resource IdpSaml
	err := ctx.ReadResource("zitadel:index/idpSaml:IdpSaml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdpSaml resources.
type idpSamlState struct {
	// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
	Binding *string `pulumi:"binding"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `pulumi:"isLinkingAllowed"`
	// The metadata XML as plain string
	MetadataXml *string `pulumi:"metadataXml"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// Whether the SAML IDP requires signed requests
	WithSignedRequest *bool `pulumi:"withSignedRequest"`
}

type IdpSamlState struct {
	// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
	Binding pulumi.StringPtrInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolPtrInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolPtrInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolPtrInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolPtrInput
	// The metadata XML as plain string
	MetadataXml pulumi.StringPtrInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// Whether the SAML IDP requires signed requests
	WithSignedRequest pulumi.BoolPtrInput
}

func (IdpSamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*idpSamlState)(nil)).Elem()
}

type idpSamlArgs struct {
	// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
	Binding *string `pulumi:"binding"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed bool `pulumi:"isLinkingAllowed"`
	// The metadata XML as plain string
	MetadataXml string `pulumi:"metadataXml"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// Whether the SAML IDP requires signed requests
	WithSignedRequest *bool `pulumi:"withSignedRequest"`
}

// The set of arguments for constructing a IdpSaml resource.
type IdpSamlArgs struct {
	// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
	Binding pulumi.StringPtrInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolInput
	// The metadata XML as plain string
	MetadataXml pulumi.StringInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// Whether the SAML IDP requires signed requests
	WithSignedRequest pulumi.BoolPtrInput
}

func (IdpSamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*idpSamlArgs)(nil)).Elem()
}

type IdpSamlInput interface {
	pulumi.Input

	ToIdpSamlOutput() IdpSamlOutput
	ToIdpSamlOutputWithContext(ctx context.Context) IdpSamlOutput
}

func (*IdpSaml) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpSaml)(nil)).Elem()
}

func (i *IdpSaml) ToIdpSamlOutput() IdpSamlOutput {
	return i.ToIdpSamlOutputWithContext(context.Background())
}

func (i *IdpSaml) ToIdpSamlOutputWithContext(ctx context.Context) IdpSamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpSamlOutput)
}

func (i *IdpSaml) ToOutput(ctx context.Context) pulumix.Output[*IdpSaml] {
	return pulumix.Output[*IdpSaml]{
		OutputState: i.ToIdpSamlOutputWithContext(ctx).OutputState,
	}
}

// IdpSamlArrayInput is an input type that accepts IdpSamlArray and IdpSamlArrayOutput values.
// You can construct a concrete instance of `IdpSamlArrayInput` via:
//
//	IdpSamlArray{ IdpSamlArgs{...} }
type IdpSamlArrayInput interface {
	pulumi.Input

	ToIdpSamlArrayOutput() IdpSamlArrayOutput
	ToIdpSamlArrayOutputWithContext(context.Context) IdpSamlArrayOutput
}

type IdpSamlArray []IdpSamlInput

func (IdpSamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdpSaml)(nil)).Elem()
}

func (i IdpSamlArray) ToIdpSamlArrayOutput() IdpSamlArrayOutput {
	return i.ToIdpSamlArrayOutputWithContext(context.Background())
}

func (i IdpSamlArray) ToIdpSamlArrayOutputWithContext(ctx context.Context) IdpSamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpSamlArrayOutput)
}

func (i IdpSamlArray) ToOutput(ctx context.Context) pulumix.Output[[]*IdpSaml] {
	return pulumix.Output[[]*IdpSaml]{
		OutputState: i.ToIdpSamlArrayOutputWithContext(ctx).OutputState,
	}
}

// IdpSamlMapInput is an input type that accepts IdpSamlMap and IdpSamlMapOutput values.
// You can construct a concrete instance of `IdpSamlMapInput` via:
//
//	IdpSamlMap{ "key": IdpSamlArgs{...} }
type IdpSamlMapInput interface {
	pulumi.Input

	ToIdpSamlMapOutput() IdpSamlMapOutput
	ToIdpSamlMapOutputWithContext(context.Context) IdpSamlMapOutput
}

type IdpSamlMap map[string]IdpSamlInput

func (IdpSamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdpSaml)(nil)).Elem()
}

func (i IdpSamlMap) ToIdpSamlMapOutput() IdpSamlMapOutput {
	return i.ToIdpSamlMapOutputWithContext(context.Background())
}

func (i IdpSamlMap) ToIdpSamlMapOutputWithContext(ctx context.Context) IdpSamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpSamlMapOutput)
}

func (i IdpSamlMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IdpSaml] {
	return pulumix.Output[map[string]*IdpSaml]{
		OutputState: i.ToIdpSamlMapOutputWithContext(ctx).OutputState,
	}
}

type IdpSamlOutput struct{ *pulumi.OutputState }

func (IdpSamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpSaml)(nil)).Elem()
}

func (o IdpSamlOutput) ToIdpSamlOutput() IdpSamlOutput {
	return o
}

func (o IdpSamlOutput) ToIdpSamlOutputWithContext(ctx context.Context) IdpSamlOutput {
	return o
}

func (o IdpSamlOutput) ToOutput(ctx context.Context) pulumix.Output[*IdpSaml] {
	return pulumix.Output[*IdpSaml]{
		OutputState: o.OutputState,
	}
}

// The binding, supported values: SAML*BINDING*UNSPECIFIED, SAML*BINDING*POST, SAML*BINDING*REDIRECT, SAML*BINDING*ARTIFACT
func (o IdpSamlOutput) Binding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdpSaml) pulumi.StringPtrOutput { return v.Binding }).(pulumi.StringPtrOutput)
}

// enable if a new account in ZITADEL should be created automatically on login with an external account
func (o IdpSamlOutput) IsAutoCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdpSaml) pulumi.BoolOutput { return v.IsAutoCreation }).(pulumi.BoolOutput)
}

// enable if a the ZITADEL account fields should be updated automatically on each login
func (o IdpSamlOutput) IsAutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdpSaml) pulumi.BoolOutput { return v.IsAutoUpdate }).(pulumi.BoolOutput)
}

// enable if users should be able to create a new account in ZITADEL when using an external account
func (o IdpSamlOutput) IsCreationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdpSaml) pulumi.BoolOutput { return v.IsCreationAllowed }).(pulumi.BoolOutput)
}

// enable if users should be able to link an existing ZITADEL user with an external account
func (o IdpSamlOutput) IsLinkingAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdpSaml) pulumi.BoolOutput { return v.IsLinkingAllowed }).(pulumi.BoolOutput)
}

// The metadata XML as plain string
func (o IdpSamlOutput) MetadataXml() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpSaml) pulumi.StringOutput { return v.MetadataXml }).(pulumi.StringOutput)
}

// Name of the IDP
func (o IdpSamlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpSaml) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether the SAML IDP requires signed requests
func (o IdpSamlOutput) WithSignedRequest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdpSaml) pulumi.BoolPtrOutput { return v.WithSignedRequest }).(pulumi.BoolPtrOutput)
}

type IdpSamlArrayOutput struct{ *pulumi.OutputState }

func (IdpSamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdpSaml)(nil)).Elem()
}

func (o IdpSamlArrayOutput) ToIdpSamlArrayOutput() IdpSamlArrayOutput {
	return o
}

func (o IdpSamlArrayOutput) ToIdpSamlArrayOutputWithContext(ctx context.Context) IdpSamlArrayOutput {
	return o
}

func (o IdpSamlArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IdpSaml] {
	return pulumix.Output[[]*IdpSaml]{
		OutputState: o.OutputState,
	}
}

func (o IdpSamlArrayOutput) Index(i pulumi.IntInput) IdpSamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdpSaml {
		return vs[0].([]*IdpSaml)[vs[1].(int)]
	}).(IdpSamlOutput)
}

type IdpSamlMapOutput struct{ *pulumi.OutputState }

func (IdpSamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdpSaml)(nil)).Elem()
}

func (o IdpSamlMapOutput) ToIdpSamlMapOutput() IdpSamlMapOutput {
	return o
}

func (o IdpSamlMapOutput) ToIdpSamlMapOutputWithContext(ctx context.Context) IdpSamlMapOutput {
	return o
}

func (o IdpSamlMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IdpSaml] {
	return pulumix.Output[map[string]*IdpSaml]{
		OutputState: o.OutputState,
	}
}

func (o IdpSamlMapOutput) MapIndex(k pulumi.StringInput) IdpSamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdpSaml {
		return vs[0].(map[string]*IdpSaml)[vs[1].(string)]
	}).(IdpSamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdpSamlInput)(nil)).Elem(), &IdpSaml{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpSamlArrayInput)(nil)).Elem(), IdpSamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpSamlMapInput)(nil)).Elem(), IdpSamlMap{})
	pulumi.RegisterOutputType(IdpSamlOutput{})
	pulumi.RegisterOutputType(IdpSamlArrayOutput{})
	pulumi.RegisterOutputType(IdpSamlMapOutput{})
}
