// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **Caution: Email can only be set verified if a password is set for the user, either with initialPassword or during runtime**
//
// Resource representing a human user situated under an organization, which then can be authorized through memberships or direct grants on other resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := zitadel.NewHumanUser(ctx, "default", &zitadel.HumanUserArgs{
// 			OrgId:             pulumi.Any(data.Zitadel_org.Default.Id),
// 			UserName:          pulumi.String("humanfull@localhost.com"),
// 			FirstName:         pulumi.String("firstname"),
// 			LastName:          pulumi.String("lastname"),
// 			NickName:          pulumi.String("nickname"),
// 			DisplayName:       pulumi.String("displayname"),
// 			PreferredLanguage: pulumi.String("de"),
// 			Gender:            pulumi.String("GENDER_MALE"),
// 			Phone:             pulumi.String("+41799999999"),
// 			IsPhoneVerified:   pulumi.Bool(true),
// 			Email:             pulumi.String("test@zitadel.com"),
// 			IsEmailVerified:   pulumi.Bool(true),
// 			InitialPassword:   pulumi.String("Password1!"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// terraform # The resource can be imported using the ID format `id[:org_id][:initial_password]>`, e.g.
//
// ```sh
//  $ pulumi import zitadel:index/humanUser:HumanUser imported '123456789012345678:123456789012345678:Password1!'
// ```
type HumanUser struct {
	pulumi.CustomResourceState

	// Display name of the user
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Email of the user
	Email pulumi.StringOutput `pulumi:"email"`
	// First name of the user
	FirstName pulumi.StringOutput `pulumi:"firstName"`
	// Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
	Gender pulumi.StringPtrOutput `pulumi:"gender"`
	// Initially set password for the user, not changeable after creation
	InitialPassword pulumi.StringPtrOutput `pulumi:"initialPassword"`
	// Is the email verified of the user, can only be true if password of the user is set
	IsEmailVerified pulumi.BoolPtrOutput `pulumi:"isEmailVerified"`
	// Is the phone verified of the user
	IsPhoneVerified pulumi.BoolPtrOutput `pulumi:"isPhoneVerified"`
	// Last name of the user
	LastName pulumi.StringOutput `pulumi:"lastName"`
	// Loginnames
	LoginNames pulumi.StringArrayOutput `pulumi:"loginNames"`
	// Nick name of the user
	NickName pulumi.StringPtrOutput `pulumi:"nickName"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// Phone of the user
	Phone pulumi.StringPtrOutput `pulumi:"phone"`
	// Preferred language of the user
	PreferredLanguage pulumi.StringPtrOutput `pulumi:"preferredLanguage"`
	// Preferred login name
	PreferredLoginName pulumi.StringOutput `pulumi:"preferredLoginName"`
	// State of the user
	State pulumi.StringOutput `pulumi:"state"`
	// Username
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewHumanUser registers a new resource with the given unique name, arguments, and options.
func NewHumanUser(ctx *pulumi.Context,
	name string, args *HumanUserArgs, opts ...pulumi.ResourceOption) (*HumanUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.FirstName == nil {
		return nil, errors.New("invalid value for required argument 'FirstName'")
	}
	if args.LastName == nil {
		return nil, errors.New("invalid value for required argument 'LastName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource HumanUser
	err := ctx.RegisterResource("zitadel:index/humanUser:HumanUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHumanUser gets an existing HumanUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHumanUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HumanUserState, opts ...pulumi.ResourceOption) (*HumanUser, error) {
	var resource HumanUser
	err := ctx.ReadResource("zitadel:index/humanUser:HumanUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HumanUser resources.
type humanUserState struct {
	// Display name of the user
	DisplayName *string `pulumi:"displayName"`
	// Email of the user
	Email *string `pulumi:"email"`
	// First name of the user
	FirstName *string `pulumi:"firstName"`
	// Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
	Gender *string `pulumi:"gender"`
	// Initially set password for the user, not changeable after creation
	InitialPassword *string `pulumi:"initialPassword"`
	// Is the email verified of the user, can only be true if password of the user is set
	IsEmailVerified *bool `pulumi:"isEmailVerified"`
	// Is the phone verified of the user
	IsPhoneVerified *bool `pulumi:"isPhoneVerified"`
	// Last name of the user
	LastName *string `pulumi:"lastName"`
	// Loginnames
	LoginNames []string `pulumi:"loginNames"`
	// Nick name of the user
	NickName *string `pulumi:"nickName"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// Phone of the user
	Phone *string `pulumi:"phone"`
	// Preferred language of the user
	PreferredLanguage *string `pulumi:"preferredLanguage"`
	// Preferred login name
	PreferredLoginName *string `pulumi:"preferredLoginName"`
	// State of the user
	State *string `pulumi:"state"`
	// Username
	UserName *string `pulumi:"userName"`
}

type HumanUserState struct {
	// Display name of the user
	DisplayName pulumi.StringPtrInput
	// Email of the user
	Email pulumi.StringPtrInput
	// First name of the user
	FirstName pulumi.StringPtrInput
	// Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
	Gender pulumi.StringPtrInput
	// Initially set password for the user, not changeable after creation
	InitialPassword pulumi.StringPtrInput
	// Is the email verified of the user, can only be true if password of the user is set
	IsEmailVerified pulumi.BoolPtrInput
	// Is the phone verified of the user
	IsPhoneVerified pulumi.BoolPtrInput
	// Last name of the user
	LastName pulumi.StringPtrInput
	// Loginnames
	LoginNames pulumi.StringArrayInput
	// Nick name of the user
	NickName pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// Phone of the user
	Phone pulumi.StringPtrInput
	// Preferred language of the user
	PreferredLanguage pulumi.StringPtrInput
	// Preferred login name
	PreferredLoginName pulumi.StringPtrInput
	// State of the user
	State pulumi.StringPtrInput
	// Username
	UserName pulumi.StringPtrInput
}

func (HumanUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*humanUserState)(nil)).Elem()
}

type humanUserArgs struct {
	// Display name of the user
	DisplayName *string `pulumi:"displayName"`
	// Email of the user
	Email string `pulumi:"email"`
	// First name of the user
	FirstName string `pulumi:"firstName"`
	// Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
	Gender *string `pulumi:"gender"`
	// Initially set password for the user, not changeable after creation
	InitialPassword *string `pulumi:"initialPassword"`
	// Is the email verified of the user, can only be true if password of the user is set
	IsEmailVerified *bool `pulumi:"isEmailVerified"`
	// Is the phone verified of the user
	IsPhoneVerified *bool `pulumi:"isPhoneVerified"`
	// Last name of the user
	LastName string `pulumi:"lastName"`
	// Nick name of the user
	NickName *string `pulumi:"nickName"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// Phone of the user
	Phone *string `pulumi:"phone"`
	// Preferred language of the user
	PreferredLanguage *string `pulumi:"preferredLanguage"`
	// Username
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a HumanUser resource.
type HumanUserArgs struct {
	// Display name of the user
	DisplayName pulumi.StringPtrInput
	// Email of the user
	Email pulumi.StringInput
	// First name of the user
	FirstName pulumi.StringInput
	// Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
	Gender pulumi.StringPtrInput
	// Initially set password for the user, not changeable after creation
	InitialPassword pulumi.StringPtrInput
	// Is the email verified of the user, can only be true if password of the user is set
	IsEmailVerified pulumi.BoolPtrInput
	// Is the phone verified of the user
	IsPhoneVerified pulumi.BoolPtrInput
	// Last name of the user
	LastName pulumi.StringInput
	// Nick name of the user
	NickName pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// Phone of the user
	Phone pulumi.StringPtrInput
	// Preferred language of the user
	PreferredLanguage pulumi.StringPtrInput
	// Username
	UserName pulumi.StringInput
}

func (HumanUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*humanUserArgs)(nil)).Elem()
}

type HumanUserInput interface {
	pulumi.Input

	ToHumanUserOutput() HumanUserOutput
	ToHumanUserOutputWithContext(ctx context.Context) HumanUserOutput
}

func (*HumanUser) ElementType() reflect.Type {
	return reflect.TypeOf((**HumanUser)(nil)).Elem()
}

func (i *HumanUser) ToHumanUserOutput() HumanUserOutput {
	return i.ToHumanUserOutputWithContext(context.Background())
}

func (i *HumanUser) ToHumanUserOutputWithContext(ctx context.Context) HumanUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HumanUserOutput)
}

// HumanUserArrayInput is an input type that accepts HumanUserArray and HumanUserArrayOutput values.
// You can construct a concrete instance of `HumanUserArrayInput` via:
//
//          HumanUserArray{ HumanUserArgs{...} }
type HumanUserArrayInput interface {
	pulumi.Input

	ToHumanUserArrayOutput() HumanUserArrayOutput
	ToHumanUserArrayOutputWithContext(context.Context) HumanUserArrayOutput
}

type HumanUserArray []HumanUserInput

func (HumanUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HumanUser)(nil)).Elem()
}

func (i HumanUserArray) ToHumanUserArrayOutput() HumanUserArrayOutput {
	return i.ToHumanUserArrayOutputWithContext(context.Background())
}

func (i HumanUserArray) ToHumanUserArrayOutputWithContext(ctx context.Context) HumanUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HumanUserArrayOutput)
}

// HumanUserMapInput is an input type that accepts HumanUserMap and HumanUserMapOutput values.
// You can construct a concrete instance of `HumanUserMapInput` via:
//
//          HumanUserMap{ "key": HumanUserArgs{...} }
type HumanUserMapInput interface {
	pulumi.Input

	ToHumanUserMapOutput() HumanUserMapOutput
	ToHumanUserMapOutputWithContext(context.Context) HumanUserMapOutput
}

type HumanUserMap map[string]HumanUserInput

func (HumanUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HumanUser)(nil)).Elem()
}

func (i HumanUserMap) ToHumanUserMapOutput() HumanUserMapOutput {
	return i.ToHumanUserMapOutputWithContext(context.Background())
}

func (i HumanUserMap) ToHumanUserMapOutputWithContext(ctx context.Context) HumanUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HumanUserMapOutput)
}

type HumanUserOutput struct{ *pulumi.OutputState }

func (HumanUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HumanUser)(nil)).Elem()
}

func (o HumanUserOutput) ToHumanUserOutput() HumanUserOutput {
	return o
}

func (o HumanUserOutput) ToHumanUserOutputWithContext(ctx context.Context) HumanUserOutput {
	return o
}

// Display name of the user
func (o HumanUserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Email of the user
func (o HumanUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// First name of the user
func (o HumanUserOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringOutput { return v.FirstName }).(pulumi.StringOutput)
}

// Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE
func (o HumanUserOutput) Gender() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringPtrOutput { return v.Gender }).(pulumi.StringPtrOutput)
}

// Initially set password for the user, not changeable after creation
func (o HumanUserOutput) InitialPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringPtrOutput { return v.InitialPassword }).(pulumi.StringPtrOutput)
}

// Is the email verified of the user, can only be true if password of the user is set
func (o HumanUserOutput) IsEmailVerified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.BoolPtrOutput { return v.IsEmailVerified }).(pulumi.BoolPtrOutput)
}

// Is the phone verified of the user
func (o HumanUserOutput) IsPhoneVerified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.BoolPtrOutput { return v.IsPhoneVerified }).(pulumi.BoolPtrOutput)
}

// Last name of the user
func (o HumanUserOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringOutput { return v.LastName }).(pulumi.StringOutput)
}

// Loginnames
func (o HumanUserOutput) LoginNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringArrayOutput { return v.LoginNames }).(pulumi.StringArrayOutput)
}

// Nick name of the user
func (o HumanUserOutput) NickName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringPtrOutput { return v.NickName }).(pulumi.StringPtrOutput)
}

// ID of the organization
func (o HumanUserOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// Phone of the user
func (o HumanUserOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringPtrOutput { return v.Phone }).(pulumi.StringPtrOutput)
}

// Preferred language of the user
func (o HumanUserOutput) PreferredLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringPtrOutput { return v.PreferredLanguage }).(pulumi.StringPtrOutput)
}

// Preferred login name
func (o HumanUserOutput) PreferredLoginName() pulumi.StringOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringOutput { return v.PreferredLoginName }).(pulumi.StringOutput)
}

// State of the user
func (o HumanUserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Username
func (o HumanUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *HumanUser) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type HumanUserArrayOutput struct{ *pulumi.OutputState }

func (HumanUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HumanUser)(nil)).Elem()
}

func (o HumanUserArrayOutput) ToHumanUserArrayOutput() HumanUserArrayOutput {
	return o
}

func (o HumanUserArrayOutput) ToHumanUserArrayOutputWithContext(ctx context.Context) HumanUserArrayOutput {
	return o
}

func (o HumanUserArrayOutput) Index(i pulumi.IntInput) HumanUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HumanUser {
		return vs[0].([]*HumanUser)[vs[1].(int)]
	}).(HumanUserOutput)
}

type HumanUserMapOutput struct{ *pulumi.OutputState }

func (HumanUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HumanUser)(nil)).Elem()
}

func (o HumanUserMapOutput) ToHumanUserMapOutput() HumanUserMapOutput {
	return o
}

func (o HumanUserMapOutput) ToHumanUserMapOutputWithContext(ctx context.Context) HumanUserMapOutput {
	return o
}

func (o HumanUserMapOutput) MapIndex(k pulumi.StringInput) HumanUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HumanUser {
		return vs[0].(map[string]*HumanUser)[vs[1].(string)]
	}).(HumanUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HumanUserInput)(nil)).Elem(), &HumanUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*HumanUserArrayInput)(nil)).Elem(), HumanUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HumanUserMapInput)(nil)).Elem(), HumanUserMap{})
	pulumi.RegisterOutputType(HumanUserOutput{})
	pulumi.RegisterOutputType(HumanUserArrayOutput{})
	pulumi.RegisterOutputType(HumanUserMapOutput{})
}
