// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource representing a generic OIDC IdP on the organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := zitadel.NewOrgIdpOidc(ctx, "default", &zitadel.OrgIdpOidcArgs{
// 			OrgId:        pulumi.Any(data.Zitadel_org.Default.Id),
// 			ClientId:     pulumi.String("a_client_id"),
// 			ClientSecret: pulumi.String("a_client_secret"),
// 			Scopes: pulumi.StringArray{
// 				pulumi.String("openid"),
// 				pulumi.String("profile"),
// 				pulumi.String("email"),
// 			},
// 			Issuer:            pulumi.String("https://example.com"),
// 			IsLinkingAllowed:  pulumi.Bool(false),
// 			IsCreationAllowed: pulumi.Bool(true),
// 			IsAutoCreation:    pulumi.Bool(false),
// 			IsAutoUpdate:      pulumi.Bool(true),
// 			IsIdTokenMapping:  pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// terraform # The resource can be imported using the ID format `<id[:org_id][:client_secret]>`, e.g.
//
// ```sh
//  $ pulumi import zitadel:index/orgIdpOidc:OrgIdpOidc imported '123456789012345678:123456789012345678:1234567890abcdef'
// ```
type OrgIdpOidc struct {
	pulumi.CustomResourceState

	// client id generated by the identity provider
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolOutput `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolOutput `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolOutput `pulumi:"isCreationAllowed"`
	// if true, provider information get mapped from the id token, not from the userinfo endpoint
	IsIdTokenMapping pulumi.BoolOutput `pulumi:"isIdTokenMapping"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolOutput `pulumi:"isLinkingAllowed"`
	// the issuer of the idp
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Name of the IDP
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
}

// NewOrgIdpOidc registers a new resource with the given unique name, arguments, and options.
func NewOrgIdpOidc(ctx *pulumi.Context,
	name string, args *OrgIdpOidcArgs, opts ...pulumi.ResourceOption) (*OrgIdpOidc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.IsAutoCreation == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoCreation'")
	}
	if args.IsAutoUpdate == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoUpdate'")
	}
	if args.IsCreationAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsCreationAllowed'")
	}
	if args.IsIdTokenMapping == nil {
		return nil, errors.New("invalid value for required argument 'IsIdTokenMapping'")
	}
	if args.IsLinkingAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsLinkingAllowed'")
	}
	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource OrgIdpOidc
	err := ctx.RegisterResource("zitadel:index/orgIdpOidc:OrgIdpOidc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgIdpOidc gets an existing OrgIdpOidc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgIdpOidc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgIdpOidcState, opts ...pulumi.ResourceOption) (*OrgIdpOidc, error) {
	var resource OrgIdpOidc
	err := ctx.ReadResource("zitadel:index/orgIdpOidc:OrgIdpOidc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgIdpOidc resources.
type orgIdpOidcState struct {
	// client id generated by the identity provider
	ClientId *string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret *string `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `pulumi:"isCreationAllowed"`
	// if true, provider information get mapped from the id token, not from the userinfo endpoint
	IsIdTokenMapping *bool `pulumi:"isIdTokenMapping"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `pulumi:"isLinkingAllowed"`
	// the issuer of the idp
	Issuer *string `pulumi:"issuer"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
}

type OrgIdpOidcState struct {
	// client id generated by the identity provider
	ClientId pulumi.StringPtrInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringPtrInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolPtrInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolPtrInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolPtrInput
	// if true, provider information get mapped from the id token, not from the userinfo endpoint
	IsIdTokenMapping pulumi.BoolPtrInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolPtrInput
	// the issuer of the idp
	Issuer pulumi.StringPtrInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
}

func (OrgIdpOidcState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpOidcState)(nil)).Elem()
}

type orgIdpOidcArgs struct {
	// client id generated by the identity provider
	ClientId string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret string `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed bool `pulumi:"isCreationAllowed"`
	// if true, provider information get mapped from the id token, not from the userinfo endpoint
	IsIdTokenMapping bool `pulumi:"isIdTokenMapping"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed bool `pulumi:"isLinkingAllowed"`
	// the issuer of the idp
	Issuer string `pulumi:"issuer"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a OrgIdpOidc resource.
type OrgIdpOidcArgs struct {
	// client id generated by the identity provider
	ClientId pulumi.StringInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolInput
	// if true, provider information get mapped from the id token, not from the userinfo endpoint
	IsIdTokenMapping pulumi.BoolInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolInput
	// the issuer of the idp
	Issuer pulumi.StringInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
}

func (OrgIdpOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpOidcArgs)(nil)).Elem()
}

type OrgIdpOidcInput interface {
	pulumi.Input

	ToOrgIdpOidcOutput() OrgIdpOidcOutput
	ToOrgIdpOidcOutputWithContext(ctx context.Context) OrgIdpOidcOutput
}

func (*OrgIdpOidc) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpOidc)(nil)).Elem()
}

func (i *OrgIdpOidc) ToOrgIdpOidcOutput() OrgIdpOidcOutput {
	return i.ToOrgIdpOidcOutputWithContext(context.Background())
}

func (i *OrgIdpOidc) ToOrgIdpOidcOutputWithContext(ctx context.Context) OrgIdpOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpOidcOutput)
}

// OrgIdpOidcArrayInput is an input type that accepts OrgIdpOidcArray and OrgIdpOidcArrayOutput values.
// You can construct a concrete instance of `OrgIdpOidcArrayInput` via:
//
//          OrgIdpOidcArray{ OrgIdpOidcArgs{...} }
type OrgIdpOidcArrayInput interface {
	pulumi.Input

	ToOrgIdpOidcArrayOutput() OrgIdpOidcArrayOutput
	ToOrgIdpOidcArrayOutputWithContext(context.Context) OrgIdpOidcArrayOutput
}

type OrgIdpOidcArray []OrgIdpOidcInput

func (OrgIdpOidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpOidc)(nil)).Elem()
}

func (i OrgIdpOidcArray) ToOrgIdpOidcArrayOutput() OrgIdpOidcArrayOutput {
	return i.ToOrgIdpOidcArrayOutputWithContext(context.Background())
}

func (i OrgIdpOidcArray) ToOrgIdpOidcArrayOutputWithContext(ctx context.Context) OrgIdpOidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpOidcArrayOutput)
}

// OrgIdpOidcMapInput is an input type that accepts OrgIdpOidcMap and OrgIdpOidcMapOutput values.
// You can construct a concrete instance of `OrgIdpOidcMapInput` via:
//
//          OrgIdpOidcMap{ "key": OrgIdpOidcArgs{...} }
type OrgIdpOidcMapInput interface {
	pulumi.Input

	ToOrgIdpOidcMapOutput() OrgIdpOidcMapOutput
	ToOrgIdpOidcMapOutputWithContext(context.Context) OrgIdpOidcMapOutput
}

type OrgIdpOidcMap map[string]OrgIdpOidcInput

func (OrgIdpOidcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpOidc)(nil)).Elem()
}

func (i OrgIdpOidcMap) ToOrgIdpOidcMapOutput() OrgIdpOidcMapOutput {
	return i.ToOrgIdpOidcMapOutputWithContext(context.Background())
}

func (i OrgIdpOidcMap) ToOrgIdpOidcMapOutputWithContext(ctx context.Context) OrgIdpOidcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpOidcMapOutput)
}

type OrgIdpOidcOutput struct{ *pulumi.OutputState }

func (OrgIdpOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpOidc)(nil)).Elem()
}

func (o OrgIdpOidcOutput) ToOrgIdpOidcOutput() OrgIdpOidcOutput {
	return o
}

func (o OrgIdpOidcOutput) ToOrgIdpOidcOutputWithContext(ctx context.Context) OrgIdpOidcOutput {
	return o
}

// client id generated by the identity provider
func (o OrgIdpOidcOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// client secret generated by the identity provider
func (o OrgIdpOidcOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// enable if a new account in ZITADEL should be created automatically on login with an external account
func (o OrgIdpOidcOutput) IsAutoCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.BoolOutput { return v.IsAutoCreation }).(pulumi.BoolOutput)
}

// enable if a the ZITADEL account fields should be updated automatically on each login
func (o OrgIdpOidcOutput) IsAutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.BoolOutput { return v.IsAutoUpdate }).(pulumi.BoolOutput)
}

// enable if users should be able to create a new account in ZITADEL when using an external account
func (o OrgIdpOidcOutput) IsCreationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.BoolOutput { return v.IsCreationAllowed }).(pulumi.BoolOutput)
}

// if true, provider information get mapped from the id token, not from the userinfo endpoint
func (o OrgIdpOidcOutput) IsIdTokenMapping() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.BoolOutput { return v.IsIdTokenMapping }).(pulumi.BoolOutput)
}

// enable if users should be able to link an existing ZITADEL user with an external account
func (o OrgIdpOidcOutput) IsLinkingAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.BoolOutput { return v.IsLinkingAllowed }).(pulumi.BoolOutput)
}

// the issuer of the idp
func (o OrgIdpOidcOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// Name of the IDP
func (o OrgIdpOidcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization
func (o OrgIdpOidcOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// the scopes requested by ZITADEL during the request on the identity provider
func (o OrgIdpOidcOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgIdpOidc) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

type OrgIdpOidcArrayOutput struct{ *pulumi.OutputState }

func (OrgIdpOidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpOidc)(nil)).Elem()
}

func (o OrgIdpOidcArrayOutput) ToOrgIdpOidcArrayOutput() OrgIdpOidcArrayOutput {
	return o
}

func (o OrgIdpOidcArrayOutput) ToOrgIdpOidcArrayOutputWithContext(ctx context.Context) OrgIdpOidcArrayOutput {
	return o
}

func (o OrgIdpOidcArrayOutput) Index(i pulumi.IntInput) OrgIdpOidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgIdpOidc {
		return vs[0].([]*OrgIdpOidc)[vs[1].(int)]
	}).(OrgIdpOidcOutput)
}

type OrgIdpOidcMapOutput struct{ *pulumi.OutputState }

func (OrgIdpOidcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpOidc)(nil)).Elem()
}

func (o OrgIdpOidcMapOutput) ToOrgIdpOidcMapOutput() OrgIdpOidcMapOutput {
	return o
}

func (o OrgIdpOidcMapOutput) ToOrgIdpOidcMapOutputWithContext(ctx context.Context) OrgIdpOidcMapOutput {
	return o
}

func (o OrgIdpOidcMapOutput) MapIndex(k pulumi.StringInput) OrgIdpOidcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgIdpOidc {
		return vs[0].(map[string]*OrgIdpOidc)[vs[1].(string)]
	}).(OrgIdpOidcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpOidcInput)(nil)).Elem(), &OrgIdpOidc{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpOidcArrayInput)(nil)).Elem(), OrgIdpOidcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpOidcMapInput)(nil)).Elem(), OrgIdpOidcMap{})
	pulumi.RegisterOutputType(OrgIdpOidcOutput{})
	pulumi.RegisterOutputType(OrgIdpOidcArrayOutput{})
	pulumi.RegisterOutputType(OrgIdpOidcMapOutput{})
}
