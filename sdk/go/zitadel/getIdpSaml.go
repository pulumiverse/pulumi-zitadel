// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel/internal"
)

// Datasource representing a SAML IDP on the instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.LookupIdpSaml(ctx, &zitadel.LookupIdpSamlArgs{
//				Id: "123456789012345678",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIdpSaml(ctx *pulumi.Context, args *LookupIdpSamlArgs, opts ...pulumi.InvokeOption) (*LookupIdpSamlResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIdpSamlResult
	err := ctx.Invoke("zitadel:index/getIdpSaml:getIdpSaml", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIdpSaml.
type LookupIdpSamlArgs struct {
	// The ID of this resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getIdpSaml.
type LookupIdpSamlResult struct {
	// The binding
	Binding string `pulumi:"binding"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// enabled if a new account in ZITADEL are created automatically on login with an external account
	IsAutoCreation bool `pulumi:"isAutoCreation"`
	// enabled if a the ZITADEL account fields are updated automatically on each login
	IsAutoUpdate bool `pulumi:"isAutoUpdate"`
	// enabled if users are able to create a new account in ZITADEL when using an external account
	IsCreationAllowed bool `pulumi:"isCreationAllowed"`
	// enabled if users are able to link an existing ZITADEL user with an external account
	IsLinkingAllowed bool `pulumi:"isLinkingAllowed"`
	// The metadata XML as plain string
	MetadataXml string `pulumi:"metadataXml"`
	// Name of the IDP
	Name string `pulumi:"name"`
	// Whether the SAML IDP requires signed requests
	WithSignedRequest string `pulumi:"withSignedRequest"`
}

func LookupIdpSamlOutput(ctx *pulumi.Context, args LookupIdpSamlOutputArgs, opts ...pulumi.InvokeOption) LookupIdpSamlResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIdpSamlResult, error) {
			args := v.(LookupIdpSamlArgs)
			r, err := LookupIdpSaml(ctx, &args, opts...)
			var s LookupIdpSamlResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIdpSamlResultOutput)
}

// A collection of arguments for invoking getIdpSaml.
type LookupIdpSamlOutputArgs struct {
	// The ID of this resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupIdpSamlOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIdpSamlArgs)(nil)).Elem()
}

// A collection of values returned by getIdpSaml.
type LookupIdpSamlResultOutput struct{ *pulumi.OutputState }

func (LookupIdpSamlResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIdpSamlResult)(nil)).Elem()
}

func (o LookupIdpSamlResultOutput) ToLookupIdpSamlResultOutput() LookupIdpSamlResultOutput {
	return o
}

func (o LookupIdpSamlResultOutput) ToLookupIdpSamlResultOutputWithContext(ctx context.Context) LookupIdpSamlResultOutput {
	return o
}

func (o LookupIdpSamlResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupIdpSamlResult] {
	return pulumix.Output[LookupIdpSamlResult]{
		OutputState: o.OutputState,
	}
}

// The binding
func (o LookupIdpSamlResultOutput) Binding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) string { return v.Binding }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o LookupIdpSamlResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) string { return v.Id }).(pulumi.StringOutput)
}

// enabled if a new account in ZITADEL are created automatically on login with an external account
func (o LookupIdpSamlResultOutput) IsAutoCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) bool { return v.IsAutoCreation }).(pulumi.BoolOutput)
}

// enabled if a the ZITADEL account fields are updated automatically on each login
func (o LookupIdpSamlResultOutput) IsAutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) bool { return v.IsAutoUpdate }).(pulumi.BoolOutput)
}

// enabled if users are able to create a new account in ZITADEL when using an external account
func (o LookupIdpSamlResultOutput) IsCreationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) bool { return v.IsCreationAllowed }).(pulumi.BoolOutput)
}

// enabled if users are able to link an existing ZITADEL user with an external account
func (o LookupIdpSamlResultOutput) IsLinkingAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) bool { return v.IsLinkingAllowed }).(pulumi.BoolOutput)
}

// The metadata XML as plain string
func (o LookupIdpSamlResultOutput) MetadataXml() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) string { return v.MetadataXml }).(pulumi.StringOutput)
}

// Name of the IDP
func (o LookupIdpSamlResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the SAML IDP requires signed requests
func (o LookupIdpSamlResultOutput) WithSignedRequest() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIdpSamlResult) string { return v.WithSignedRequest }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIdpSamlResultOutput{})
}
