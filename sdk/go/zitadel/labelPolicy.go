// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource representing the custom label policy of an organization.
//
// ## Import
//
// terraform # The resource can be imported using the ID format `<[org_id]>`, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/labelPolicy:LabelPolicy imported '123456789012345678'
//
// ```
type LabelPolicy struct {
	pulumi.CustomResourceState

	// hex value for background color
	BackgroundColor pulumi.StringOutput `pulumi:"backgroundColor"`
	// hex value for background color dark theme
	BackgroundColorDark pulumi.StringOutput `pulumi:"backgroundColorDark"`
	// disable watermark
	DisableWatermark pulumi.BoolOutput `pulumi:"disableWatermark"`
	// hex value for font color
	FontColor pulumi.StringOutput `pulumi:"fontColor"`
	// hex value for font color dark theme
	FontColorDark pulumi.StringOutput    `pulumi:"fontColorDark"`
	FontHash      pulumi.StringPtrOutput `pulumi:"fontHash"`
	FontPath      pulumi.StringPtrOutput `pulumi:"fontPath"`
	FontUrl       pulumi.StringOutput    `pulumi:"fontUrl"`
	// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
	HideLoginNameSuffix pulumi.BoolOutput      `pulumi:"hideLoginNameSuffix"`
	IconDarkHash        pulumi.StringPtrOutput `pulumi:"iconDarkHash"`
	IconDarkPath        pulumi.StringPtrOutput `pulumi:"iconDarkPath"`
	IconHash            pulumi.StringPtrOutput `pulumi:"iconHash"`
	IconPath            pulumi.StringPtrOutput `pulumi:"iconPath"`
	IconUrl             pulumi.StringOutput    `pulumi:"iconUrl"`
	IconUrlDark         pulumi.StringOutput    `pulumi:"iconUrlDark"`
	LogoDarkHash        pulumi.StringPtrOutput `pulumi:"logoDarkHash"`
	LogoDarkPath        pulumi.StringPtrOutput `pulumi:"logoDarkPath"`
	LogoHash            pulumi.StringPtrOutput `pulumi:"logoHash"`
	LogoPath            pulumi.StringPtrOutput `pulumi:"logoPath"`
	LogoUrl             pulumi.StringOutput    `pulumi:"logoUrl"`
	LogoUrlDark         pulumi.StringOutput    `pulumi:"logoUrlDark"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// hex value for primary color
	PrimaryColor pulumi.StringOutput `pulumi:"primaryColor"`
	// hex value for primary color dark theme
	PrimaryColorDark pulumi.StringOutput `pulumi:"primaryColorDark"`
	// set the label policy active after creating/updating
	SetActive pulumi.BoolPtrOutput `pulumi:"setActive"`
	// hex value for warn color
	WarnColor pulumi.StringOutput `pulumi:"warnColor"`
	// hex value for warn color dark theme
	WarnColorDark pulumi.StringOutput `pulumi:"warnColorDark"`
}

// NewLabelPolicy registers a new resource with the given unique name, arguments, and options.
func NewLabelPolicy(ctx *pulumi.Context,
	name string, args *LabelPolicyArgs, opts ...pulumi.ResourceOption) (*LabelPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackgroundColor == nil {
		return nil, errors.New("invalid value for required argument 'BackgroundColor'")
	}
	if args.BackgroundColorDark == nil {
		return nil, errors.New("invalid value for required argument 'BackgroundColorDark'")
	}
	if args.DisableWatermark == nil {
		return nil, errors.New("invalid value for required argument 'DisableWatermark'")
	}
	if args.FontColor == nil {
		return nil, errors.New("invalid value for required argument 'FontColor'")
	}
	if args.FontColorDark == nil {
		return nil, errors.New("invalid value for required argument 'FontColorDark'")
	}
	if args.HideLoginNameSuffix == nil {
		return nil, errors.New("invalid value for required argument 'HideLoginNameSuffix'")
	}
	if args.PrimaryColor == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryColor'")
	}
	if args.PrimaryColorDark == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryColorDark'")
	}
	if args.WarnColor == nil {
		return nil, errors.New("invalid value for required argument 'WarnColor'")
	}
	if args.WarnColorDark == nil {
		return nil, errors.New("invalid value for required argument 'WarnColorDark'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LabelPolicy
	err := ctx.RegisterResource("zitadel:index/labelPolicy:LabelPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLabelPolicy gets an existing LabelPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLabelPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LabelPolicyState, opts ...pulumi.ResourceOption) (*LabelPolicy, error) {
	var resource LabelPolicy
	err := ctx.ReadResource("zitadel:index/labelPolicy:LabelPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LabelPolicy resources.
type labelPolicyState struct {
	// hex value for background color
	BackgroundColor *string `pulumi:"backgroundColor"`
	// hex value for background color dark theme
	BackgroundColorDark *string `pulumi:"backgroundColorDark"`
	// disable watermark
	DisableWatermark *bool `pulumi:"disableWatermark"`
	// hex value for font color
	FontColor *string `pulumi:"fontColor"`
	// hex value for font color dark theme
	FontColorDark *string `pulumi:"fontColorDark"`
	FontHash      *string `pulumi:"fontHash"`
	FontPath      *string `pulumi:"fontPath"`
	FontUrl       *string `pulumi:"fontUrl"`
	// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
	HideLoginNameSuffix *bool   `pulumi:"hideLoginNameSuffix"`
	IconDarkHash        *string `pulumi:"iconDarkHash"`
	IconDarkPath        *string `pulumi:"iconDarkPath"`
	IconHash            *string `pulumi:"iconHash"`
	IconPath            *string `pulumi:"iconPath"`
	IconUrl             *string `pulumi:"iconUrl"`
	IconUrlDark         *string `pulumi:"iconUrlDark"`
	LogoDarkHash        *string `pulumi:"logoDarkHash"`
	LogoDarkPath        *string `pulumi:"logoDarkPath"`
	LogoHash            *string `pulumi:"logoHash"`
	LogoPath            *string `pulumi:"logoPath"`
	LogoUrl             *string `pulumi:"logoUrl"`
	LogoUrlDark         *string `pulumi:"logoUrlDark"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// hex value for primary color
	PrimaryColor *string `pulumi:"primaryColor"`
	// hex value for primary color dark theme
	PrimaryColorDark *string `pulumi:"primaryColorDark"`
	// set the label policy active after creating/updating
	SetActive *bool `pulumi:"setActive"`
	// hex value for warn color
	WarnColor *string `pulumi:"warnColor"`
	// hex value for warn color dark theme
	WarnColorDark *string `pulumi:"warnColorDark"`
}

type LabelPolicyState struct {
	// hex value for background color
	BackgroundColor pulumi.StringPtrInput
	// hex value for background color dark theme
	BackgroundColorDark pulumi.StringPtrInput
	// disable watermark
	DisableWatermark pulumi.BoolPtrInput
	// hex value for font color
	FontColor pulumi.StringPtrInput
	// hex value for font color dark theme
	FontColorDark pulumi.StringPtrInput
	FontHash      pulumi.StringPtrInput
	FontPath      pulumi.StringPtrInput
	FontUrl       pulumi.StringPtrInput
	// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
	HideLoginNameSuffix pulumi.BoolPtrInput
	IconDarkHash        pulumi.StringPtrInput
	IconDarkPath        pulumi.StringPtrInput
	IconHash            pulumi.StringPtrInput
	IconPath            pulumi.StringPtrInput
	IconUrl             pulumi.StringPtrInput
	IconUrlDark         pulumi.StringPtrInput
	LogoDarkHash        pulumi.StringPtrInput
	LogoDarkPath        pulumi.StringPtrInput
	LogoHash            pulumi.StringPtrInput
	LogoPath            pulumi.StringPtrInput
	LogoUrl             pulumi.StringPtrInput
	LogoUrlDark         pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// hex value for primary color
	PrimaryColor pulumi.StringPtrInput
	// hex value for primary color dark theme
	PrimaryColorDark pulumi.StringPtrInput
	// set the label policy active after creating/updating
	SetActive pulumi.BoolPtrInput
	// hex value for warn color
	WarnColor pulumi.StringPtrInput
	// hex value for warn color dark theme
	WarnColorDark pulumi.StringPtrInput
}

func (LabelPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*labelPolicyState)(nil)).Elem()
}

type labelPolicyArgs struct {
	// hex value for background color
	BackgroundColor string `pulumi:"backgroundColor"`
	// hex value for background color dark theme
	BackgroundColorDark string `pulumi:"backgroundColorDark"`
	// disable watermark
	DisableWatermark bool `pulumi:"disableWatermark"`
	// hex value for font color
	FontColor string `pulumi:"fontColor"`
	// hex value for font color dark theme
	FontColorDark string  `pulumi:"fontColorDark"`
	FontHash      *string `pulumi:"fontHash"`
	FontPath      *string `pulumi:"fontPath"`
	// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
	HideLoginNameSuffix bool    `pulumi:"hideLoginNameSuffix"`
	IconDarkHash        *string `pulumi:"iconDarkHash"`
	IconDarkPath        *string `pulumi:"iconDarkPath"`
	IconHash            *string `pulumi:"iconHash"`
	IconPath            *string `pulumi:"iconPath"`
	LogoDarkHash        *string `pulumi:"logoDarkHash"`
	LogoDarkPath        *string `pulumi:"logoDarkPath"`
	LogoHash            *string `pulumi:"logoHash"`
	LogoPath            *string `pulumi:"logoPath"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// hex value for primary color
	PrimaryColor string `pulumi:"primaryColor"`
	// hex value for primary color dark theme
	PrimaryColorDark string `pulumi:"primaryColorDark"`
	// set the label policy active after creating/updating
	SetActive *bool `pulumi:"setActive"`
	// hex value for warn color
	WarnColor string `pulumi:"warnColor"`
	// hex value for warn color dark theme
	WarnColorDark string `pulumi:"warnColorDark"`
}

// The set of arguments for constructing a LabelPolicy resource.
type LabelPolicyArgs struct {
	// hex value for background color
	BackgroundColor pulumi.StringInput
	// hex value for background color dark theme
	BackgroundColorDark pulumi.StringInput
	// disable watermark
	DisableWatermark pulumi.BoolInput
	// hex value for font color
	FontColor pulumi.StringInput
	// hex value for font color dark theme
	FontColorDark pulumi.StringInput
	FontHash      pulumi.StringPtrInput
	FontPath      pulumi.StringPtrInput
	// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
	HideLoginNameSuffix pulumi.BoolInput
	IconDarkHash        pulumi.StringPtrInput
	IconDarkPath        pulumi.StringPtrInput
	IconHash            pulumi.StringPtrInput
	IconPath            pulumi.StringPtrInput
	LogoDarkHash        pulumi.StringPtrInput
	LogoDarkPath        pulumi.StringPtrInput
	LogoHash            pulumi.StringPtrInput
	LogoPath            pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// hex value for primary color
	PrimaryColor pulumi.StringInput
	// hex value for primary color dark theme
	PrimaryColorDark pulumi.StringInput
	// set the label policy active after creating/updating
	SetActive pulumi.BoolPtrInput
	// hex value for warn color
	WarnColor pulumi.StringInput
	// hex value for warn color dark theme
	WarnColorDark pulumi.StringInput
}

func (LabelPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*labelPolicyArgs)(nil)).Elem()
}

type LabelPolicyInput interface {
	pulumi.Input

	ToLabelPolicyOutput() LabelPolicyOutput
	ToLabelPolicyOutputWithContext(ctx context.Context) LabelPolicyOutput
}

func (*LabelPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelPolicy)(nil)).Elem()
}

func (i *LabelPolicy) ToLabelPolicyOutput() LabelPolicyOutput {
	return i.ToLabelPolicyOutputWithContext(context.Background())
}

func (i *LabelPolicy) ToLabelPolicyOutputWithContext(ctx context.Context) LabelPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelPolicyOutput)
}

// LabelPolicyArrayInput is an input type that accepts LabelPolicyArray and LabelPolicyArrayOutput values.
// You can construct a concrete instance of `LabelPolicyArrayInput` via:
//
//	LabelPolicyArray{ LabelPolicyArgs{...} }
type LabelPolicyArrayInput interface {
	pulumi.Input

	ToLabelPolicyArrayOutput() LabelPolicyArrayOutput
	ToLabelPolicyArrayOutputWithContext(context.Context) LabelPolicyArrayOutput
}

type LabelPolicyArray []LabelPolicyInput

func (LabelPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LabelPolicy)(nil)).Elem()
}

func (i LabelPolicyArray) ToLabelPolicyArrayOutput() LabelPolicyArrayOutput {
	return i.ToLabelPolicyArrayOutputWithContext(context.Background())
}

func (i LabelPolicyArray) ToLabelPolicyArrayOutputWithContext(ctx context.Context) LabelPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelPolicyArrayOutput)
}

// LabelPolicyMapInput is an input type that accepts LabelPolicyMap and LabelPolicyMapOutput values.
// You can construct a concrete instance of `LabelPolicyMapInput` via:
//
//	LabelPolicyMap{ "key": LabelPolicyArgs{...} }
type LabelPolicyMapInput interface {
	pulumi.Input

	ToLabelPolicyMapOutput() LabelPolicyMapOutput
	ToLabelPolicyMapOutputWithContext(context.Context) LabelPolicyMapOutput
}

type LabelPolicyMap map[string]LabelPolicyInput

func (LabelPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LabelPolicy)(nil)).Elem()
}

func (i LabelPolicyMap) ToLabelPolicyMapOutput() LabelPolicyMapOutput {
	return i.ToLabelPolicyMapOutputWithContext(context.Background())
}

func (i LabelPolicyMap) ToLabelPolicyMapOutputWithContext(ctx context.Context) LabelPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelPolicyMapOutput)
}

type LabelPolicyOutput struct{ *pulumi.OutputState }

func (LabelPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelPolicy)(nil)).Elem()
}

func (o LabelPolicyOutput) ToLabelPolicyOutput() LabelPolicyOutput {
	return o
}

func (o LabelPolicyOutput) ToLabelPolicyOutputWithContext(ctx context.Context) LabelPolicyOutput {
	return o
}

// hex value for background color
func (o LabelPolicyOutput) BackgroundColor() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.BackgroundColor }).(pulumi.StringOutput)
}

// hex value for background color dark theme
func (o LabelPolicyOutput) BackgroundColorDark() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.BackgroundColorDark }).(pulumi.StringOutput)
}

// disable watermark
func (o LabelPolicyOutput) DisableWatermark() pulumi.BoolOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.BoolOutput { return v.DisableWatermark }).(pulumi.BoolOutput)
}

// hex value for font color
func (o LabelPolicyOutput) FontColor() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.FontColor }).(pulumi.StringOutput)
}

// hex value for font color dark theme
func (o LabelPolicyOutput) FontColorDark() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.FontColorDark }).(pulumi.StringOutput)
}

func (o LabelPolicyOutput) FontHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.FontHash }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) FontPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.FontPath }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) FontUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.FontUrl }).(pulumi.StringOutput)
}

// hides the org suffix on the login form if the scope "urn:zitadel:iam:org:domain:primary:{domainname}" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes
func (o LabelPolicyOutput) HideLoginNameSuffix() pulumi.BoolOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.BoolOutput { return v.HideLoginNameSuffix }).(pulumi.BoolOutput)
}

func (o LabelPolicyOutput) IconDarkHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.IconDarkHash }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) IconDarkPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.IconDarkPath }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) IconHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.IconHash }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) IconPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.IconPath }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) IconUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.IconUrl }).(pulumi.StringOutput)
}

func (o LabelPolicyOutput) IconUrlDark() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.IconUrlDark }).(pulumi.StringOutput)
}

func (o LabelPolicyOutput) LogoDarkHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.LogoDarkHash }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) LogoDarkPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.LogoDarkPath }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) LogoHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.LogoHash }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) LogoPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.LogoPath }).(pulumi.StringPtrOutput)
}

func (o LabelPolicyOutput) LogoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.LogoUrl }).(pulumi.StringOutput)
}

func (o LabelPolicyOutput) LogoUrlDark() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.LogoUrlDark }).(pulumi.StringOutput)
}

// ID of the organization
func (o LabelPolicyOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// hex value for primary color
func (o LabelPolicyOutput) PrimaryColor() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.PrimaryColor }).(pulumi.StringOutput)
}

// hex value for primary color dark theme
func (o LabelPolicyOutput) PrimaryColorDark() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.PrimaryColorDark }).(pulumi.StringOutput)
}

// set the label policy active after creating/updating
func (o LabelPolicyOutput) SetActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.BoolPtrOutput { return v.SetActive }).(pulumi.BoolPtrOutput)
}

// hex value for warn color
func (o LabelPolicyOutput) WarnColor() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.WarnColor }).(pulumi.StringOutput)
}

// hex value for warn color dark theme
func (o LabelPolicyOutput) WarnColorDark() pulumi.StringOutput {
	return o.ApplyT(func(v *LabelPolicy) pulumi.StringOutput { return v.WarnColorDark }).(pulumi.StringOutput)
}

type LabelPolicyArrayOutput struct{ *pulumi.OutputState }

func (LabelPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LabelPolicy)(nil)).Elem()
}

func (o LabelPolicyArrayOutput) ToLabelPolicyArrayOutput() LabelPolicyArrayOutput {
	return o
}

func (o LabelPolicyArrayOutput) ToLabelPolicyArrayOutputWithContext(ctx context.Context) LabelPolicyArrayOutput {
	return o
}

func (o LabelPolicyArrayOutput) Index(i pulumi.IntInput) LabelPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LabelPolicy {
		return vs[0].([]*LabelPolicy)[vs[1].(int)]
	}).(LabelPolicyOutput)
}

type LabelPolicyMapOutput struct{ *pulumi.OutputState }

func (LabelPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LabelPolicy)(nil)).Elem()
}

func (o LabelPolicyMapOutput) ToLabelPolicyMapOutput() LabelPolicyMapOutput {
	return o
}

func (o LabelPolicyMapOutput) ToLabelPolicyMapOutputWithContext(ctx context.Context) LabelPolicyMapOutput {
	return o
}

func (o LabelPolicyMapOutput) MapIndex(k pulumi.StringInput) LabelPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LabelPolicy {
		return vs[0].(map[string]*LabelPolicy)[vs[1].(string)]
	}).(LabelPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LabelPolicyInput)(nil)).Elem(), &LabelPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*LabelPolicyArrayInput)(nil)).Elem(), LabelPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LabelPolicyMapInput)(nil)).Elem(), LabelPolicyMap{})
	pulumi.RegisterOutputType(LabelPolicyOutput{})
	pulumi.RegisterOutputType(LabelPolicyArrayOutput{})
	pulumi.RegisterOutputType(LabelPolicyMapOutput{})
}
