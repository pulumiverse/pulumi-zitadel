// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource representing the custom domain policy of an organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.NewDomainPolicy(ctx, "default", &zitadel.DomainPolicyArgs{
//				OrgId:                                  pulumi.Any(data.Zitadel_org.Default.Id),
//				UserLoginMustBeDomain:                  pulumi.Bool(false),
//				ValidateOrgDomains:                     pulumi.Bool(true),
//				SmtpSenderAddressMatchesInstanceDomain: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform # The resource can be imported using the ID format `<[org_id]>`, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/domainPolicy:DomainPolicy imported '123456789012345678'
//
// ```
type DomainPolicy struct {
	pulumi.CustomResourceState

	// ID of the organization
	OrgId                                  pulumi.StringPtrOutput `pulumi:"orgId"`
	SmtpSenderAddressMatchesInstanceDomain pulumi.BoolOutput      `pulumi:"smtpSenderAddressMatchesInstanceDomain"`
	// User login must be domain
	UserLoginMustBeDomain pulumi.BoolOutput `pulumi:"userLoginMustBeDomain"`
	// Validate organization domains
	ValidateOrgDomains pulumi.BoolOutput `pulumi:"validateOrgDomains"`
}

// NewDomainPolicy registers a new resource with the given unique name, arguments, and options.
func NewDomainPolicy(ctx *pulumi.Context,
	name string, args *DomainPolicyArgs, opts ...pulumi.ResourceOption) (*DomainPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SmtpSenderAddressMatchesInstanceDomain == nil {
		return nil, errors.New("invalid value for required argument 'SmtpSenderAddressMatchesInstanceDomain'")
	}
	if args.UserLoginMustBeDomain == nil {
		return nil, errors.New("invalid value for required argument 'UserLoginMustBeDomain'")
	}
	if args.ValidateOrgDomains == nil {
		return nil, errors.New("invalid value for required argument 'ValidateOrgDomains'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DomainPolicy
	err := ctx.RegisterResource("zitadel:index/domainPolicy:DomainPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainPolicy gets an existing DomainPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainPolicyState, opts ...pulumi.ResourceOption) (*DomainPolicy, error) {
	var resource DomainPolicy
	err := ctx.ReadResource("zitadel:index/domainPolicy:DomainPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainPolicy resources.
type domainPolicyState struct {
	// ID of the organization
	OrgId                                  *string `pulumi:"orgId"`
	SmtpSenderAddressMatchesInstanceDomain *bool   `pulumi:"smtpSenderAddressMatchesInstanceDomain"`
	// User login must be domain
	UserLoginMustBeDomain *bool `pulumi:"userLoginMustBeDomain"`
	// Validate organization domains
	ValidateOrgDomains *bool `pulumi:"validateOrgDomains"`
}

type DomainPolicyState struct {
	// ID of the organization
	OrgId                                  pulumi.StringPtrInput
	SmtpSenderAddressMatchesInstanceDomain pulumi.BoolPtrInput
	// User login must be domain
	UserLoginMustBeDomain pulumi.BoolPtrInput
	// Validate organization domains
	ValidateOrgDomains pulumi.BoolPtrInput
}

func (DomainPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPolicyState)(nil)).Elem()
}

type domainPolicyArgs struct {
	// ID of the organization
	OrgId                                  *string `pulumi:"orgId"`
	SmtpSenderAddressMatchesInstanceDomain bool    `pulumi:"smtpSenderAddressMatchesInstanceDomain"`
	// User login must be domain
	UserLoginMustBeDomain bool `pulumi:"userLoginMustBeDomain"`
	// Validate organization domains
	ValidateOrgDomains bool `pulumi:"validateOrgDomains"`
}

// The set of arguments for constructing a DomainPolicy resource.
type DomainPolicyArgs struct {
	// ID of the organization
	OrgId                                  pulumi.StringPtrInput
	SmtpSenderAddressMatchesInstanceDomain pulumi.BoolInput
	// User login must be domain
	UserLoginMustBeDomain pulumi.BoolInput
	// Validate organization domains
	ValidateOrgDomains pulumi.BoolInput
}

func (DomainPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainPolicyArgs)(nil)).Elem()
}

type DomainPolicyInput interface {
	pulumi.Input

	ToDomainPolicyOutput() DomainPolicyOutput
	ToDomainPolicyOutputWithContext(ctx context.Context) DomainPolicyOutput
}

func (*DomainPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainPolicy)(nil)).Elem()
}

func (i *DomainPolicy) ToDomainPolicyOutput() DomainPolicyOutput {
	return i.ToDomainPolicyOutputWithContext(context.Background())
}

func (i *DomainPolicy) ToDomainPolicyOutputWithContext(ctx context.Context) DomainPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPolicyOutput)
}

// DomainPolicyArrayInput is an input type that accepts DomainPolicyArray and DomainPolicyArrayOutput values.
// You can construct a concrete instance of `DomainPolicyArrayInput` via:
//
//	DomainPolicyArray{ DomainPolicyArgs{...} }
type DomainPolicyArrayInput interface {
	pulumi.Input

	ToDomainPolicyArrayOutput() DomainPolicyArrayOutput
	ToDomainPolicyArrayOutputWithContext(context.Context) DomainPolicyArrayOutput
}

type DomainPolicyArray []DomainPolicyInput

func (DomainPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainPolicy)(nil)).Elem()
}

func (i DomainPolicyArray) ToDomainPolicyArrayOutput() DomainPolicyArrayOutput {
	return i.ToDomainPolicyArrayOutputWithContext(context.Background())
}

func (i DomainPolicyArray) ToDomainPolicyArrayOutputWithContext(ctx context.Context) DomainPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPolicyArrayOutput)
}

// DomainPolicyMapInput is an input type that accepts DomainPolicyMap and DomainPolicyMapOutput values.
// You can construct a concrete instance of `DomainPolicyMapInput` via:
//
//	DomainPolicyMap{ "key": DomainPolicyArgs{...} }
type DomainPolicyMapInput interface {
	pulumi.Input

	ToDomainPolicyMapOutput() DomainPolicyMapOutput
	ToDomainPolicyMapOutputWithContext(context.Context) DomainPolicyMapOutput
}

type DomainPolicyMap map[string]DomainPolicyInput

func (DomainPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainPolicy)(nil)).Elem()
}

func (i DomainPolicyMap) ToDomainPolicyMapOutput() DomainPolicyMapOutput {
	return i.ToDomainPolicyMapOutputWithContext(context.Background())
}

func (i DomainPolicyMap) ToDomainPolicyMapOutputWithContext(ctx context.Context) DomainPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainPolicyMapOutput)
}

type DomainPolicyOutput struct{ *pulumi.OutputState }

func (DomainPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainPolicy)(nil)).Elem()
}

func (o DomainPolicyOutput) ToDomainPolicyOutput() DomainPolicyOutput {
	return o
}

func (o DomainPolicyOutput) ToDomainPolicyOutputWithContext(ctx context.Context) DomainPolicyOutput {
	return o
}

// ID of the organization
func (o DomainPolicyOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainPolicy) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

func (o DomainPolicyOutput) SmtpSenderAddressMatchesInstanceDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v *DomainPolicy) pulumi.BoolOutput { return v.SmtpSenderAddressMatchesInstanceDomain }).(pulumi.BoolOutput)
}

// User login must be domain
func (o DomainPolicyOutput) UserLoginMustBeDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v *DomainPolicy) pulumi.BoolOutput { return v.UserLoginMustBeDomain }).(pulumi.BoolOutput)
}

// Validate organization domains
func (o DomainPolicyOutput) ValidateOrgDomains() pulumi.BoolOutput {
	return o.ApplyT(func(v *DomainPolicy) pulumi.BoolOutput { return v.ValidateOrgDomains }).(pulumi.BoolOutput)
}

type DomainPolicyArrayOutput struct{ *pulumi.OutputState }

func (DomainPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainPolicy)(nil)).Elem()
}

func (o DomainPolicyArrayOutput) ToDomainPolicyArrayOutput() DomainPolicyArrayOutput {
	return o
}

func (o DomainPolicyArrayOutput) ToDomainPolicyArrayOutputWithContext(ctx context.Context) DomainPolicyArrayOutput {
	return o
}

func (o DomainPolicyArrayOutput) Index(i pulumi.IntInput) DomainPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainPolicy {
		return vs[0].([]*DomainPolicy)[vs[1].(int)]
	}).(DomainPolicyOutput)
}

type DomainPolicyMapOutput struct{ *pulumi.OutputState }

func (DomainPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainPolicy)(nil)).Elem()
}

func (o DomainPolicyMapOutput) ToDomainPolicyMapOutput() DomainPolicyMapOutput {
	return o
}

func (o DomainPolicyMapOutput) ToDomainPolicyMapOutputWithContext(ctx context.Context) DomainPolicyMapOutput {
	return o
}

func (o DomainPolicyMapOutput) MapIndex(k pulumi.StringInput) DomainPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainPolicy {
		return vs[0].(map[string]*DomainPolicy)[vs[1].(string)]
	}).(DomainPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainPolicyInput)(nil)).Elem(), &DomainPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainPolicyArrayInput)(nil)).Elem(), DomainPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainPolicyMapInput)(nil)).Elem(), DomainPolicyMap{})
	pulumi.RegisterOutputType(DomainPolicyOutput{})
	pulumi.RegisterOutputType(DomainPolicyArrayOutput{})
	pulumi.RegisterOutputType(DomainPolicyMapOutput{})
}
