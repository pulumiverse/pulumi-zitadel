// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.NewUserMetadata(ctx, "default", &zitadel.UserMetadataArgs{
//				OrgId:  pulumi.Any(data.Zitadel_org.Default.Id),
//				UserId: pulumi.Any(data.Zitadel_human_user.Default.Id),
//				Key:    pulumi.String("a_key"),
//				Value:  pulumi.String("a_value"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// bash The resource can be imported using the ID format `<user_id:key[:org_id]>`, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/userMetadata:UserMetadata imported '123456789012345678:a_key:123456789012345678'
//
// ```
type UserMetadata struct {
	pulumi.CustomResourceState

	// The key of a metadata entry
	Key pulumi.StringOutput `pulumi:"key"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// ID of the user
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewUserMetadata registers a new resource with the given unique name, arguments, and options.
func NewUserMetadata(ctx *pulumi.Context,
	name string, args *UserMetadataArgs, opts ...pulumi.ResourceOption) (*UserMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserMetadata
	err := ctx.RegisterResource("zitadel:index/userMetadata:UserMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserMetadata gets an existing UserMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserMetadataState, opts ...pulumi.ResourceOption) (*UserMetadata, error) {
	var resource UserMetadata
	err := ctx.ReadResource("zitadel:index/userMetadata:UserMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserMetadata resources.
type userMetadataState struct {
	// The key of a metadata entry
	Key *string `pulumi:"key"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// ID of the user
	UserId *string `pulumi:"userId"`
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value *string `pulumi:"value"`
}

type UserMetadataState struct {
	// The key of a metadata entry
	Key pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// ID of the user
	UserId pulumi.StringPtrInput
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value pulumi.StringPtrInput
}

func (UserMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*userMetadataState)(nil)).Elem()
}

type userMetadataArgs struct {
	// The key of a metadata entry
	Key string `pulumi:"key"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// ID of the user
	UserId string `pulumi:"userId"`
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a UserMetadata resource.
type UserMetadataArgs struct {
	// The key of a metadata entry
	Key pulumi.StringInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// ID of the user
	UserId pulumi.StringInput
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value pulumi.StringInput
}

func (UserMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userMetadataArgs)(nil)).Elem()
}

type UserMetadataInput interface {
	pulumi.Input

	ToUserMetadataOutput() UserMetadataOutput
	ToUserMetadataOutputWithContext(ctx context.Context) UserMetadataOutput
}

func (*UserMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((**UserMetadata)(nil)).Elem()
}

func (i *UserMetadata) ToUserMetadataOutput() UserMetadataOutput {
	return i.ToUserMetadataOutputWithContext(context.Background())
}

func (i *UserMetadata) ToUserMetadataOutputWithContext(ctx context.Context) UserMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMetadataOutput)
}

func (i *UserMetadata) ToOutput(ctx context.Context) pulumix.Output[*UserMetadata] {
	return pulumix.Output[*UserMetadata]{
		OutputState: i.ToUserMetadataOutputWithContext(ctx).OutputState,
	}
}

// UserMetadataArrayInput is an input type that accepts UserMetadataArray and UserMetadataArrayOutput values.
// You can construct a concrete instance of `UserMetadataArrayInput` via:
//
//	UserMetadataArray{ UserMetadataArgs{...} }
type UserMetadataArrayInput interface {
	pulumi.Input

	ToUserMetadataArrayOutput() UserMetadataArrayOutput
	ToUserMetadataArrayOutputWithContext(context.Context) UserMetadataArrayOutput
}

type UserMetadataArray []UserMetadataInput

func (UserMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserMetadata)(nil)).Elem()
}

func (i UserMetadataArray) ToUserMetadataArrayOutput() UserMetadataArrayOutput {
	return i.ToUserMetadataArrayOutputWithContext(context.Background())
}

func (i UserMetadataArray) ToUserMetadataArrayOutputWithContext(ctx context.Context) UserMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMetadataArrayOutput)
}

func (i UserMetadataArray) ToOutput(ctx context.Context) pulumix.Output[[]*UserMetadata] {
	return pulumix.Output[[]*UserMetadata]{
		OutputState: i.ToUserMetadataArrayOutputWithContext(ctx).OutputState,
	}
}

// UserMetadataMapInput is an input type that accepts UserMetadataMap and UserMetadataMapOutput values.
// You can construct a concrete instance of `UserMetadataMapInput` via:
//
//	UserMetadataMap{ "key": UserMetadataArgs{...} }
type UserMetadataMapInput interface {
	pulumi.Input

	ToUserMetadataMapOutput() UserMetadataMapOutput
	ToUserMetadataMapOutputWithContext(context.Context) UserMetadataMapOutput
}

type UserMetadataMap map[string]UserMetadataInput

func (UserMetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserMetadata)(nil)).Elem()
}

func (i UserMetadataMap) ToUserMetadataMapOutput() UserMetadataMapOutput {
	return i.ToUserMetadataMapOutputWithContext(context.Background())
}

func (i UserMetadataMap) ToUserMetadataMapOutputWithContext(ctx context.Context) UserMetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMetadataMapOutput)
}

func (i UserMetadataMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserMetadata] {
	return pulumix.Output[map[string]*UserMetadata]{
		OutputState: i.ToUserMetadataMapOutputWithContext(ctx).OutputState,
	}
}

type UserMetadataOutput struct{ *pulumi.OutputState }

func (UserMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserMetadata)(nil)).Elem()
}

func (o UserMetadataOutput) ToUserMetadataOutput() UserMetadataOutput {
	return o
}

func (o UserMetadataOutput) ToUserMetadataOutputWithContext(ctx context.Context) UserMetadataOutput {
	return o
}

func (o UserMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[*UserMetadata] {
	return pulumix.Output[*UserMetadata]{
		OutputState: o.OutputState,
	}
}

// The key of a metadata entry
func (o UserMetadataOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *UserMetadata) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// ID of the organization
func (o UserMetadataOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserMetadata) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// ID of the user
func (o UserMetadataOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserMetadata) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// The string representation of a metadata entry value. For binary data, use the base64encode function.
func (o UserMetadataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *UserMetadata) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type UserMetadataArrayOutput struct{ *pulumi.OutputState }

func (UserMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserMetadata)(nil)).Elem()
}

func (o UserMetadataArrayOutput) ToUserMetadataArrayOutput() UserMetadataArrayOutput {
	return o
}

func (o UserMetadataArrayOutput) ToUserMetadataArrayOutputWithContext(ctx context.Context) UserMetadataArrayOutput {
	return o
}

func (o UserMetadataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*UserMetadata] {
	return pulumix.Output[[]*UserMetadata]{
		OutputState: o.OutputState,
	}
}

func (o UserMetadataArrayOutput) Index(i pulumi.IntInput) UserMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserMetadata {
		return vs[0].([]*UserMetadata)[vs[1].(int)]
	}).(UserMetadataOutput)
}

type UserMetadataMapOutput struct{ *pulumi.OutputState }

func (UserMetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserMetadata)(nil)).Elem()
}

func (o UserMetadataMapOutput) ToUserMetadataMapOutput() UserMetadataMapOutput {
	return o
}

func (o UserMetadataMapOutput) ToUserMetadataMapOutputWithContext(ctx context.Context) UserMetadataMapOutput {
	return o
}

func (o UserMetadataMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*UserMetadata] {
	return pulumix.Output[map[string]*UserMetadata]{
		OutputState: o.OutputState,
	}
}

func (o UserMetadataMapOutput) MapIndex(k pulumi.StringInput) UserMetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserMetadata {
		return vs[0].(map[string]*UserMetadata)[vs[1].(string)]
	}).(UserMetadataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserMetadataInput)(nil)).Elem(), &UserMetadata{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMetadataArrayInput)(nil)).Elem(), UserMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMetadataMapInput)(nil)).Elem(), UserMetadataMap{})
	pulumi.RegisterOutputType(UserMetadataOutput{})
	pulumi.RegisterOutputType(UserMetadataArrayOutput{})
	pulumi.RegisterOutputType(UserMetadataMapOutput{})
}
