// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource representing a app key
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.NewApplicationKey(ctx, "default", &zitadel.ApplicationKeyArgs{
//				OrgId:          pulumi.Any(data.Zitadel_org.Default.Id),
//				ProjectId:      pulumi.Any(data.Zitadel_project.Default.Id),
//				AppId:          pulumi.Any(data.Zitadel_application_api.Default.Id),
//				KeyType:        pulumi.String("KEY_TYPE_JSON"),
//				ExpirationDate: pulumi.String("2519-04-01T08:45:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform # The resource can be imported using the ID format `<id:project_id:app_id[:org_id][:key_details]>`. # You can use __SEMICOLON__ to escape :, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/applicationKey:ApplicationKey imported "123456789012345678:123456789012345678:123456789012345678:123456789012345678:$(cat ~/Downloads/123456789012345678.json | sed -e 's/:/__SEMICOLON__/g')"
//
// ```
type ApplicationKey struct {
	pulumi.CustomResourceState

	// ID of the application
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Expiration date of the app key in the RFC3339 format
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// Value of the app key
	KeyDetails pulumi.StringOutput `pulumi:"keyDetails"`
	// Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// ID of the project
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewApplicationKey registers a new resource with the given unique name, arguments, and options.
func NewApplicationKey(ctx *pulumi.Context,
	name string, args *ApplicationKeyArgs, opts ...pulumi.ResourceOption) (*ApplicationKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.ExpirationDate == nil {
		return nil, errors.New("invalid value for required argument 'ExpirationDate'")
	}
	if args.KeyType == nil {
		return nil, errors.New("invalid value for required argument 'KeyType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ApplicationKey
	err := ctx.RegisterResource("zitadel:index/applicationKey:ApplicationKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationKey gets an existing ApplicationKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationKeyState, opts ...pulumi.ResourceOption) (*ApplicationKey, error) {
	var resource ApplicationKey
	err := ctx.ReadResource("zitadel:index/applicationKey:ApplicationKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationKey resources.
type applicationKeyState struct {
	// ID of the application
	AppId *string `pulumi:"appId"`
	// Expiration date of the app key in the RFC3339 format
	ExpirationDate *string `pulumi:"expirationDate"`
	// Value of the app key
	KeyDetails *string `pulumi:"keyDetails"`
	// Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON
	KeyType *string `pulumi:"keyType"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// ID of the project
	ProjectId *string `pulumi:"projectId"`
}

type ApplicationKeyState struct {
	// ID of the application
	AppId pulumi.StringPtrInput
	// Expiration date of the app key in the RFC3339 format
	ExpirationDate pulumi.StringPtrInput
	// Value of the app key
	KeyDetails pulumi.StringPtrInput
	// Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON
	KeyType pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// ID of the project
	ProjectId pulumi.StringPtrInput
}

func (ApplicationKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationKeyState)(nil)).Elem()
}

type applicationKeyArgs struct {
	// ID of the application
	AppId string `pulumi:"appId"`
	// Expiration date of the app key in the RFC3339 format
	ExpirationDate string `pulumi:"expirationDate"`
	// Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON
	KeyType string `pulumi:"keyType"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// ID of the project
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a ApplicationKey resource.
type ApplicationKeyArgs struct {
	// ID of the application
	AppId pulumi.StringInput
	// Expiration date of the app key in the RFC3339 format
	ExpirationDate pulumi.StringInput
	// Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON
	KeyType pulumi.StringInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// ID of the project
	ProjectId pulumi.StringInput
}

func (ApplicationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationKeyArgs)(nil)).Elem()
}

type ApplicationKeyInput interface {
	pulumi.Input

	ToApplicationKeyOutput() ApplicationKeyOutput
	ToApplicationKeyOutputWithContext(ctx context.Context) ApplicationKeyOutput
}

func (*ApplicationKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKey)(nil)).Elem()
}

func (i *ApplicationKey) ToApplicationKeyOutput() ApplicationKeyOutput {
	return i.ToApplicationKeyOutputWithContext(context.Background())
}

func (i *ApplicationKey) ToApplicationKeyOutputWithContext(ctx context.Context) ApplicationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKeyOutput)
}

// ApplicationKeyArrayInput is an input type that accepts ApplicationKeyArray and ApplicationKeyArrayOutput values.
// You can construct a concrete instance of `ApplicationKeyArrayInput` via:
//
//	ApplicationKeyArray{ ApplicationKeyArgs{...} }
type ApplicationKeyArrayInput interface {
	pulumi.Input

	ToApplicationKeyArrayOutput() ApplicationKeyArrayOutput
	ToApplicationKeyArrayOutputWithContext(context.Context) ApplicationKeyArrayOutput
}

type ApplicationKeyArray []ApplicationKeyInput

func (ApplicationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationKey)(nil)).Elem()
}

func (i ApplicationKeyArray) ToApplicationKeyArrayOutput() ApplicationKeyArrayOutput {
	return i.ToApplicationKeyArrayOutputWithContext(context.Background())
}

func (i ApplicationKeyArray) ToApplicationKeyArrayOutputWithContext(ctx context.Context) ApplicationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKeyArrayOutput)
}

// ApplicationKeyMapInput is an input type that accepts ApplicationKeyMap and ApplicationKeyMapOutput values.
// You can construct a concrete instance of `ApplicationKeyMapInput` via:
//
//	ApplicationKeyMap{ "key": ApplicationKeyArgs{...} }
type ApplicationKeyMapInput interface {
	pulumi.Input

	ToApplicationKeyMapOutput() ApplicationKeyMapOutput
	ToApplicationKeyMapOutputWithContext(context.Context) ApplicationKeyMapOutput
}

type ApplicationKeyMap map[string]ApplicationKeyInput

func (ApplicationKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationKey)(nil)).Elem()
}

func (i ApplicationKeyMap) ToApplicationKeyMapOutput() ApplicationKeyMapOutput {
	return i.ToApplicationKeyMapOutputWithContext(context.Background())
}

func (i ApplicationKeyMap) ToApplicationKeyMapOutputWithContext(ctx context.Context) ApplicationKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationKeyMapOutput)
}

type ApplicationKeyOutput struct{ *pulumi.OutputState }

func (ApplicationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationKey)(nil)).Elem()
}

func (o ApplicationKeyOutput) ToApplicationKeyOutput() ApplicationKeyOutput {
	return o
}

func (o ApplicationKeyOutput) ToApplicationKeyOutputWithContext(ctx context.Context) ApplicationKeyOutput {
	return o
}

// ID of the application
func (o ApplicationKeyOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationKey) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Expiration date of the app key in the RFC3339 format
func (o ApplicationKeyOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationKey) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// Value of the app key
func (o ApplicationKeyOutput) KeyDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationKey) pulumi.StringOutput { return v.KeyDetails }).(pulumi.StringOutput)
}

// Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON
func (o ApplicationKeyOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationKey) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// ID of the organization
func (o ApplicationKeyOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationKey) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// ID of the project
func (o ApplicationKeyOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationKey) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type ApplicationKeyArrayOutput struct{ *pulumi.OutputState }

func (ApplicationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationKey)(nil)).Elem()
}

func (o ApplicationKeyArrayOutput) ToApplicationKeyArrayOutput() ApplicationKeyArrayOutput {
	return o
}

func (o ApplicationKeyArrayOutput) ToApplicationKeyArrayOutputWithContext(ctx context.Context) ApplicationKeyArrayOutput {
	return o
}

func (o ApplicationKeyArrayOutput) Index(i pulumi.IntInput) ApplicationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationKey {
		return vs[0].([]*ApplicationKey)[vs[1].(int)]
	}).(ApplicationKeyOutput)
}

type ApplicationKeyMapOutput struct{ *pulumi.OutputState }

func (ApplicationKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationKey)(nil)).Elem()
}

func (o ApplicationKeyMapOutput) ToApplicationKeyMapOutput() ApplicationKeyMapOutput {
	return o
}

func (o ApplicationKeyMapOutput) ToApplicationKeyMapOutputWithContext(ctx context.Context) ApplicationKeyMapOutput {
	return o
}

func (o ApplicationKeyMapOutput) MapIndex(k pulumi.StringInput) ApplicationKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationKey {
		return vs[0].(map[string]*ApplicationKey)[vs[1].(string)]
	}).(ApplicationKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKeyInput)(nil)).Elem(), &ApplicationKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKeyArrayInput)(nil)).Elem(), ApplicationKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationKeyMapInput)(nil)).Elem(), ApplicationKeyMap{})
	pulumi.RegisterOutputType(ApplicationKeyOutput{})
	pulumi.RegisterOutputType(ApplicationKeyArrayOutput{})
	pulumi.RegisterOutputType(ApplicationKeyMapOutput{})
}
