// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel/internal"
)

// Resource representing a generic OAuth2 IDP on the organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.NewOrgIdpOauth(ctx, "default", &zitadel.OrgIdpOauthArgs{
//				OrgId:                 pulumi.Any(data.Zitadel_org.Default.Id),
//				ClientId:              pulumi.String("15765e..."),
//				ClientSecret:          pulumi.String("*****abcxyz"),
//				AuthorizationEndpoint: pulumi.String("https://accounts.google.com/o/oauth2/v2/auth"),
//				TokenEndpoint:         pulumi.String("https://oauth2.googleapis.com/token"),
//				UserEndpoint:          pulumi.String("https://openidconnect.googleapis.com/v1/userinfo"),
//				IdAttribute:           pulumi.String("user_id"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("openid"),
//					pulumi.String("profile"),
//					pulumi.String("email"),
//				},
//				IsLinkingAllowed:  pulumi.Bool(false),
//				IsCreationAllowed: pulumi.Bool(true),
//				IsAutoCreation:    pulumi.Bool(false),
//				IsAutoUpdate:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// bash The resource can be imported using the ID format `<id[:org_id][:client_secret]>`, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/orgIdpOauth:OrgIdpOauth imported '123456789012345678:123456789012345678:1234567890abcdef'
//
// ```
type OrgIdpOauth struct {
	pulumi.CustomResourceState

	// The authorization endpoint
	AuthorizationEndpoint pulumi.StringOutput `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// The id attribute
	IdAttribute pulumi.StringOutput `pulumi:"idAttribute"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolOutput `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolOutput `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolOutput `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolOutput `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The token endpoint
	TokenEndpoint pulumi.StringOutput `pulumi:"tokenEndpoint"`
	// The user endpoint
	UserEndpoint pulumi.StringOutput `pulumi:"userEndpoint"`
}

// NewOrgIdpOauth registers a new resource with the given unique name, arguments, and options.
func NewOrgIdpOauth(ctx *pulumi.Context,
	name string, args *OrgIdpOauthArgs, opts ...pulumi.ResourceOption) (*OrgIdpOauth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationEndpoint'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.IdAttribute == nil {
		return nil, errors.New("invalid value for required argument 'IdAttribute'")
	}
	if args.IsAutoCreation == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoCreation'")
	}
	if args.IsAutoUpdate == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoUpdate'")
	}
	if args.IsCreationAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsCreationAllowed'")
	}
	if args.IsLinkingAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsLinkingAllowed'")
	}
	if args.TokenEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'TokenEndpoint'")
	}
	if args.UserEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'UserEndpoint'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgIdpOauth
	err := ctx.RegisterResource("zitadel:index/orgIdpOauth:OrgIdpOauth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgIdpOauth gets an existing OrgIdpOauth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgIdpOauth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgIdpOauthState, opts ...pulumi.ResourceOption) (*OrgIdpOauth, error) {
	var resource OrgIdpOauth
	err := ctx.ReadResource("zitadel:index/orgIdpOauth:OrgIdpOauth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgIdpOauth resources.
type orgIdpOauthState struct {
	// The authorization endpoint
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId *string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret *string `pulumi:"clientSecret"`
	// The id attribute
	IdAttribute *string `pulumi:"idAttribute"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
	// The token endpoint
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The user endpoint
	UserEndpoint *string `pulumi:"userEndpoint"`
}

type OrgIdpOauthState struct {
	// The authorization endpoint
	AuthorizationEndpoint pulumi.StringPtrInput
	// client id generated by the identity provider
	ClientId pulumi.StringPtrInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringPtrInput
	// The id attribute
	IdAttribute pulumi.StringPtrInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolPtrInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolPtrInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolPtrInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolPtrInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
	// The token endpoint
	TokenEndpoint pulumi.StringPtrInput
	// The user endpoint
	UserEndpoint pulumi.StringPtrInput
}

func (OrgIdpOauthState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpOauthState)(nil)).Elem()
}

type orgIdpOauthArgs struct {
	// The authorization endpoint
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret string `pulumi:"clientSecret"`
	// The id attribute
	IdAttribute string `pulumi:"idAttribute"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed bool `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
	// The token endpoint
	TokenEndpoint string `pulumi:"tokenEndpoint"`
	// The user endpoint
	UserEndpoint string `pulumi:"userEndpoint"`
}

// The set of arguments for constructing a OrgIdpOauth resource.
type OrgIdpOauthArgs struct {
	// The authorization endpoint
	AuthorizationEndpoint pulumi.StringInput
	// client id generated by the identity provider
	ClientId pulumi.StringInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringInput
	// The id attribute
	IdAttribute pulumi.StringInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
	// The token endpoint
	TokenEndpoint pulumi.StringInput
	// The user endpoint
	UserEndpoint pulumi.StringInput
}

func (OrgIdpOauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpOauthArgs)(nil)).Elem()
}

type OrgIdpOauthInput interface {
	pulumi.Input

	ToOrgIdpOauthOutput() OrgIdpOauthOutput
	ToOrgIdpOauthOutputWithContext(ctx context.Context) OrgIdpOauthOutput
}

func (*OrgIdpOauth) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpOauth)(nil)).Elem()
}

func (i *OrgIdpOauth) ToOrgIdpOauthOutput() OrgIdpOauthOutput {
	return i.ToOrgIdpOauthOutputWithContext(context.Background())
}

func (i *OrgIdpOauth) ToOrgIdpOauthOutputWithContext(ctx context.Context) OrgIdpOauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpOauthOutput)
}

func (i *OrgIdpOauth) ToOutput(ctx context.Context) pulumix.Output[*OrgIdpOauth] {
	return pulumix.Output[*OrgIdpOauth]{
		OutputState: i.ToOrgIdpOauthOutputWithContext(ctx).OutputState,
	}
}

// OrgIdpOauthArrayInput is an input type that accepts OrgIdpOauthArray and OrgIdpOauthArrayOutput values.
// You can construct a concrete instance of `OrgIdpOauthArrayInput` via:
//
//	OrgIdpOauthArray{ OrgIdpOauthArgs{...} }
type OrgIdpOauthArrayInput interface {
	pulumi.Input

	ToOrgIdpOauthArrayOutput() OrgIdpOauthArrayOutput
	ToOrgIdpOauthArrayOutputWithContext(context.Context) OrgIdpOauthArrayOutput
}

type OrgIdpOauthArray []OrgIdpOauthInput

func (OrgIdpOauthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpOauth)(nil)).Elem()
}

func (i OrgIdpOauthArray) ToOrgIdpOauthArrayOutput() OrgIdpOauthArrayOutput {
	return i.ToOrgIdpOauthArrayOutputWithContext(context.Background())
}

func (i OrgIdpOauthArray) ToOrgIdpOauthArrayOutputWithContext(ctx context.Context) OrgIdpOauthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpOauthArrayOutput)
}

func (i OrgIdpOauthArray) ToOutput(ctx context.Context) pulumix.Output[[]*OrgIdpOauth] {
	return pulumix.Output[[]*OrgIdpOauth]{
		OutputState: i.ToOrgIdpOauthArrayOutputWithContext(ctx).OutputState,
	}
}

// OrgIdpOauthMapInput is an input type that accepts OrgIdpOauthMap and OrgIdpOauthMapOutput values.
// You can construct a concrete instance of `OrgIdpOauthMapInput` via:
//
//	OrgIdpOauthMap{ "key": OrgIdpOauthArgs{...} }
type OrgIdpOauthMapInput interface {
	pulumi.Input

	ToOrgIdpOauthMapOutput() OrgIdpOauthMapOutput
	ToOrgIdpOauthMapOutputWithContext(context.Context) OrgIdpOauthMapOutput
}

type OrgIdpOauthMap map[string]OrgIdpOauthInput

func (OrgIdpOauthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpOauth)(nil)).Elem()
}

func (i OrgIdpOauthMap) ToOrgIdpOauthMapOutput() OrgIdpOauthMapOutput {
	return i.ToOrgIdpOauthMapOutputWithContext(context.Background())
}

func (i OrgIdpOauthMap) ToOrgIdpOauthMapOutputWithContext(ctx context.Context) OrgIdpOauthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpOauthMapOutput)
}

func (i OrgIdpOauthMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgIdpOauth] {
	return pulumix.Output[map[string]*OrgIdpOauth]{
		OutputState: i.ToOrgIdpOauthMapOutputWithContext(ctx).OutputState,
	}
}

type OrgIdpOauthOutput struct{ *pulumi.OutputState }

func (OrgIdpOauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpOauth)(nil)).Elem()
}

func (o OrgIdpOauthOutput) ToOrgIdpOauthOutput() OrgIdpOauthOutput {
	return o
}

func (o OrgIdpOauthOutput) ToOrgIdpOauthOutputWithContext(ctx context.Context) OrgIdpOauthOutput {
	return o
}

func (o OrgIdpOauthOutput) ToOutput(ctx context.Context) pulumix.Output[*OrgIdpOauth] {
	return pulumix.Output[*OrgIdpOauth]{
		OutputState: o.OutputState,
	}
}

// The authorization endpoint
func (o OrgIdpOauthOutput) AuthorizationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringOutput { return v.AuthorizationEndpoint }).(pulumi.StringOutput)
}

// client id generated by the identity provider
func (o OrgIdpOauthOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// client secret generated by the identity provider
func (o OrgIdpOauthOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// The id attribute
func (o OrgIdpOauthOutput) IdAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringOutput { return v.IdAttribute }).(pulumi.StringOutput)
}

// enable if a new account in ZITADEL should be created automatically on login with an external account
func (o OrgIdpOauthOutput) IsAutoCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.BoolOutput { return v.IsAutoCreation }).(pulumi.BoolOutput)
}

// enable if a the ZITADEL account fields should be updated automatically on each login
func (o OrgIdpOauthOutput) IsAutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.BoolOutput { return v.IsAutoUpdate }).(pulumi.BoolOutput)
}

// enable if users should be able to create a new account in ZITADEL when using an external account
func (o OrgIdpOauthOutput) IsCreationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.BoolOutput { return v.IsCreationAllowed }).(pulumi.BoolOutput)
}

// enable if users should be able to link an existing ZITADEL user with an external account
func (o OrgIdpOauthOutput) IsLinkingAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.BoolOutput { return v.IsLinkingAllowed }).(pulumi.BoolOutput)
}

// Name of the IDP
func (o OrgIdpOauthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization
func (o OrgIdpOauthOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// the scopes requested by ZITADEL during the request on the identity provider
func (o OrgIdpOauthOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The token endpoint
func (o OrgIdpOauthOutput) TokenEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringOutput { return v.TokenEndpoint }).(pulumi.StringOutput)
}

// The user endpoint
func (o OrgIdpOauthOutput) UserEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpOauth) pulumi.StringOutput { return v.UserEndpoint }).(pulumi.StringOutput)
}

type OrgIdpOauthArrayOutput struct{ *pulumi.OutputState }

func (OrgIdpOauthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpOauth)(nil)).Elem()
}

func (o OrgIdpOauthArrayOutput) ToOrgIdpOauthArrayOutput() OrgIdpOauthArrayOutput {
	return o
}

func (o OrgIdpOauthArrayOutput) ToOrgIdpOauthArrayOutputWithContext(ctx context.Context) OrgIdpOauthArrayOutput {
	return o
}

func (o OrgIdpOauthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OrgIdpOauth] {
	return pulumix.Output[[]*OrgIdpOauth]{
		OutputState: o.OutputState,
	}
}

func (o OrgIdpOauthArrayOutput) Index(i pulumi.IntInput) OrgIdpOauthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgIdpOauth {
		return vs[0].([]*OrgIdpOauth)[vs[1].(int)]
	}).(OrgIdpOauthOutput)
}

type OrgIdpOauthMapOutput struct{ *pulumi.OutputState }

func (OrgIdpOauthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpOauth)(nil)).Elem()
}

func (o OrgIdpOauthMapOutput) ToOrgIdpOauthMapOutput() OrgIdpOauthMapOutput {
	return o
}

func (o OrgIdpOauthMapOutput) ToOrgIdpOauthMapOutputWithContext(ctx context.Context) OrgIdpOauthMapOutput {
	return o
}

func (o OrgIdpOauthMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgIdpOauth] {
	return pulumix.Output[map[string]*OrgIdpOauth]{
		OutputState: o.OutputState,
	}
}

func (o OrgIdpOauthMapOutput) MapIndex(k pulumi.StringInput) OrgIdpOauthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgIdpOauth {
		return vs[0].(map[string]*OrgIdpOauth)[vs[1].(string)]
	}).(OrgIdpOauthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpOauthInput)(nil)).Elem(), &OrgIdpOauth{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpOauthArrayInput)(nil)).Elem(), OrgIdpOauthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpOauthMapInput)(nil)).Elem(), OrgIdpOauthMap{})
	pulumi.RegisterOutputType(OrgIdpOauthOutput{})
	pulumi.RegisterOutputType(OrgIdpOauthArrayOutput{})
	pulumi.RegisterOutputType(OrgIdpOauthMapOutput{})
}
