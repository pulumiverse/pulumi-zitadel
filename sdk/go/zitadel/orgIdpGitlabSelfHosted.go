// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel/internal"
)

// Resource representing a GitLab Self Hosted IdP on the organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.NewOrgIdpGitlabSelfHosted(ctx, "default", &zitadel.OrgIdpGitlabSelfHostedArgs{
//				OrgId:        pulumi.Any(data.Zitadel_org.Default.Id),
//				ClientId:     pulumi.String("15765e..."),
//				ClientSecret: pulumi.String("*****abcxyz"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("openid"),
//					pulumi.String("profile"),
//					pulumi.String("email"),
//				},
//				Issuer:            pulumi.String("https://my.issuer"),
//				IsLinkingAllowed:  pulumi.Bool(false),
//				IsCreationAllowed: pulumi.Bool(true),
//				IsAutoCreation:    pulumi.Bool(false),
//				IsAutoUpdate:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform The resource can be imported using the ID format `<id[:org_id][:client_secret]>`, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/orgIdpGitlabSelfHosted:OrgIdpGitlabSelfHosted imported '123456789012345678:123456789012345678:1234567890abcdef'
//
// ```
type OrgIdpGitlabSelfHosted struct {
	pulumi.CustomResourceState

	// client id generated by the identity provider
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolOutput `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolOutput `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolOutput `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolOutput `pulumi:"isLinkingAllowed"`
	// the providers issuer
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Name of the IDP
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
}

// NewOrgIdpGitlabSelfHosted registers a new resource with the given unique name, arguments, and options.
func NewOrgIdpGitlabSelfHosted(ctx *pulumi.Context,
	name string, args *OrgIdpGitlabSelfHostedArgs, opts ...pulumi.ResourceOption) (*OrgIdpGitlabSelfHosted, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.IsAutoCreation == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoCreation'")
	}
	if args.IsAutoUpdate == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoUpdate'")
	}
	if args.IsCreationAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsCreationAllowed'")
	}
	if args.IsLinkingAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsLinkingAllowed'")
	}
	if args.Issuer == nil {
		return nil, errors.New("invalid value for required argument 'Issuer'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgIdpGitlabSelfHosted
	err := ctx.RegisterResource("zitadel:index/orgIdpGitlabSelfHosted:OrgIdpGitlabSelfHosted", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgIdpGitlabSelfHosted gets an existing OrgIdpGitlabSelfHosted resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgIdpGitlabSelfHosted(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgIdpGitlabSelfHostedState, opts ...pulumi.ResourceOption) (*OrgIdpGitlabSelfHosted, error) {
	var resource OrgIdpGitlabSelfHosted
	err := ctx.ReadResource("zitadel:index/orgIdpGitlabSelfHosted:OrgIdpGitlabSelfHosted", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgIdpGitlabSelfHosted resources.
type orgIdpGitlabSelfHostedState struct {
	// client id generated by the identity provider
	ClientId *string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret *string `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `pulumi:"isLinkingAllowed"`
	// the providers issuer
	Issuer *string `pulumi:"issuer"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
}

type OrgIdpGitlabSelfHostedState struct {
	// client id generated by the identity provider
	ClientId pulumi.StringPtrInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringPtrInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolPtrInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolPtrInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolPtrInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolPtrInput
	// the providers issuer
	Issuer pulumi.StringPtrInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
}

func (OrgIdpGitlabSelfHostedState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpGitlabSelfHostedState)(nil)).Elem()
}

type orgIdpGitlabSelfHostedArgs struct {
	// client id generated by the identity provider
	ClientId string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret string `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed bool `pulumi:"isLinkingAllowed"`
	// the providers issuer
	Issuer string `pulumi:"issuer"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
}

// The set of arguments for constructing a OrgIdpGitlabSelfHosted resource.
type OrgIdpGitlabSelfHostedArgs struct {
	// client id generated by the identity provider
	ClientId pulumi.StringInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolInput
	// the providers issuer
	Issuer pulumi.StringInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
}

func (OrgIdpGitlabSelfHostedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpGitlabSelfHostedArgs)(nil)).Elem()
}

type OrgIdpGitlabSelfHostedInput interface {
	pulumi.Input

	ToOrgIdpGitlabSelfHostedOutput() OrgIdpGitlabSelfHostedOutput
	ToOrgIdpGitlabSelfHostedOutputWithContext(ctx context.Context) OrgIdpGitlabSelfHostedOutput
}

func (*OrgIdpGitlabSelfHosted) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpGitlabSelfHosted)(nil)).Elem()
}

func (i *OrgIdpGitlabSelfHosted) ToOrgIdpGitlabSelfHostedOutput() OrgIdpGitlabSelfHostedOutput {
	return i.ToOrgIdpGitlabSelfHostedOutputWithContext(context.Background())
}

func (i *OrgIdpGitlabSelfHosted) ToOrgIdpGitlabSelfHostedOutputWithContext(ctx context.Context) OrgIdpGitlabSelfHostedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpGitlabSelfHostedOutput)
}

func (i *OrgIdpGitlabSelfHosted) ToOutput(ctx context.Context) pulumix.Output[*OrgIdpGitlabSelfHosted] {
	return pulumix.Output[*OrgIdpGitlabSelfHosted]{
		OutputState: i.ToOrgIdpGitlabSelfHostedOutputWithContext(ctx).OutputState,
	}
}

// OrgIdpGitlabSelfHostedArrayInput is an input type that accepts OrgIdpGitlabSelfHostedArray and OrgIdpGitlabSelfHostedArrayOutput values.
// You can construct a concrete instance of `OrgIdpGitlabSelfHostedArrayInput` via:
//
//	OrgIdpGitlabSelfHostedArray{ OrgIdpGitlabSelfHostedArgs{...} }
type OrgIdpGitlabSelfHostedArrayInput interface {
	pulumi.Input

	ToOrgIdpGitlabSelfHostedArrayOutput() OrgIdpGitlabSelfHostedArrayOutput
	ToOrgIdpGitlabSelfHostedArrayOutputWithContext(context.Context) OrgIdpGitlabSelfHostedArrayOutput
}

type OrgIdpGitlabSelfHostedArray []OrgIdpGitlabSelfHostedInput

func (OrgIdpGitlabSelfHostedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpGitlabSelfHosted)(nil)).Elem()
}

func (i OrgIdpGitlabSelfHostedArray) ToOrgIdpGitlabSelfHostedArrayOutput() OrgIdpGitlabSelfHostedArrayOutput {
	return i.ToOrgIdpGitlabSelfHostedArrayOutputWithContext(context.Background())
}

func (i OrgIdpGitlabSelfHostedArray) ToOrgIdpGitlabSelfHostedArrayOutputWithContext(ctx context.Context) OrgIdpGitlabSelfHostedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpGitlabSelfHostedArrayOutput)
}

func (i OrgIdpGitlabSelfHostedArray) ToOutput(ctx context.Context) pulumix.Output[[]*OrgIdpGitlabSelfHosted] {
	return pulumix.Output[[]*OrgIdpGitlabSelfHosted]{
		OutputState: i.ToOrgIdpGitlabSelfHostedArrayOutputWithContext(ctx).OutputState,
	}
}

// OrgIdpGitlabSelfHostedMapInput is an input type that accepts OrgIdpGitlabSelfHostedMap and OrgIdpGitlabSelfHostedMapOutput values.
// You can construct a concrete instance of `OrgIdpGitlabSelfHostedMapInput` via:
//
//	OrgIdpGitlabSelfHostedMap{ "key": OrgIdpGitlabSelfHostedArgs{...} }
type OrgIdpGitlabSelfHostedMapInput interface {
	pulumi.Input

	ToOrgIdpGitlabSelfHostedMapOutput() OrgIdpGitlabSelfHostedMapOutput
	ToOrgIdpGitlabSelfHostedMapOutputWithContext(context.Context) OrgIdpGitlabSelfHostedMapOutput
}

type OrgIdpGitlabSelfHostedMap map[string]OrgIdpGitlabSelfHostedInput

func (OrgIdpGitlabSelfHostedMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpGitlabSelfHosted)(nil)).Elem()
}

func (i OrgIdpGitlabSelfHostedMap) ToOrgIdpGitlabSelfHostedMapOutput() OrgIdpGitlabSelfHostedMapOutput {
	return i.ToOrgIdpGitlabSelfHostedMapOutputWithContext(context.Background())
}

func (i OrgIdpGitlabSelfHostedMap) ToOrgIdpGitlabSelfHostedMapOutputWithContext(ctx context.Context) OrgIdpGitlabSelfHostedMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpGitlabSelfHostedMapOutput)
}

func (i OrgIdpGitlabSelfHostedMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgIdpGitlabSelfHosted] {
	return pulumix.Output[map[string]*OrgIdpGitlabSelfHosted]{
		OutputState: i.ToOrgIdpGitlabSelfHostedMapOutputWithContext(ctx).OutputState,
	}
}

type OrgIdpGitlabSelfHostedOutput struct{ *pulumi.OutputState }

func (OrgIdpGitlabSelfHostedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpGitlabSelfHosted)(nil)).Elem()
}

func (o OrgIdpGitlabSelfHostedOutput) ToOrgIdpGitlabSelfHostedOutput() OrgIdpGitlabSelfHostedOutput {
	return o
}

func (o OrgIdpGitlabSelfHostedOutput) ToOrgIdpGitlabSelfHostedOutputWithContext(ctx context.Context) OrgIdpGitlabSelfHostedOutput {
	return o
}

func (o OrgIdpGitlabSelfHostedOutput) ToOutput(ctx context.Context) pulumix.Output[*OrgIdpGitlabSelfHosted] {
	return pulumix.Output[*OrgIdpGitlabSelfHosted]{
		OutputState: o.OutputState,
	}
}

// client id generated by the identity provider
func (o OrgIdpGitlabSelfHostedOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// client secret generated by the identity provider
func (o OrgIdpGitlabSelfHostedOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// enable if a new account in ZITADEL should be created automatically on login with an external account
func (o OrgIdpGitlabSelfHostedOutput) IsAutoCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.BoolOutput { return v.IsAutoCreation }).(pulumi.BoolOutput)
}

// enable if a the ZITADEL account fields should be updated automatically on each login
func (o OrgIdpGitlabSelfHostedOutput) IsAutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.BoolOutput { return v.IsAutoUpdate }).(pulumi.BoolOutput)
}

// enable if users should be able to create a new account in ZITADEL when using an external account
func (o OrgIdpGitlabSelfHostedOutput) IsCreationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.BoolOutput { return v.IsCreationAllowed }).(pulumi.BoolOutput)
}

// enable if users should be able to link an existing ZITADEL user with an external account
func (o OrgIdpGitlabSelfHostedOutput) IsLinkingAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.BoolOutput { return v.IsLinkingAllowed }).(pulumi.BoolOutput)
}

// the providers issuer
func (o OrgIdpGitlabSelfHostedOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// Name of the IDP
func (o OrgIdpGitlabSelfHostedOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization
func (o OrgIdpGitlabSelfHostedOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// the scopes requested by ZITADEL during the request on the identity provider
func (o OrgIdpGitlabSelfHostedOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgIdpGitlabSelfHosted) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

type OrgIdpGitlabSelfHostedArrayOutput struct{ *pulumi.OutputState }

func (OrgIdpGitlabSelfHostedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpGitlabSelfHosted)(nil)).Elem()
}

func (o OrgIdpGitlabSelfHostedArrayOutput) ToOrgIdpGitlabSelfHostedArrayOutput() OrgIdpGitlabSelfHostedArrayOutput {
	return o
}

func (o OrgIdpGitlabSelfHostedArrayOutput) ToOrgIdpGitlabSelfHostedArrayOutputWithContext(ctx context.Context) OrgIdpGitlabSelfHostedArrayOutput {
	return o
}

func (o OrgIdpGitlabSelfHostedArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OrgIdpGitlabSelfHosted] {
	return pulumix.Output[[]*OrgIdpGitlabSelfHosted]{
		OutputState: o.OutputState,
	}
}

func (o OrgIdpGitlabSelfHostedArrayOutput) Index(i pulumi.IntInput) OrgIdpGitlabSelfHostedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgIdpGitlabSelfHosted {
		return vs[0].([]*OrgIdpGitlabSelfHosted)[vs[1].(int)]
	}).(OrgIdpGitlabSelfHostedOutput)
}

type OrgIdpGitlabSelfHostedMapOutput struct{ *pulumi.OutputState }

func (OrgIdpGitlabSelfHostedMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpGitlabSelfHosted)(nil)).Elem()
}

func (o OrgIdpGitlabSelfHostedMapOutput) ToOrgIdpGitlabSelfHostedMapOutput() OrgIdpGitlabSelfHostedMapOutput {
	return o
}

func (o OrgIdpGitlabSelfHostedMapOutput) ToOrgIdpGitlabSelfHostedMapOutputWithContext(ctx context.Context) OrgIdpGitlabSelfHostedMapOutput {
	return o
}

func (o OrgIdpGitlabSelfHostedMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgIdpGitlabSelfHosted] {
	return pulumix.Output[map[string]*OrgIdpGitlabSelfHosted]{
		OutputState: o.OutputState,
	}
}

func (o OrgIdpGitlabSelfHostedMapOutput) MapIndex(k pulumi.StringInput) OrgIdpGitlabSelfHostedOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgIdpGitlabSelfHosted {
		return vs[0].(map[string]*OrgIdpGitlabSelfHosted)[vs[1].(string)]
	}).(OrgIdpGitlabSelfHostedOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpGitlabSelfHostedInput)(nil)).Elem(), &OrgIdpGitlabSelfHosted{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpGitlabSelfHostedArrayInput)(nil)).Elem(), OrgIdpGitlabSelfHostedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpGitlabSelfHostedMapInput)(nil)).Elem(), OrgIdpGitlabSelfHostedMap{})
	pulumi.RegisterOutputType(OrgIdpGitlabSelfHostedOutput{})
	pulumi.RegisterOutputType(OrgIdpGitlabSelfHostedArrayOutput{})
	pulumi.RegisterOutputType(OrgIdpGitlabSelfHostedMapOutput{})
}
