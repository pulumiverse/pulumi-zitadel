// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource representing a GitHub Enterprise IdP on the organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := zitadel.NewOrgIdpGithubEs(ctx, "default", &zitadel.OrgIdpGithubEsArgs{
// 			OrgId:        pulumi.Any(data.Zitadel_org.Default.Id),
// 			ClientId:     pulumi.String("86a165..."),
// 			ClientSecret: pulumi.String("*****afdbac18"),
// 			Scopes: pulumi.StringArray{
// 				pulumi.String("openid"),
// 				pulumi.String("profile"),
// 				pulumi.String("email"),
// 			},
// 			AuthorizationEndpoint: pulumi.String("https://auth.endpoint"),
// 			TokenEndpoint:         pulumi.String("https://token.endpoint"),
// 			UserEndpoint:          pulumi.String("https://user.endpoint"),
// 			IsLinkingAllowed:      pulumi.Bool(false),
// 			IsCreationAllowed:     pulumi.Bool(true),
// 			IsAutoCreation:        pulumi.Bool(false),
// 			IsAutoUpdate:          pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// terraform # The resource can be imported using the ID format `<id[:org_id][:client_secret]>`, e.g.
//
// ```sh
//  $ pulumi import zitadel:index/orgIdpGithubEs:OrgIdpGithubEs imported '123456789012345678:123456789012345678:123456789012345678:123456789012345678'
// ```
type OrgIdpGithubEs struct {
	pulumi.CustomResourceState

	// the providers authorization endpoint
	AuthorizationEndpoint pulumi.StringOutput `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolOutput `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolOutput `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolOutput `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolOutput `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// the providers token endpoint
	TokenEndpoint pulumi.StringOutput `pulumi:"tokenEndpoint"`
	// the providers user endpoint
	UserEndpoint pulumi.StringOutput `pulumi:"userEndpoint"`
}

// NewOrgIdpGithubEs registers a new resource with the given unique name, arguments, and options.
func NewOrgIdpGithubEs(ctx *pulumi.Context,
	name string, args *OrgIdpGithubEsArgs, opts ...pulumi.ResourceOption) (*OrgIdpGithubEs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationEndpoint'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.IsAutoCreation == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoCreation'")
	}
	if args.IsAutoUpdate == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoUpdate'")
	}
	if args.IsCreationAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsCreationAllowed'")
	}
	if args.IsLinkingAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsLinkingAllowed'")
	}
	if args.TokenEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'TokenEndpoint'")
	}
	if args.UserEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'UserEndpoint'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource OrgIdpGithubEs
	err := ctx.RegisterResource("zitadel:index/orgIdpGithubEs:OrgIdpGithubEs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgIdpGithubEs gets an existing OrgIdpGithubEs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgIdpGithubEs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgIdpGithubEsState, opts ...pulumi.ResourceOption) (*OrgIdpGithubEs, error) {
	var resource OrgIdpGithubEs
	err := ctx.ReadResource("zitadel:index/orgIdpGithubEs:OrgIdpGithubEs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgIdpGithubEs resources.
type orgIdpGithubEsState struct {
	// the providers authorization endpoint
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId *string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret *string `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
	// the providers token endpoint
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// the providers user endpoint
	UserEndpoint *string `pulumi:"userEndpoint"`
}

type OrgIdpGithubEsState struct {
	// the providers authorization endpoint
	AuthorizationEndpoint pulumi.StringPtrInput
	// client id generated by the identity provider
	ClientId pulumi.StringPtrInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringPtrInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolPtrInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolPtrInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolPtrInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolPtrInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
	// the providers token endpoint
	TokenEndpoint pulumi.StringPtrInput
	// the providers user endpoint
	UserEndpoint pulumi.StringPtrInput
}

func (OrgIdpGithubEsState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpGithubEsState)(nil)).Elem()
}

type orgIdpGithubEsArgs struct {
	// the providers authorization endpoint
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret string `pulumi:"clientSecret"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed bool `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
	// the providers token endpoint
	TokenEndpoint string `pulumi:"tokenEndpoint"`
	// the providers user endpoint
	UserEndpoint string `pulumi:"userEndpoint"`
}

// The set of arguments for constructing a OrgIdpGithubEs resource.
type OrgIdpGithubEsArgs struct {
	// the providers authorization endpoint
	AuthorizationEndpoint pulumi.StringInput
	// client id generated by the identity provider
	ClientId pulumi.StringInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
	// the providers token endpoint
	TokenEndpoint pulumi.StringInput
	// the providers user endpoint
	UserEndpoint pulumi.StringInput
}

func (OrgIdpGithubEsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpGithubEsArgs)(nil)).Elem()
}

type OrgIdpGithubEsInput interface {
	pulumi.Input

	ToOrgIdpGithubEsOutput() OrgIdpGithubEsOutput
	ToOrgIdpGithubEsOutputWithContext(ctx context.Context) OrgIdpGithubEsOutput
}

func (*OrgIdpGithubEs) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpGithubEs)(nil)).Elem()
}

func (i *OrgIdpGithubEs) ToOrgIdpGithubEsOutput() OrgIdpGithubEsOutput {
	return i.ToOrgIdpGithubEsOutputWithContext(context.Background())
}

func (i *OrgIdpGithubEs) ToOrgIdpGithubEsOutputWithContext(ctx context.Context) OrgIdpGithubEsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpGithubEsOutput)
}

// OrgIdpGithubEsArrayInput is an input type that accepts OrgIdpGithubEsArray and OrgIdpGithubEsArrayOutput values.
// You can construct a concrete instance of `OrgIdpGithubEsArrayInput` via:
//
//          OrgIdpGithubEsArray{ OrgIdpGithubEsArgs{...} }
type OrgIdpGithubEsArrayInput interface {
	pulumi.Input

	ToOrgIdpGithubEsArrayOutput() OrgIdpGithubEsArrayOutput
	ToOrgIdpGithubEsArrayOutputWithContext(context.Context) OrgIdpGithubEsArrayOutput
}

type OrgIdpGithubEsArray []OrgIdpGithubEsInput

func (OrgIdpGithubEsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpGithubEs)(nil)).Elem()
}

func (i OrgIdpGithubEsArray) ToOrgIdpGithubEsArrayOutput() OrgIdpGithubEsArrayOutput {
	return i.ToOrgIdpGithubEsArrayOutputWithContext(context.Background())
}

func (i OrgIdpGithubEsArray) ToOrgIdpGithubEsArrayOutputWithContext(ctx context.Context) OrgIdpGithubEsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpGithubEsArrayOutput)
}

// OrgIdpGithubEsMapInput is an input type that accepts OrgIdpGithubEsMap and OrgIdpGithubEsMapOutput values.
// You can construct a concrete instance of `OrgIdpGithubEsMapInput` via:
//
//          OrgIdpGithubEsMap{ "key": OrgIdpGithubEsArgs{...} }
type OrgIdpGithubEsMapInput interface {
	pulumi.Input

	ToOrgIdpGithubEsMapOutput() OrgIdpGithubEsMapOutput
	ToOrgIdpGithubEsMapOutputWithContext(context.Context) OrgIdpGithubEsMapOutput
}

type OrgIdpGithubEsMap map[string]OrgIdpGithubEsInput

func (OrgIdpGithubEsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpGithubEs)(nil)).Elem()
}

func (i OrgIdpGithubEsMap) ToOrgIdpGithubEsMapOutput() OrgIdpGithubEsMapOutput {
	return i.ToOrgIdpGithubEsMapOutputWithContext(context.Background())
}

func (i OrgIdpGithubEsMap) ToOrgIdpGithubEsMapOutputWithContext(ctx context.Context) OrgIdpGithubEsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpGithubEsMapOutput)
}

type OrgIdpGithubEsOutput struct{ *pulumi.OutputState }

func (OrgIdpGithubEsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpGithubEs)(nil)).Elem()
}

func (o OrgIdpGithubEsOutput) ToOrgIdpGithubEsOutput() OrgIdpGithubEsOutput {
	return o
}

func (o OrgIdpGithubEsOutput) ToOrgIdpGithubEsOutputWithContext(ctx context.Context) OrgIdpGithubEsOutput {
	return o
}

// the providers authorization endpoint
func (o OrgIdpGithubEsOutput) AuthorizationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.StringOutput { return v.AuthorizationEndpoint }).(pulumi.StringOutput)
}

// client id generated by the identity provider
func (o OrgIdpGithubEsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// client secret generated by the identity provider
func (o OrgIdpGithubEsOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// enable if a new account in ZITADEL should be created automatically on login with an external account
func (o OrgIdpGithubEsOutput) IsAutoCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.BoolOutput { return v.IsAutoCreation }).(pulumi.BoolOutput)
}

// enable if a the ZITADEL account fields should be updated automatically on each login
func (o OrgIdpGithubEsOutput) IsAutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.BoolOutput { return v.IsAutoUpdate }).(pulumi.BoolOutput)
}

// enable if users should be able to create a new account in ZITADEL when using an external account
func (o OrgIdpGithubEsOutput) IsCreationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.BoolOutput { return v.IsCreationAllowed }).(pulumi.BoolOutput)
}

// enable if users should be able to link an existing ZITADEL user with an external account
func (o OrgIdpGithubEsOutput) IsLinkingAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.BoolOutput { return v.IsLinkingAllowed }).(pulumi.BoolOutput)
}

// Name of the IDP
func (o OrgIdpGithubEsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization
func (o OrgIdpGithubEsOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// the scopes requested by ZITADEL during the request on the identity provider
func (o OrgIdpGithubEsOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// the providers token endpoint
func (o OrgIdpGithubEsOutput) TokenEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.StringOutput { return v.TokenEndpoint }).(pulumi.StringOutput)
}

// the providers user endpoint
func (o OrgIdpGithubEsOutput) UserEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpGithubEs) pulumi.StringOutput { return v.UserEndpoint }).(pulumi.StringOutput)
}

type OrgIdpGithubEsArrayOutput struct{ *pulumi.OutputState }

func (OrgIdpGithubEsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpGithubEs)(nil)).Elem()
}

func (o OrgIdpGithubEsArrayOutput) ToOrgIdpGithubEsArrayOutput() OrgIdpGithubEsArrayOutput {
	return o
}

func (o OrgIdpGithubEsArrayOutput) ToOrgIdpGithubEsArrayOutputWithContext(ctx context.Context) OrgIdpGithubEsArrayOutput {
	return o
}

func (o OrgIdpGithubEsArrayOutput) Index(i pulumi.IntInput) OrgIdpGithubEsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgIdpGithubEs {
		return vs[0].([]*OrgIdpGithubEs)[vs[1].(int)]
	}).(OrgIdpGithubEsOutput)
}

type OrgIdpGithubEsMapOutput struct{ *pulumi.OutputState }

func (OrgIdpGithubEsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpGithubEs)(nil)).Elem()
}

func (o OrgIdpGithubEsMapOutput) ToOrgIdpGithubEsMapOutput() OrgIdpGithubEsMapOutput {
	return o
}

func (o OrgIdpGithubEsMapOutput) ToOrgIdpGithubEsMapOutputWithContext(ctx context.Context) OrgIdpGithubEsMapOutput {
	return o
}

func (o OrgIdpGithubEsMapOutput) MapIndex(k pulumi.StringInput) OrgIdpGithubEsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgIdpGithubEs {
		return vs[0].(map[string]*OrgIdpGithubEs)[vs[1].(string)]
	}).(OrgIdpGithubEsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpGithubEsInput)(nil)).Elem(), &OrgIdpGithubEs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpGithubEsArrayInput)(nil)).Elem(), OrgIdpGithubEsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpGithubEsMapInput)(nil)).Elem(), OrgIdpGithubEsMap{})
	pulumi.RegisterOutputType(OrgIdpGithubEsOutput{})
	pulumi.RegisterOutputType(OrgIdpGithubEsArrayOutput{})
	pulumi.RegisterOutputType(OrgIdpGithubEsMapOutput{})
}
