// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.NewOrgMetadata(ctx, "default", &zitadel.OrgMetadataArgs{
//				OrgId: pulumi.Any(data.Zitadel_org.Default.Id),
//				Key:   pulumi.String("a_key"),
//				Value: pulumi.String("a_value"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// bash The resource can be imported using the ID format `<key[:org_id]>`, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/orgMetadata:OrgMetadata imported 'a_key:123456789012345678'
//
// ```
type OrgMetadata struct {
	pulumi.CustomResourceState

	// The key of a metadata entry
	Key pulumi.StringOutput `pulumi:"key"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewOrgMetadata registers a new resource with the given unique name, arguments, and options.
func NewOrgMetadata(ctx *pulumi.Context,
	name string, args *OrgMetadataArgs, opts ...pulumi.ResourceOption) (*OrgMetadata, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OrgMetadata
	err := ctx.RegisterResource("zitadel:index/orgMetadata:OrgMetadata", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgMetadata gets an existing OrgMetadata resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgMetadata(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgMetadataState, opts ...pulumi.ResourceOption) (*OrgMetadata, error) {
	var resource OrgMetadata
	err := ctx.ReadResource("zitadel:index/orgMetadata:OrgMetadata", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgMetadata resources.
type orgMetadataState struct {
	// The key of a metadata entry
	Key *string `pulumi:"key"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value *string `pulumi:"value"`
}

type OrgMetadataState struct {
	// The key of a metadata entry
	Key pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value pulumi.StringPtrInput
}

func (OrgMetadataState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgMetadataState)(nil)).Elem()
}

type orgMetadataArgs struct {
	// The key of a metadata entry
	Key string `pulumi:"key"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a OrgMetadata resource.
type OrgMetadataArgs struct {
	// The key of a metadata entry
	Key pulumi.StringInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// The string representation of a metadata entry value. For binary data, use the base64encode function.
	Value pulumi.StringInput
}

func (OrgMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgMetadataArgs)(nil)).Elem()
}

type OrgMetadataInput interface {
	pulumi.Input

	ToOrgMetadataOutput() OrgMetadataOutput
	ToOrgMetadataOutputWithContext(ctx context.Context) OrgMetadataOutput
}

func (*OrgMetadata) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgMetadata)(nil)).Elem()
}

func (i *OrgMetadata) ToOrgMetadataOutput() OrgMetadataOutput {
	return i.ToOrgMetadataOutputWithContext(context.Background())
}

func (i *OrgMetadata) ToOrgMetadataOutputWithContext(ctx context.Context) OrgMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgMetadataOutput)
}

func (i *OrgMetadata) ToOutput(ctx context.Context) pulumix.Output[*OrgMetadata] {
	return pulumix.Output[*OrgMetadata]{
		OutputState: i.ToOrgMetadataOutputWithContext(ctx).OutputState,
	}
}

// OrgMetadataArrayInput is an input type that accepts OrgMetadataArray and OrgMetadataArrayOutput values.
// You can construct a concrete instance of `OrgMetadataArrayInput` via:
//
//	OrgMetadataArray{ OrgMetadataArgs{...} }
type OrgMetadataArrayInput interface {
	pulumi.Input

	ToOrgMetadataArrayOutput() OrgMetadataArrayOutput
	ToOrgMetadataArrayOutputWithContext(context.Context) OrgMetadataArrayOutput
}

type OrgMetadataArray []OrgMetadataInput

func (OrgMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgMetadata)(nil)).Elem()
}

func (i OrgMetadataArray) ToOrgMetadataArrayOutput() OrgMetadataArrayOutput {
	return i.ToOrgMetadataArrayOutputWithContext(context.Background())
}

func (i OrgMetadataArray) ToOrgMetadataArrayOutputWithContext(ctx context.Context) OrgMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgMetadataArrayOutput)
}

func (i OrgMetadataArray) ToOutput(ctx context.Context) pulumix.Output[[]*OrgMetadata] {
	return pulumix.Output[[]*OrgMetadata]{
		OutputState: i.ToOrgMetadataArrayOutputWithContext(ctx).OutputState,
	}
}

// OrgMetadataMapInput is an input type that accepts OrgMetadataMap and OrgMetadataMapOutput values.
// You can construct a concrete instance of `OrgMetadataMapInput` via:
//
//	OrgMetadataMap{ "key": OrgMetadataArgs{...} }
type OrgMetadataMapInput interface {
	pulumi.Input

	ToOrgMetadataMapOutput() OrgMetadataMapOutput
	ToOrgMetadataMapOutputWithContext(context.Context) OrgMetadataMapOutput
}

type OrgMetadataMap map[string]OrgMetadataInput

func (OrgMetadataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgMetadata)(nil)).Elem()
}

func (i OrgMetadataMap) ToOrgMetadataMapOutput() OrgMetadataMapOutput {
	return i.ToOrgMetadataMapOutputWithContext(context.Background())
}

func (i OrgMetadataMap) ToOrgMetadataMapOutputWithContext(ctx context.Context) OrgMetadataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgMetadataMapOutput)
}

func (i OrgMetadataMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgMetadata] {
	return pulumix.Output[map[string]*OrgMetadata]{
		OutputState: i.ToOrgMetadataMapOutputWithContext(ctx).OutputState,
	}
}

type OrgMetadataOutput struct{ *pulumi.OutputState }

func (OrgMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgMetadata)(nil)).Elem()
}

func (o OrgMetadataOutput) ToOrgMetadataOutput() OrgMetadataOutput {
	return o
}

func (o OrgMetadataOutput) ToOrgMetadataOutputWithContext(ctx context.Context) OrgMetadataOutput {
	return o
}

func (o OrgMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[*OrgMetadata] {
	return pulumix.Output[*OrgMetadata]{
		OutputState: o.OutputState,
	}
}

// The key of a metadata entry
func (o OrgMetadataOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgMetadata) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// ID of the organization
func (o OrgMetadataOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgMetadata) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// The string representation of a metadata entry value. For binary data, use the base64encode function.
func (o OrgMetadataOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgMetadata) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type OrgMetadataArrayOutput struct{ *pulumi.OutputState }

func (OrgMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgMetadata)(nil)).Elem()
}

func (o OrgMetadataArrayOutput) ToOrgMetadataArrayOutput() OrgMetadataArrayOutput {
	return o
}

func (o OrgMetadataArrayOutput) ToOrgMetadataArrayOutputWithContext(ctx context.Context) OrgMetadataArrayOutput {
	return o
}

func (o OrgMetadataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OrgMetadata] {
	return pulumix.Output[[]*OrgMetadata]{
		OutputState: o.OutputState,
	}
}

func (o OrgMetadataArrayOutput) Index(i pulumi.IntInput) OrgMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgMetadata {
		return vs[0].([]*OrgMetadata)[vs[1].(int)]
	}).(OrgMetadataOutput)
}

type OrgMetadataMapOutput struct{ *pulumi.OutputState }

func (OrgMetadataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgMetadata)(nil)).Elem()
}

func (o OrgMetadataMapOutput) ToOrgMetadataMapOutput() OrgMetadataMapOutput {
	return o
}

func (o OrgMetadataMapOutput) ToOrgMetadataMapOutputWithContext(ctx context.Context) OrgMetadataMapOutput {
	return o
}

func (o OrgMetadataMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OrgMetadata] {
	return pulumix.Output[map[string]*OrgMetadata]{
		OutputState: o.OutputState,
	}
}

func (o OrgMetadataMapOutput) MapIndex(k pulumi.StringInput) OrgMetadataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgMetadata {
		return vs[0].(map[string]*OrgMetadata)[vs[1].(string)]
	}).(OrgMetadataOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgMetadataInput)(nil)).Elem(), &OrgMetadata{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgMetadataArrayInput)(nil)).Elem(), OrgMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgMetadataMapInput)(nil)).Elem(), OrgMetadataMap{})
	pulumi.RegisterOutputType(OrgMetadataOutput{})
	pulumi.RegisterOutputType(OrgMetadataArrayOutput{})
	pulumi.RegisterOutputType(OrgMetadataMapOutput{})
}
