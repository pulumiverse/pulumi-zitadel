// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource representing an Azure AD IdP on the organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := zitadel.NewOrgIdpAzureAd(ctx, "default", &zitadel.OrgIdpAzureAdArgs{
// 			OrgId:        pulumi.Any(data.Zitadel_org.Default.Id),
// 			ClientId:     pulumi.String("9065bfc8-a08a..."),
// 			ClientSecret: pulumi.String("H2n***"),
// 			Scopes: pulumi.StringArray{
// 				pulumi.String("openid"),
// 				pulumi.String("profile"),
// 				pulumi.String("email"),
// 				pulumi.String("User.Read"),
// 			},
// 			TenantType:        pulumi.String("AZURE_AD_TENANT_TYPE_ORGANISATIONS"),
// 			EmailVerified:     pulumi.Bool(true),
// 			IsLinkingAllowed:  pulumi.Bool(false),
// 			IsCreationAllowed: pulumi.Bool(true),
// 			IsAutoCreation:    pulumi.Bool(false),
// 			IsAutoUpdate:      pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// terraform # The resource can be imported using the ID format `<id[:org_id][:client_secret]>`, e.g.
//
// ```sh
//  $ pulumi import zitadel:index/orgIdpAzureAd:OrgIdpAzureAd imported '123456789012345678:123456789012345678:12345678-1234-1234-1234-123456789012'
// ```
type OrgIdpAzureAd struct {
	pulumi.CustomResourceState

	// client id generated by the identity provider
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// automatically mark emails as verified
	EmailVerified pulumi.BoolOutput `pulumi:"emailVerified"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolOutput `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolOutput `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolOutput `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolOutput `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the organization
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// if tenant*id is not set, the tenant*type is used
	TenantId pulumi.StringPtrOutput `pulumi:"tenantId"`
	// the azure ad tenant type
	TenantType pulumi.StringPtrOutput `pulumi:"tenantType"`
}

// NewOrgIdpAzureAd registers a new resource with the given unique name, arguments, and options.
func NewOrgIdpAzureAd(ctx *pulumi.Context,
	name string, args *OrgIdpAzureAdArgs, opts ...pulumi.ResourceOption) (*OrgIdpAzureAd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.EmailVerified == nil {
		return nil, errors.New("invalid value for required argument 'EmailVerified'")
	}
	if args.IsAutoCreation == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoCreation'")
	}
	if args.IsAutoUpdate == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoUpdate'")
	}
	if args.IsCreationAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsCreationAllowed'")
	}
	if args.IsLinkingAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsLinkingAllowed'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource OrgIdpAzureAd
	err := ctx.RegisterResource("zitadel:index/orgIdpAzureAd:OrgIdpAzureAd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrgIdpAzureAd gets an existing OrgIdpAzureAd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrgIdpAzureAd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrgIdpAzureAdState, opts ...pulumi.ResourceOption) (*OrgIdpAzureAd, error) {
	var resource OrgIdpAzureAd
	err := ctx.ReadResource("zitadel:index/orgIdpAzureAd:OrgIdpAzureAd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrgIdpAzureAd resources.
type orgIdpAzureAdState struct {
	// client id generated by the identity provider
	ClientId *string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret *string `pulumi:"clientSecret"`
	// automatically mark emails as verified
	EmailVerified *bool `pulumi:"emailVerified"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
	// if tenant*id is not set, the tenant*type is used
	TenantId *string `pulumi:"tenantId"`
	// the azure ad tenant type
	TenantType *string `pulumi:"tenantType"`
}

type OrgIdpAzureAdState struct {
	// client id generated by the identity provider
	ClientId pulumi.StringPtrInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringPtrInput
	// automatically mark emails as verified
	EmailVerified pulumi.BoolPtrInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolPtrInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolPtrInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolPtrInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolPtrInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
	// if tenant*id is not set, the tenant*type is used
	TenantId pulumi.StringPtrInput
	// the azure ad tenant type
	TenantType pulumi.StringPtrInput
}

func (OrgIdpAzureAdState) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpAzureAdState)(nil)).Elem()
}

type orgIdpAzureAdArgs struct {
	// client id generated by the identity provider
	ClientId string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret string `pulumi:"clientSecret"`
	// automatically mark emails as verified
	EmailVerified bool `pulumi:"emailVerified"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed bool `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// ID of the organization
	OrgId *string `pulumi:"orgId"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
	// if tenant*id is not set, the tenant*type is used
	TenantId *string `pulumi:"tenantId"`
	// the azure ad tenant type
	TenantType *string `pulumi:"tenantType"`
}

// The set of arguments for constructing a OrgIdpAzureAd resource.
type OrgIdpAzureAdArgs struct {
	// client id generated by the identity provider
	ClientId pulumi.StringInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringInput
	// automatically mark emails as verified
	EmailVerified pulumi.BoolInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// ID of the organization
	OrgId pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
	// if tenant*id is not set, the tenant*type is used
	TenantId pulumi.StringPtrInput
	// the azure ad tenant type
	TenantType pulumi.StringPtrInput
}

func (OrgIdpAzureAdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orgIdpAzureAdArgs)(nil)).Elem()
}

type OrgIdpAzureAdInput interface {
	pulumi.Input

	ToOrgIdpAzureAdOutput() OrgIdpAzureAdOutput
	ToOrgIdpAzureAdOutputWithContext(ctx context.Context) OrgIdpAzureAdOutput
}

func (*OrgIdpAzureAd) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpAzureAd)(nil)).Elem()
}

func (i *OrgIdpAzureAd) ToOrgIdpAzureAdOutput() OrgIdpAzureAdOutput {
	return i.ToOrgIdpAzureAdOutputWithContext(context.Background())
}

func (i *OrgIdpAzureAd) ToOrgIdpAzureAdOutputWithContext(ctx context.Context) OrgIdpAzureAdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpAzureAdOutput)
}

// OrgIdpAzureAdArrayInput is an input type that accepts OrgIdpAzureAdArray and OrgIdpAzureAdArrayOutput values.
// You can construct a concrete instance of `OrgIdpAzureAdArrayInput` via:
//
//          OrgIdpAzureAdArray{ OrgIdpAzureAdArgs{...} }
type OrgIdpAzureAdArrayInput interface {
	pulumi.Input

	ToOrgIdpAzureAdArrayOutput() OrgIdpAzureAdArrayOutput
	ToOrgIdpAzureAdArrayOutputWithContext(context.Context) OrgIdpAzureAdArrayOutput
}

type OrgIdpAzureAdArray []OrgIdpAzureAdInput

func (OrgIdpAzureAdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpAzureAd)(nil)).Elem()
}

func (i OrgIdpAzureAdArray) ToOrgIdpAzureAdArrayOutput() OrgIdpAzureAdArrayOutput {
	return i.ToOrgIdpAzureAdArrayOutputWithContext(context.Background())
}

func (i OrgIdpAzureAdArray) ToOrgIdpAzureAdArrayOutputWithContext(ctx context.Context) OrgIdpAzureAdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpAzureAdArrayOutput)
}

// OrgIdpAzureAdMapInput is an input type that accepts OrgIdpAzureAdMap and OrgIdpAzureAdMapOutput values.
// You can construct a concrete instance of `OrgIdpAzureAdMapInput` via:
//
//          OrgIdpAzureAdMap{ "key": OrgIdpAzureAdArgs{...} }
type OrgIdpAzureAdMapInput interface {
	pulumi.Input

	ToOrgIdpAzureAdMapOutput() OrgIdpAzureAdMapOutput
	ToOrgIdpAzureAdMapOutputWithContext(context.Context) OrgIdpAzureAdMapOutput
}

type OrgIdpAzureAdMap map[string]OrgIdpAzureAdInput

func (OrgIdpAzureAdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpAzureAd)(nil)).Elem()
}

func (i OrgIdpAzureAdMap) ToOrgIdpAzureAdMapOutput() OrgIdpAzureAdMapOutput {
	return i.ToOrgIdpAzureAdMapOutputWithContext(context.Background())
}

func (i OrgIdpAzureAdMap) ToOrgIdpAzureAdMapOutputWithContext(ctx context.Context) OrgIdpAzureAdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrgIdpAzureAdMapOutput)
}

type OrgIdpAzureAdOutput struct{ *pulumi.OutputState }

func (OrgIdpAzureAdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrgIdpAzureAd)(nil)).Elem()
}

func (o OrgIdpAzureAdOutput) ToOrgIdpAzureAdOutput() OrgIdpAzureAdOutput {
	return o
}

func (o OrgIdpAzureAdOutput) ToOrgIdpAzureAdOutputWithContext(ctx context.Context) OrgIdpAzureAdOutput {
	return o
}

// client id generated by the identity provider
func (o OrgIdpAzureAdOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// client secret generated by the identity provider
func (o OrgIdpAzureAdOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// automatically mark emails as verified
func (o OrgIdpAzureAdOutput) EmailVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.BoolOutput { return v.EmailVerified }).(pulumi.BoolOutput)
}

// enable if a new account in ZITADEL should be created automatically on login with an external account
func (o OrgIdpAzureAdOutput) IsAutoCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.BoolOutput { return v.IsAutoCreation }).(pulumi.BoolOutput)
}

// enable if a the ZITADEL account fields should be updated automatically on each login
func (o OrgIdpAzureAdOutput) IsAutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.BoolOutput { return v.IsAutoUpdate }).(pulumi.BoolOutput)
}

// enable if users should be able to create a new account in ZITADEL when using an external account
func (o OrgIdpAzureAdOutput) IsCreationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.BoolOutput { return v.IsCreationAllowed }).(pulumi.BoolOutput)
}

// enable if users should be able to link an existing ZITADEL user with an external account
func (o OrgIdpAzureAdOutput) IsLinkingAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.BoolOutput { return v.IsLinkingAllowed }).(pulumi.BoolOutput)
}

// Name of the IDP
func (o OrgIdpAzureAdOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the organization
func (o OrgIdpAzureAdOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// the scopes requested by ZITADEL during the request on the identity provider
func (o OrgIdpAzureAdOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// if tenant*id is not set, the tenant*type is used
func (o OrgIdpAzureAdOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.StringPtrOutput { return v.TenantId }).(pulumi.StringPtrOutput)
}

// the azure ad tenant type
func (o OrgIdpAzureAdOutput) TenantType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrgIdpAzureAd) pulumi.StringPtrOutput { return v.TenantType }).(pulumi.StringPtrOutput)
}

type OrgIdpAzureAdArrayOutput struct{ *pulumi.OutputState }

func (OrgIdpAzureAdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrgIdpAzureAd)(nil)).Elem()
}

func (o OrgIdpAzureAdArrayOutput) ToOrgIdpAzureAdArrayOutput() OrgIdpAzureAdArrayOutput {
	return o
}

func (o OrgIdpAzureAdArrayOutput) ToOrgIdpAzureAdArrayOutputWithContext(ctx context.Context) OrgIdpAzureAdArrayOutput {
	return o
}

func (o OrgIdpAzureAdArrayOutput) Index(i pulumi.IntInput) OrgIdpAzureAdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrgIdpAzureAd {
		return vs[0].([]*OrgIdpAzureAd)[vs[1].(int)]
	}).(OrgIdpAzureAdOutput)
}

type OrgIdpAzureAdMapOutput struct{ *pulumi.OutputState }

func (OrgIdpAzureAdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrgIdpAzureAd)(nil)).Elem()
}

func (o OrgIdpAzureAdMapOutput) ToOrgIdpAzureAdMapOutput() OrgIdpAzureAdMapOutput {
	return o
}

func (o OrgIdpAzureAdMapOutput) ToOrgIdpAzureAdMapOutputWithContext(ctx context.Context) OrgIdpAzureAdMapOutput {
	return o
}

func (o OrgIdpAzureAdMapOutput) MapIndex(k pulumi.StringInput) OrgIdpAzureAdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrgIdpAzureAd {
		return vs[0].(map[string]*OrgIdpAzureAd)[vs[1].(string)]
	}).(OrgIdpAzureAdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpAzureAdInput)(nil)).Elem(), &OrgIdpAzureAd{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpAzureAdArrayInput)(nil)).Elem(), OrgIdpAzureAdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrgIdpAzureAdMapInput)(nil)).Elem(), OrgIdpAzureAdMap{})
	pulumi.RegisterOutputType(OrgIdpAzureAdOutput{})
	pulumi.RegisterOutputType(OrgIdpAzureAdArrayOutput{})
	pulumi.RegisterOutputType(OrgIdpAzureAdMapOutput{})
}
