// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel/internal"
)

// Resource representing a generic OAuth2 IDP on the instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zitadel.NewIdpOauth(ctx, "default", &zitadel.IdpOauthArgs{
//				AuthorizationEndpoint: pulumi.String("https://accounts.google.com/o/oauth2/v2/auth"),
//				ClientId:              pulumi.String("15765e..."),
//				ClientSecret:          pulumi.String("*****abcxyz"),
//				IdAttribute:           pulumi.String("user_id"),
//				IsAutoCreation:        pulumi.Bool(false),
//				IsAutoUpdate:          pulumi.Bool(true),
//				IsCreationAllowed:     pulumi.Bool(true),
//				IsLinkingAllowed:      pulumi.Bool(false),
//				Scopes: pulumi.StringArray{
//					pulumi.String("openid"),
//					pulumi.String("profile"),
//					pulumi.String("email"),
//				},
//				TokenEndpoint: pulumi.String("https://oauth2.googleapis.com/token"),
//				UserEndpoint:  pulumi.String("https://openidconnect.googleapis.com/v1/userinfo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// bash The resource can be imported using the ID format `<id[:client_secret]>`, e.g.
//
// ```sh
//
//	$ pulumi import zitadel:index/idpOauth:IdpOauth imported '123456789012345678:1234567890abcdef'
//
// ```
type IdpOauth struct {
	pulumi.CustomResourceState

	// The authorization endpoint
	AuthorizationEndpoint pulumi.StringOutput `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId pulumi.StringOutput `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`
	// The id attribute
	IdAttribute pulumi.StringOutput `pulumi:"idAttribute"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolOutput `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolOutput `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolOutput `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolOutput `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name pulumi.StringOutput `pulumi:"name"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayOutput `pulumi:"scopes"`
	// The token endpoint
	TokenEndpoint pulumi.StringOutput `pulumi:"tokenEndpoint"`
	// The user endpoint
	UserEndpoint pulumi.StringOutput `pulumi:"userEndpoint"`
}

// NewIdpOauth registers a new resource with the given unique name, arguments, and options.
func NewIdpOauth(ctx *pulumi.Context,
	name string, args *IdpOauthArgs, opts ...pulumi.ResourceOption) (*IdpOauth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizationEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationEndpoint'")
	}
	if args.ClientId == nil {
		return nil, errors.New("invalid value for required argument 'ClientId'")
	}
	if args.ClientSecret == nil {
		return nil, errors.New("invalid value for required argument 'ClientSecret'")
	}
	if args.IdAttribute == nil {
		return nil, errors.New("invalid value for required argument 'IdAttribute'")
	}
	if args.IsAutoCreation == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoCreation'")
	}
	if args.IsAutoUpdate == nil {
		return nil, errors.New("invalid value for required argument 'IsAutoUpdate'")
	}
	if args.IsCreationAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsCreationAllowed'")
	}
	if args.IsLinkingAllowed == nil {
		return nil, errors.New("invalid value for required argument 'IsLinkingAllowed'")
	}
	if args.TokenEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'TokenEndpoint'")
	}
	if args.UserEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'UserEndpoint'")
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"clientSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdpOauth
	err := ctx.RegisterResource("zitadel:index/idpOauth:IdpOauth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdpOauth gets an existing IdpOauth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdpOauth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdpOauthState, opts ...pulumi.ResourceOption) (*IdpOauth, error) {
	var resource IdpOauth
	err := ctx.ReadResource("zitadel:index/idpOauth:IdpOauth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdpOauth resources.
type idpOauthState struct {
	// The authorization endpoint
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId *string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret *string `pulumi:"clientSecret"`
	// The id attribute
	IdAttribute *string `pulumi:"idAttribute"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation *bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate *bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed *bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed *bool `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
	// The token endpoint
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The user endpoint
	UserEndpoint *string `pulumi:"userEndpoint"`
}

type IdpOauthState struct {
	// The authorization endpoint
	AuthorizationEndpoint pulumi.StringPtrInput
	// client id generated by the identity provider
	ClientId pulumi.StringPtrInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringPtrInput
	// The id attribute
	IdAttribute pulumi.StringPtrInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolPtrInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolPtrInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolPtrInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolPtrInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
	// The token endpoint
	TokenEndpoint pulumi.StringPtrInput
	// The user endpoint
	UserEndpoint pulumi.StringPtrInput
}

func (IdpOauthState) ElementType() reflect.Type {
	return reflect.TypeOf((*idpOauthState)(nil)).Elem()
}

type idpOauthArgs struct {
	// The authorization endpoint
	AuthorizationEndpoint string `pulumi:"authorizationEndpoint"`
	// client id generated by the identity provider
	ClientId string `pulumi:"clientId"`
	// client secret generated by the identity provider
	ClientSecret string `pulumi:"clientSecret"`
	// The id attribute
	IdAttribute string `pulumi:"idAttribute"`
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation bool `pulumi:"isAutoCreation"`
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate bool `pulumi:"isAutoUpdate"`
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed bool `pulumi:"isCreationAllowed"`
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed bool `pulumi:"isLinkingAllowed"`
	// Name of the IDP
	Name *string `pulumi:"name"`
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes []string `pulumi:"scopes"`
	// The token endpoint
	TokenEndpoint string `pulumi:"tokenEndpoint"`
	// The user endpoint
	UserEndpoint string `pulumi:"userEndpoint"`
}

// The set of arguments for constructing a IdpOauth resource.
type IdpOauthArgs struct {
	// The authorization endpoint
	AuthorizationEndpoint pulumi.StringInput
	// client id generated by the identity provider
	ClientId pulumi.StringInput
	// client secret generated by the identity provider
	ClientSecret pulumi.StringInput
	// The id attribute
	IdAttribute pulumi.StringInput
	// enable if a new account in ZITADEL should be created automatically on login with an external account
	IsAutoCreation pulumi.BoolInput
	// enable if a the ZITADEL account fields should be updated automatically on each login
	IsAutoUpdate pulumi.BoolInput
	// enable if users should be able to create a new account in ZITADEL when using an external account
	IsCreationAllowed pulumi.BoolInput
	// enable if users should be able to link an existing ZITADEL user with an external account
	IsLinkingAllowed pulumi.BoolInput
	// Name of the IDP
	Name pulumi.StringPtrInput
	// the scopes requested by ZITADEL during the request on the identity provider
	Scopes pulumi.StringArrayInput
	// The token endpoint
	TokenEndpoint pulumi.StringInput
	// The user endpoint
	UserEndpoint pulumi.StringInput
}

func (IdpOauthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*idpOauthArgs)(nil)).Elem()
}

type IdpOauthInput interface {
	pulumi.Input

	ToIdpOauthOutput() IdpOauthOutput
	ToIdpOauthOutputWithContext(ctx context.Context) IdpOauthOutput
}

func (*IdpOauth) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpOauth)(nil)).Elem()
}

func (i *IdpOauth) ToIdpOauthOutput() IdpOauthOutput {
	return i.ToIdpOauthOutputWithContext(context.Background())
}

func (i *IdpOauth) ToIdpOauthOutputWithContext(ctx context.Context) IdpOauthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpOauthOutput)
}

func (i *IdpOauth) ToOutput(ctx context.Context) pulumix.Output[*IdpOauth] {
	return pulumix.Output[*IdpOauth]{
		OutputState: i.ToIdpOauthOutputWithContext(ctx).OutputState,
	}
}

// IdpOauthArrayInput is an input type that accepts IdpOauthArray and IdpOauthArrayOutput values.
// You can construct a concrete instance of `IdpOauthArrayInput` via:
//
//	IdpOauthArray{ IdpOauthArgs{...} }
type IdpOauthArrayInput interface {
	pulumi.Input

	ToIdpOauthArrayOutput() IdpOauthArrayOutput
	ToIdpOauthArrayOutputWithContext(context.Context) IdpOauthArrayOutput
}

type IdpOauthArray []IdpOauthInput

func (IdpOauthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdpOauth)(nil)).Elem()
}

func (i IdpOauthArray) ToIdpOauthArrayOutput() IdpOauthArrayOutput {
	return i.ToIdpOauthArrayOutputWithContext(context.Background())
}

func (i IdpOauthArray) ToIdpOauthArrayOutputWithContext(ctx context.Context) IdpOauthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpOauthArrayOutput)
}

func (i IdpOauthArray) ToOutput(ctx context.Context) pulumix.Output[[]*IdpOauth] {
	return pulumix.Output[[]*IdpOauth]{
		OutputState: i.ToIdpOauthArrayOutputWithContext(ctx).OutputState,
	}
}

// IdpOauthMapInput is an input type that accepts IdpOauthMap and IdpOauthMapOutput values.
// You can construct a concrete instance of `IdpOauthMapInput` via:
//
//	IdpOauthMap{ "key": IdpOauthArgs{...} }
type IdpOauthMapInput interface {
	pulumi.Input

	ToIdpOauthMapOutput() IdpOauthMapOutput
	ToIdpOauthMapOutputWithContext(context.Context) IdpOauthMapOutput
}

type IdpOauthMap map[string]IdpOauthInput

func (IdpOauthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdpOauth)(nil)).Elem()
}

func (i IdpOauthMap) ToIdpOauthMapOutput() IdpOauthMapOutput {
	return i.ToIdpOauthMapOutputWithContext(context.Background())
}

func (i IdpOauthMap) ToIdpOauthMapOutputWithContext(ctx context.Context) IdpOauthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdpOauthMapOutput)
}

func (i IdpOauthMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*IdpOauth] {
	return pulumix.Output[map[string]*IdpOauth]{
		OutputState: i.ToIdpOauthMapOutputWithContext(ctx).OutputState,
	}
}

type IdpOauthOutput struct{ *pulumi.OutputState }

func (IdpOauthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdpOauth)(nil)).Elem()
}

func (o IdpOauthOutput) ToIdpOauthOutput() IdpOauthOutput {
	return o
}

func (o IdpOauthOutput) ToIdpOauthOutputWithContext(ctx context.Context) IdpOauthOutput {
	return o
}

func (o IdpOauthOutput) ToOutput(ctx context.Context) pulumix.Output[*IdpOauth] {
	return pulumix.Output[*IdpOauth]{
		OutputState: o.OutputState,
	}
}

// The authorization endpoint
func (o IdpOauthOutput) AuthorizationEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.StringOutput { return v.AuthorizationEndpoint }).(pulumi.StringOutput)
}

// client id generated by the identity provider
func (o IdpOauthOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.StringOutput { return v.ClientId }).(pulumi.StringOutput)
}

// client secret generated by the identity provider
func (o IdpOauthOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.StringOutput { return v.ClientSecret }).(pulumi.StringOutput)
}

// The id attribute
func (o IdpOauthOutput) IdAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.StringOutput { return v.IdAttribute }).(pulumi.StringOutput)
}

// enable if a new account in ZITADEL should be created automatically on login with an external account
func (o IdpOauthOutput) IsAutoCreation() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.BoolOutput { return v.IsAutoCreation }).(pulumi.BoolOutput)
}

// enable if a the ZITADEL account fields should be updated automatically on each login
func (o IdpOauthOutput) IsAutoUpdate() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.BoolOutput { return v.IsAutoUpdate }).(pulumi.BoolOutput)
}

// enable if users should be able to create a new account in ZITADEL when using an external account
func (o IdpOauthOutput) IsCreationAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.BoolOutput { return v.IsCreationAllowed }).(pulumi.BoolOutput)
}

// enable if users should be able to link an existing ZITADEL user with an external account
func (o IdpOauthOutput) IsLinkingAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.BoolOutput { return v.IsLinkingAllowed }).(pulumi.BoolOutput)
}

// Name of the IDP
func (o IdpOauthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// the scopes requested by ZITADEL during the request on the identity provider
func (o IdpOauthOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.StringArrayOutput { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The token endpoint
func (o IdpOauthOutput) TokenEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.StringOutput { return v.TokenEndpoint }).(pulumi.StringOutput)
}

// The user endpoint
func (o IdpOauthOutput) UserEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *IdpOauth) pulumi.StringOutput { return v.UserEndpoint }).(pulumi.StringOutput)
}

type IdpOauthArrayOutput struct{ *pulumi.OutputState }

func (IdpOauthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdpOauth)(nil)).Elem()
}

func (o IdpOauthArrayOutput) ToIdpOauthArrayOutput() IdpOauthArrayOutput {
	return o
}

func (o IdpOauthArrayOutput) ToIdpOauthArrayOutputWithContext(ctx context.Context) IdpOauthArrayOutput {
	return o
}

func (o IdpOauthArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*IdpOauth] {
	return pulumix.Output[[]*IdpOauth]{
		OutputState: o.OutputState,
	}
}

func (o IdpOauthArrayOutput) Index(i pulumi.IntInput) IdpOauthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdpOauth {
		return vs[0].([]*IdpOauth)[vs[1].(int)]
	}).(IdpOauthOutput)
}

type IdpOauthMapOutput struct{ *pulumi.OutputState }

func (IdpOauthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdpOauth)(nil)).Elem()
}

func (o IdpOauthMapOutput) ToIdpOauthMapOutput() IdpOauthMapOutput {
	return o
}

func (o IdpOauthMapOutput) ToIdpOauthMapOutputWithContext(ctx context.Context) IdpOauthMapOutput {
	return o
}

func (o IdpOauthMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*IdpOauth] {
	return pulumix.Output[map[string]*IdpOauth]{
		OutputState: o.OutputState,
	}
}

func (o IdpOauthMapOutput) MapIndex(k pulumi.StringInput) IdpOauthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdpOauth {
		return vs[0].(map[string]*IdpOauth)[vs[1].(string)]
	}).(IdpOauthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdpOauthInput)(nil)).Elem(), &IdpOauth{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpOauthArrayInput)(nil)).Elem(), IdpOauthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdpOauthMapInput)(nil)).Elem(), IdpOauthMap{})
	pulumi.RegisterOutputType(IdpOauthOutput{})
	pulumi.RegisterOutputType(IdpOauthArrayOutput{})
	pulumi.RegisterOutputType(IdpOauthMapOutput{})
}
