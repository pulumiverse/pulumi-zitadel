// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zitadel

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "zitadel:index/action:Action":
		r = &Action{}
	case "zitadel:index/applicationApi:ApplicationApi":
		r = &ApplicationApi{}
	case "zitadel:index/applicationKey:ApplicationKey":
		r = &ApplicationKey{}
	case "zitadel:index/applicationOidc:ApplicationOidc":
		r = &ApplicationOidc{}
	case "zitadel:index/applicationSaml:ApplicationSaml":
		r = &ApplicationSaml{}
	case "zitadel:index/defaultDomainPolicy:DefaultDomainPolicy":
		r = &DefaultDomainPolicy{}
	case "zitadel:index/defaultLabelPolicy:DefaultLabelPolicy":
		r = &DefaultLabelPolicy{}
	case "zitadel:index/defaultLockoutPolicy:DefaultLockoutPolicy":
		r = &DefaultLockoutPolicy{}
	case "zitadel:index/defaultLoginPolicy:DefaultLoginPolicy":
		r = &DefaultLoginPolicy{}
	case "zitadel:index/defaultNotificationPolicy:DefaultNotificationPolicy":
		r = &DefaultNotificationPolicy{}
	case "zitadel:index/defaultOidcSettings:DefaultOidcSettings":
		r = &DefaultOidcSettings{}
	case "zitadel:index/defaultPasswordComplexityPolicy:DefaultPasswordComplexityPolicy":
		r = &DefaultPasswordComplexityPolicy{}
	case "zitadel:index/defaultPrivacyPolicy:DefaultPrivacyPolicy":
		r = &DefaultPrivacyPolicy{}
	case "zitadel:index/domain:Domain":
		r = &Domain{}
	case "zitadel:index/domainPolicy:DomainPolicy":
		r = &DomainPolicy{}
	case "zitadel:index/humanUser:HumanUser":
		r = &HumanUser{}
	case "zitadel:index/idpAzureAd:IdpAzureAd":
		r = &IdpAzureAd{}
	case "zitadel:index/idpGithub:IdpGithub":
		r = &IdpGithub{}
	case "zitadel:index/idpGithubEs:IdpGithubEs":
		r = &IdpGithubEs{}
	case "zitadel:index/idpGitlab:IdpGitlab":
		r = &IdpGitlab{}
	case "zitadel:index/idpGitlabSelfHosted:IdpGitlabSelfHosted":
		r = &IdpGitlabSelfHosted{}
	case "zitadel:index/idpGoogle:IdpGoogle":
		r = &IdpGoogle{}
	case "zitadel:index/idpLdap:IdpLdap":
		r = &IdpLdap{}
	case "zitadel:index/instanceMember:InstanceMember":
		r = &InstanceMember{}
	case "zitadel:index/labelPolicy:LabelPolicy":
		r = &LabelPolicy{}
	case "zitadel:index/lockoutPolicy:LockoutPolicy":
		r = &LockoutPolicy{}
	case "zitadel:index/loginPolicy:LoginPolicy":
		r = &LoginPolicy{}
	case "zitadel:index/machineKey:MachineKey":
		r = &MachineKey{}
	case "zitadel:index/machineUser:MachineUser":
		r = &MachineUser{}
	case "zitadel:index/notificationPolicy:NotificationPolicy":
		r = &NotificationPolicy{}
	case "zitadel:index/org:Org":
		r = &Org{}
	case "zitadel:index/orgIdpAzureAd:OrgIdpAzureAd":
		r = &OrgIdpAzureAd{}
	case "zitadel:index/orgIdpGithub:OrgIdpGithub":
		r = &OrgIdpGithub{}
	case "zitadel:index/orgIdpGithubEs:OrgIdpGithubEs":
		r = &OrgIdpGithubEs{}
	case "zitadel:index/orgIdpGitlab:OrgIdpGitlab":
		r = &OrgIdpGitlab{}
	case "zitadel:index/orgIdpGitlabSelfHosted:OrgIdpGitlabSelfHosted":
		r = &OrgIdpGitlabSelfHosted{}
	case "zitadel:index/orgIdpGoogle:OrgIdpGoogle":
		r = &OrgIdpGoogle{}
	case "zitadel:index/orgIdpJwt:OrgIdpJwt":
		r = &OrgIdpJwt{}
	case "zitadel:index/orgIdpLdap:OrgIdpLdap":
		r = &OrgIdpLdap{}
	case "zitadel:index/orgIdpOidc:OrgIdpOidc":
		r = &OrgIdpOidc{}
	case "zitadel:index/orgMember:OrgMember":
		r = &OrgMember{}
	case "zitadel:index/passwordComplexityPolicy:PasswordComplexityPolicy":
		r = &PasswordComplexityPolicy{}
	case "zitadel:index/personalAccessToken:PersonalAccessToken":
		r = &PersonalAccessToken{}
	case "zitadel:index/privacyPolicy:PrivacyPolicy":
		r = &PrivacyPolicy{}
	case "zitadel:index/project:Project":
		r = &Project{}
	case "zitadel:index/projectGrant:ProjectGrant":
		r = &ProjectGrant{}
	case "zitadel:index/projectGrantMember:ProjectGrantMember":
		r = &ProjectGrantMember{}
	case "zitadel:index/projectMember:ProjectMember":
		r = &ProjectMember{}
	case "zitadel:index/projectRole:ProjectRole":
		r = &ProjectRole{}
	case "zitadel:index/smsProviderTwilio:SmsProviderTwilio":
		r = &SmsProviderTwilio{}
	case "zitadel:index/smtpConfig:SmtpConfig":
		r = &SmtpConfig{}
	case "zitadel:index/triggerActions:TriggerActions":
		r = &TriggerActions{}
	case "zitadel:index/userGrant:UserGrant":
		r = &UserGrant{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:zitadel" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/action",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/applicationApi",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/applicationKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/applicationOidc",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/applicationSaml",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/defaultDomainPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/defaultLabelPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/defaultLockoutPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/defaultLoginPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/defaultNotificationPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/defaultOidcSettings",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/defaultPasswordComplexityPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/defaultPrivacyPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/domain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/domainPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/humanUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/idpAzureAd",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/idpGithub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/idpGithubEs",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/idpGitlab",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/idpGitlabSelfHosted",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/idpGoogle",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/idpLdap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/instanceMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/labelPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/lockoutPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/loginPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/machineKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/machineUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/notificationPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/org",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpAzureAd",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpGithub",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpGithubEs",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpGitlab",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpGitlabSelfHosted",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpGoogle",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpJwt",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpLdap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgIdpOidc",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/orgMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/passwordComplexityPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/personalAccessToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/privacyPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/projectGrant",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/projectGrantMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/projectMember",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/projectRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/smsProviderTwilio",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/smtpConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/triggerActions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zitadel",
		"index/userGrant",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"zitadel",
		&pkg{version},
	)
}
