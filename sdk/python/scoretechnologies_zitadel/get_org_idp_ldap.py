# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetOrgIdpLdapResult',
    'AwaitableGetOrgIdpLdapResult',
    'get_org_idp_ldap',
    'get_org_idp_ldap_output',
]

@pulumi.output_type
class GetOrgIdpLdapResult:
    """
    A collection of values returned by getOrgIdpLdap.
    """
    def __init__(__self__, avatar_url_attribute=None, base_dn=None, bind_dn=None, bind_password=None, display_name_attribute=None, email_attribute=None, email_verified_attribute=None, first_name_attribute=None, id=None, id_attribute=None, is_auto_creation=None, is_auto_update=None, is_creation_allowed=None, is_linking_allowed=None, last_name_attribute=None, name=None, nick_name_attribute=None, org_id=None, phone_attribute=None, phone_verified_attribute=None, preferred_language_attribute=None, preferred_username_attribute=None, profile_attribute=None, servers=None, start_tls=None, timeout=None, user_base=None, user_filters=None, user_object_classes=None):
        if avatar_url_attribute and not isinstance(avatar_url_attribute, str):
            raise TypeError("Expected argument 'avatar_url_attribute' to be a str")
        pulumi.set(__self__, "avatar_url_attribute", avatar_url_attribute)
        if base_dn and not isinstance(base_dn, str):
            raise TypeError("Expected argument 'base_dn' to be a str")
        pulumi.set(__self__, "base_dn", base_dn)
        if bind_dn and not isinstance(bind_dn, str):
            raise TypeError("Expected argument 'bind_dn' to be a str")
        pulumi.set(__self__, "bind_dn", bind_dn)
        if bind_password and not isinstance(bind_password, str):
            raise TypeError("Expected argument 'bind_password' to be a str")
        pulumi.set(__self__, "bind_password", bind_password)
        if display_name_attribute and not isinstance(display_name_attribute, str):
            raise TypeError("Expected argument 'display_name_attribute' to be a str")
        pulumi.set(__self__, "display_name_attribute", display_name_attribute)
        if email_attribute and not isinstance(email_attribute, str):
            raise TypeError("Expected argument 'email_attribute' to be a str")
        pulumi.set(__self__, "email_attribute", email_attribute)
        if email_verified_attribute and not isinstance(email_verified_attribute, str):
            raise TypeError("Expected argument 'email_verified_attribute' to be a str")
        pulumi.set(__self__, "email_verified_attribute", email_verified_attribute)
        if first_name_attribute and not isinstance(first_name_attribute, str):
            raise TypeError("Expected argument 'first_name_attribute' to be a str")
        pulumi.set(__self__, "first_name_attribute", first_name_attribute)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_attribute and not isinstance(id_attribute, str):
            raise TypeError("Expected argument 'id_attribute' to be a str")
        pulumi.set(__self__, "id_attribute", id_attribute)
        if is_auto_creation and not isinstance(is_auto_creation, bool):
            raise TypeError("Expected argument 'is_auto_creation' to be a bool")
        pulumi.set(__self__, "is_auto_creation", is_auto_creation)
        if is_auto_update and not isinstance(is_auto_update, bool):
            raise TypeError("Expected argument 'is_auto_update' to be a bool")
        pulumi.set(__self__, "is_auto_update", is_auto_update)
        if is_creation_allowed and not isinstance(is_creation_allowed, bool):
            raise TypeError("Expected argument 'is_creation_allowed' to be a bool")
        pulumi.set(__self__, "is_creation_allowed", is_creation_allowed)
        if is_linking_allowed and not isinstance(is_linking_allowed, bool):
            raise TypeError("Expected argument 'is_linking_allowed' to be a bool")
        pulumi.set(__self__, "is_linking_allowed", is_linking_allowed)
        if last_name_attribute and not isinstance(last_name_attribute, str):
            raise TypeError("Expected argument 'last_name_attribute' to be a str")
        pulumi.set(__self__, "last_name_attribute", last_name_attribute)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nick_name_attribute and not isinstance(nick_name_attribute, str):
            raise TypeError("Expected argument 'nick_name_attribute' to be a str")
        pulumi.set(__self__, "nick_name_attribute", nick_name_attribute)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if phone_attribute and not isinstance(phone_attribute, str):
            raise TypeError("Expected argument 'phone_attribute' to be a str")
        pulumi.set(__self__, "phone_attribute", phone_attribute)
        if phone_verified_attribute and not isinstance(phone_verified_attribute, str):
            raise TypeError("Expected argument 'phone_verified_attribute' to be a str")
        pulumi.set(__self__, "phone_verified_attribute", phone_verified_attribute)
        if preferred_language_attribute and not isinstance(preferred_language_attribute, str):
            raise TypeError("Expected argument 'preferred_language_attribute' to be a str")
        pulumi.set(__self__, "preferred_language_attribute", preferred_language_attribute)
        if preferred_username_attribute and not isinstance(preferred_username_attribute, str):
            raise TypeError("Expected argument 'preferred_username_attribute' to be a str")
        pulumi.set(__self__, "preferred_username_attribute", preferred_username_attribute)
        if profile_attribute and not isinstance(profile_attribute, str):
            raise TypeError("Expected argument 'profile_attribute' to be a str")
        pulumi.set(__self__, "profile_attribute", profile_attribute)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)
        if start_tls and not isinstance(start_tls, bool):
            raise TypeError("Expected argument 'start_tls' to be a bool")
        pulumi.set(__self__, "start_tls", start_tls)
        if timeout and not isinstance(timeout, str):
            raise TypeError("Expected argument 'timeout' to be a str")
        pulumi.set(__self__, "timeout", timeout)
        if user_base and not isinstance(user_base, str):
            raise TypeError("Expected argument 'user_base' to be a str")
        pulumi.set(__self__, "user_base", user_base)
        if user_filters and not isinstance(user_filters, list):
            raise TypeError("Expected argument 'user_filters' to be a list")
        pulumi.set(__self__, "user_filters", user_filters)
        if user_object_classes and not isinstance(user_object_classes, list):
            raise TypeError("Expected argument 'user_object_classes' to be a list")
        pulumi.set(__self__, "user_object_classes", user_object_classes)

    @property
    @pulumi.getter(name="avatarUrlAttribute")
    def avatar_url_attribute(self) -> str:
        """
        User attribute for the avatar url
        """
        return pulumi.get(self, "avatar_url_attribute")

    @property
    @pulumi.getter(name="baseDn")
    def base_dn(self) -> str:
        """
        Base DN for LDAP connections
        """
        return pulumi.get(self, "base_dn")

    @property
    @pulumi.getter(name="bindDn")
    def bind_dn(self) -> str:
        """
        Bind DN for LDAP connections
        """
        return pulumi.get(self, "bind_dn")

    @property
    @pulumi.getter(name="bindPassword")
    def bind_password(self) -> str:
        """
        Bind password for LDAP connections
        """
        return pulumi.get(self, "bind_password")

    @property
    @pulumi.getter(name="displayNameAttribute")
    def display_name_attribute(self) -> str:
        """
        User attribute for the display name
        """
        return pulumi.get(self, "display_name_attribute")

    @property
    @pulumi.getter(name="emailAttribute")
    def email_attribute(self) -> str:
        """
        User attribute for the email
        """
        return pulumi.get(self, "email_attribute")

    @property
    @pulumi.getter(name="emailVerifiedAttribute")
    def email_verified_attribute(self) -> str:
        """
        User attribute for the email verified state
        """
        return pulumi.get(self, "email_verified_attribute")

    @property
    @pulumi.getter(name="firstNameAttribute")
    def first_name_attribute(self) -> str:
        """
        User attribute for the first name
        """
        return pulumi.get(self, "first_name_attribute")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idAttribute")
    def id_attribute(self) -> str:
        """
        User attribute for the id
        """
        return pulumi.get(self, "id_attribute")

    @property
    @pulumi.getter(name="isAutoCreation")
    def is_auto_creation(self) -> bool:
        """
        enabled if a new account in ZITADEL are created automatically on login with an external account
        """
        return pulumi.get(self, "is_auto_creation")

    @property
    @pulumi.getter(name="isAutoUpdate")
    def is_auto_update(self) -> bool:
        """
        enabled if a the ZITADEL account fields are updated automatically on each login
        """
        return pulumi.get(self, "is_auto_update")

    @property
    @pulumi.getter(name="isCreationAllowed")
    def is_creation_allowed(self) -> bool:
        """
        enabled if users are able to create a new account in ZITADEL when using an external account
        """
        return pulumi.get(self, "is_creation_allowed")

    @property
    @pulumi.getter(name="isLinkingAllowed")
    def is_linking_allowed(self) -> bool:
        """
        enabled if users are able to link an existing ZITADEL user with an external account
        """
        return pulumi.get(self, "is_linking_allowed")

    @property
    @pulumi.getter(name="lastNameAttribute")
    def last_name_attribute(self) -> str:
        """
        User attribute for the last name
        """
        return pulumi.get(self, "last_name_attribute")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the IDP
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nickNameAttribute")
    def nick_name_attribute(self) -> str:
        """
        User attribute for the nick name
        """
        return pulumi.get(self, "nick_name_attribute")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        """
        ID of the organization
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="phoneAttribute")
    def phone_attribute(self) -> str:
        """
        User attribute for the phone
        """
        return pulumi.get(self, "phone_attribute")

    @property
    @pulumi.getter(name="phoneVerifiedAttribute")
    def phone_verified_attribute(self) -> str:
        """
        User attribute for the phone verified state
        """
        return pulumi.get(self, "phone_verified_attribute")

    @property
    @pulumi.getter(name="preferredLanguageAttribute")
    def preferred_language_attribute(self) -> str:
        """
        User attribute for the preferred language
        """
        return pulumi.get(self, "preferred_language_attribute")

    @property
    @pulumi.getter(name="preferredUsernameAttribute")
    def preferred_username_attribute(self) -> str:
        """
        User attribute for the preferred username
        """
        return pulumi.get(self, "preferred_username_attribute")

    @property
    @pulumi.getter(name="profileAttribute")
    def profile_attribute(self) -> str:
        """
        User attribute for the profile
        """
        return pulumi.get(self, "profile_attribute")

    @property
    @pulumi.getter
    def servers(self) -> Sequence[str]:
        """
        Servers to try in order for establishing LDAP connections
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="startTls")
    def start_tls(self) -> bool:
        """
        Wether to use StartTLS for LDAP connections
        """
        return pulumi.get(self, "start_tls")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        """
        Timeout for LDAP connections
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="userBase")
    def user_base(self) -> str:
        """
        User base for LDAP connections
        """
        return pulumi.get(self, "user_base")

    @property
    @pulumi.getter(name="userFilters")
    def user_filters(self) -> Sequence[str]:
        """
        User filters for LDAP connections
        """
        return pulumi.get(self, "user_filters")

    @property
    @pulumi.getter(name="userObjectClasses")
    def user_object_classes(self) -> Sequence[str]:
        """
        User object classes for LDAP connections
        """
        return pulumi.get(self, "user_object_classes")


class AwaitableGetOrgIdpLdapResult(GetOrgIdpLdapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrgIdpLdapResult(
            avatar_url_attribute=self.avatar_url_attribute,
            base_dn=self.base_dn,
            bind_dn=self.bind_dn,
            bind_password=self.bind_password,
            display_name_attribute=self.display_name_attribute,
            email_attribute=self.email_attribute,
            email_verified_attribute=self.email_verified_attribute,
            first_name_attribute=self.first_name_attribute,
            id=self.id,
            id_attribute=self.id_attribute,
            is_auto_creation=self.is_auto_creation,
            is_auto_update=self.is_auto_update,
            is_creation_allowed=self.is_creation_allowed,
            is_linking_allowed=self.is_linking_allowed,
            last_name_attribute=self.last_name_attribute,
            name=self.name,
            nick_name_attribute=self.nick_name_attribute,
            org_id=self.org_id,
            phone_attribute=self.phone_attribute,
            phone_verified_attribute=self.phone_verified_attribute,
            preferred_language_attribute=self.preferred_language_attribute,
            preferred_username_attribute=self.preferred_username_attribute,
            profile_attribute=self.profile_attribute,
            servers=self.servers,
            start_tls=self.start_tls,
            timeout=self.timeout,
            user_base=self.user_base,
            user_filters=self.user_filters,
            user_object_classes=self.user_object_classes)


def get_org_idp_ldap(id: Optional[str] = None,
                     org_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrgIdpLdapResult:
    """
    Datasource representing an LDAP IdP on the organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zitadel as zitadel

    default = zitadel.get_org_idp_ldap(org_id=data["zitadel_org"]["default"]["id"],
        id="123456789012345678")
    ```


    :param str id: The ID of this resource.
    :param str org_id: ID of the organization
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zitadel:index/getOrgIdpLdap:getOrgIdpLdap', __args__, opts=opts, typ=GetOrgIdpLdapResult).value

    return AwaitableGetOrgIdpLdapResult(
        avatar_url_attribute=pulumi.get(__ret__, 'avatar_url_attribute'),
        base_dn=pulumi.get(__ret__, 'base_dn'),
        bind_dn=pulumi.get(__ret__, 'bind_dn'),
        bind_password=pulumi.get(__ret__, 'bind_password'),
        display_name_attribute=pulumi.get(__ret__, 'display_name_attribute'),
        email_attribute=pulumi.get(__ret__, 'email_attribute'),
        email_verified_attribute=pulumi.get(__ret__, 'email_verified_attribute'),
        first_name_attribute=pulumi.get(__ret__, 'first_name_attribute'),
        id=pulumi.get(__ret__, 'id'),
        id_attribute=pulumi.get(__ret__, 'id_attribute'),
        is_auto_creation=pulumi.get(__ret__, 'is_auto_creation'),
        is_auto_update=pulumi.get(__ret__, 'is_auto_update'),
        is_creation_allowed=pulumi.get(__ret__, 'is_creation_allowed'),
        is_linking_allowed=pulumi.get(__ret__, 'is_linking_allowed'),
        last_name_attribute=pulumi.get(__ret__, 'last_name_attribute'),
        name=pulumi.get(__ret__, 'name'),
        nick_name_attribute=pulumi.get(__ret__, 'nick_name_attribute'),
        org_id=pulumi.get(__ret__, 'org_id'),
        phone_attribute=pulumi.get(__ret__, 'phone_attribute'),
        phone_verified_attribute=pulumi.get(__ret__, 'phone_verified_attribute'),
        preferred_language_attribute=pulumi.get(__ret__, 'preferred_language_attribute'),
        preferred_username_attribute=pulumi.get(__ret__, 'preferred_username_attribute'),
        profile_attribute=pulumi.get(__ret__, 'profile_attribute'),
        servers=pulumi.get(__ret__, 'servers'),
        start_tls=pulumi.get(__ret__, 'start_tls'),
        timeout=pulumi.get(__ret__, 'timeout'),
        user_base=pulumi.get(__ret__, 'user_base'),
        user_filters=pulumi.get(__ret__, 'user_filters'),
        user_object_classes=pulumi.get(__ret__, 'user_object_classes'))


@_utilities.lift_output_func(get_org_idp_ldap)
def get_org_idp_ldap_output(id: Optional[pulumi.Input[str]] = None,
                            org_id: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOrgIdpLdapResult]:
    """
    Datasource representing an LDAP IdP on the organization.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zitadel as zitadel

    default = zitadel.get_org_idp_ldap(org_id=data["zitadel_org"]["default"]["id"],
        id="123456789012345678")
    ```


    :param str id: The ID of this resource.
    :param str org_id: ID of the organization
    """
    ...
