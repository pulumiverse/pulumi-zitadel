# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetApplicationOidcResult',
    'AwaitableGetApplicationOidcResult',
    'get_application_oidc',
    'get_application_oidc_output',
]

@pulumi.output_type
class GetApplicationOidcResult:
    """
    A collection of values returned by getApplicationOidc.
    """
    def __init__(__self__, access_token_role_assertion=None, access_token_type=None, additional_origins=None, app_id=None, app_type=None, auth_method_type=None, clock_skew=None, dev_mode=None, grant_types=None, id=None, id_token_role_assertion=None, id_token_userinfo_assertion=None, name=None, org_id=None, post_logout_redirect_uris=None, project_id=None, redirect_uris=None, response_types=None, version=None):
        if access_token_role_assertion and not isinstance(access_token_role_assertion, bool):
            raise TypeError("Expected argument 'access_token_role_assertion' to be a bool")
        pulumi.set(__self__, "access_token_role_assertion", access_token_role_assertion)
        if access_token_type and not isinstance(access_token_type, str):
            raise TypeError("Expected argument 'access_token_type' to be a str")
        pulumi.set(__self__, "access_token_type", access_token_type)
        if additional_origins and not isinstance(additional_origins, list):
            raise TypeError("Expected argument 'additional_origins' to be a list")
        pulumi.set(__self__, "additional_origins", additional_origins)
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if app_type and not isinstance(app_type, str):
            raise TypeError("Expected argument 'app_type' to be a str")
        pulumi.set(__self__, "app_type", app_type)
        if auth_method_type and not isinstance(auth_method_type, str):
            raise TypeError("Expected argument 'auth_method_type' to be a str")
        pulumi.set(__self__, "auth_method_type", auth_method_type)
        if clock_skew and not isinstance(clock_skew, str):
            raise TypeError("Expected argument 'clock_skew' to be a str")
        pulumi.set(__self__, "clock_skew", clock_skew)
        if dev_mode and not isinstance(dev_mode, bool):
            raise TypeError("Expected argument 'dev_mode' to be a bool")
        pulumi.set(__self__, "dev_mode", dev_mode)
        if grant_types and not isinstance(grant_types, list):
            raise TypeError("Expected argument 'grant_types' to be a list")
        pulumi.set(__self__, "grant_types", grant_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_token_role_assertion and not isinstance(id_token_role_assertion, bool):
            raise TypeError("Expected argument 'id_token_role_assertion' to be a bool")
        pulumi.set(__self__, "id_token_role_assertion", id_token_role_assertion)
        if id_token_userinfo_assertion and not isinstance(id_token_userinfo_assertion, bool):
            raise TypeError("Expected argument 'id_token_userinfo_assertion' to be a bool")
        pulumi.set(__self__, "id_token_userinfo_assertion", id_token_userinfo_assertion)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if post_logout_redirect_uris and not isinstance(post_logout_redirect_uris, list):
            raise TypeError("Expected argument 'post_logout_redirect_uris' to be a list")
        pulumi.set(__self__, "post_logout_redirect_uris", post_logout_redirect_uris)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if redirect_uris and not isinstance(redirect_uris, list):
            raise TypeError("Expected argument 'redirect_uris' to be a list")
        pulumi.set(__self__, "redirect_uris", redirect_uris)
        if response_types and not isinstance(response_types, list):
            raise TypeError("Expected argument 'response_types' to be a list")
        pulumi.set(__self__, "response_types", response_types)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="accessTokenRoleAssertion")
    def access_token_role_assertion(self) -> bool:
        """
        Access token role assertion
        """
        return pulumi.get(self, "access_token_role_assertion")

    @property
    @pulumi.getter(name="accessTokenType")
    def access_token_type(self) -> str:
        """
        Access token type
        """
        return pulumi.get(self, "access_token_type")

    @property
    @pulumi.getter(name="additionalOrigins")
    def additional_origins(self) -> Sequence[str]:
        """
        Additional origins
        """
        return pulumi.get(self, "additional_origins")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> str:
        """
        App type
        """
        return pulumi.get(self, "app_type")

    @property
    @pulumi.getter(name="authMethodType")
    def auth_method_type(self) -> str:
        """
        Auth method type
        """
        return pulumi.get(self, "auth_method_type")

    @property
    @pulumi.getter(name="clockSkew")
    def clock_skew(self) -> str:
        """
        Clockskew
        """
        return pulumi.get(self, "clock_skew")

    @property
    @pulumi.getter(name="devMode")
    def dev_mode(self) -> bool:
        """
        Dev mode
        """
        return pulumi.get(self, "dev_mode")

    @property
    @pulumi.getter(name="grantTypes")
    def grant_types(self) -> Sequence[str]:
        """
        Grant types
        """
        return pulumi.get(self, "grant_types")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idTokenRoleAssertion")
    def id_token_role_assertion(self) -> bool:
        """
        ID token role assertion
        """
        return pulumi.get(self, "id_token_role_assertion")

    @property
    @pulumi.getter(name="idTokenUserinfoAssertion")
    def id_token_userinfo_assertion(self) -> bool:
        """
        Token userinfo assertion
        """
        return pulumi.get(self, "id_token_userinfo_assertion")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the application
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[str]:
        """
        ID of the organization
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="postLogoutRedirectUris")
    def post_logout_redirect_uris(self) -> Sequence[str]:
        """
        Post logout redirect URIs
        """
        return pulumi.get(self, "post_logout_redirect_uris")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        ID of the project
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Sequence[str]:
        """
        RedirectURIs
        """
        return pulumi.get(self, "redirect_uris")

    @property
    @pulumi.getter(name="responseTypes")
    def response_types(self) -> Sequence[str]:
        """
        Response type
        """
        return pulumi.get(self, "response_types")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version
        """
        return pulumi.get(self, "version")


class AwaitableGetApplicationOidcResult(GetApplicationOidcResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApplicationOidcResult(
            access_token_role_assertion=self.access_token_role_assertion,
            access_token_type=self.access_token_type,
            additional_origins=self.additional_origins,
            app_id=self.app_id,
            app_type=self.app_type,
            auth_method_type=self.auth_method_type,
            clock_skew=self.clock_skew,
            dev_mode=self.dev_mode,
            grant_types=self.grant_types,
            id=self.id,
            id_token_role_assertion=self.id_token_role_assertion,
            id_token_userinfo_assertion=self.id_token_userinfo_assertion,
            name=self.name,
            org_id=self.org_id,
            post_logout_redirect_uris=self.post_logout_redirect_uris,
            project_id=self.project_id,
            redirect_uris=self.redirect_uris,
            response_types=self.response_types,
            version=self.version)


def get_application_oidc(app_id: Optional[str] = None,
                         org_id: Optional[str] = None,
                         project_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApplicationOidcResult:
    """
    Datasource representing an OIDC application belonging to a project, with all configuration possibilities.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zitadel as zitadel

    default = zitadel.get_application_oidc(org_id=data["zitadel_org"]["default"]["id"],
        project_id=data["zitadel_project"]["default"]["id"],
        app_id="123456789012345678")
    pulumi.export("applicationOidc", default)
    ```


    :param str app_id: The ID of this resource.
    :param str org_id: ID of the organization
    :param str project_id: ID of the project
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['orgId'] = org_id
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zitadel:index/getApplicationOidc:getApplicationOidc', __args__, opts=opts, typ=GetApplicationOidcResult).value

    return AwaitableGetApplicationOidcResult(
        access_token_role_assertion=pulumi.get(__ret__, 'access_token_role_assertion'),
        access_token_type=pulumi.get(__ret__, 'access_token_type'),
        additional_origins=pulumi.get(__ret__, 'additional_origins'),
        app_id=pulumi.get(__ret__, 'app_id'),
        app_type=pulumi.get(__ret__, 'app_type'),
        auth_method_type=pulumi.get(__ret__, 'auth_method_type'),
        clock_skew=pulumi.get(__ret__, 'clock_skew'),
        dev_mode=pulumi.get(__ret__, 'dev_mode'),
        grant_types=pulumi.get(__ret__, 'grant_types'),
        id=pulumi.get(__ret__, 'id'),
        id_token_role_assertion=pulumi.get(__ret__, 'id_token_role_assertion'),
        id_token_userinfo_assertion=pulumi.get(__ret__, 'id_token_userinfo_assertion'),
        name=pulumi.get(__ret__, 'name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        post_logout_redirect_uris=pulumi.get(__ret__, 'post_logout_redirect_uris'),
        project_id=pulumi.get(__ret__, 'project_id'),
        redirect_uris=pulumi.get(__ret__, 'redirect_uris'),
        response_types=pulumi.get(__ret__, 'response_types'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_application_oidc)
def get_application_oidc_output(app_id: Optional[pulumi.Input[str]] = None,
                                org_id: Optional[pulumi.Input[Optional[str]]] = None,
                                project_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApplicationOidcResult]:
    """
    Datasource representing an OIDC application belonging to a project, with all configuration possibilities.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zitadel as zitadel

    default = zitadel.get_application_oidc(org_id=data["zitadel_org"]["default"]["id"],
        project_id=data["zitadel_project"]["default"]["id"],
        app_id="123456789012345678")
    pulumi.export("applicationOidc", default)
    ```


    :param str app_id: The ID of this resource.
    :param str org_id: ID of the organization
    :param str project_id: ID of the project
    """
    ...
