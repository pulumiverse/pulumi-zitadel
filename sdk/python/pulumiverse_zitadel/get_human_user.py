# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetHumanUserResult',
    'AwaitableGetHumanUserResult',
    'get_human_user',
    'get_human_user_output',
]

@pulumi.output_type
class GetHumanUserResult:
    """
    A collection of values returned by getHumanUser.
    """
    def __init__(__self__, display_name=None, email=None, first_name=None, gender=None, id=None, is_email_verified=None, is_phone_verified=None, last_name=None, login_names=None, nick_name=None, org_id=None, phone=None, preferred_language=None, preferred_login_name=None, state=None, user_id=None, user_name=None):
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if first_name and not isinstance(first_name, str):
            raise TypeError("Expected argument 'first_name' to be a str")
        pulumi.set(__self__, "first_name", first_name)
        if gender and not isinstance(gender, str):
            raise TypeError("Expected argument 'gender' to be a str")
        pulumi.set(__self__, "gender", gender)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_email_verified and not isinstance(is_email_verified, bool):
            raise TypeError("Expected argument 'is_email_verified' to be a bool")
        pulumi.set(__self__, "is_email_verified", is_email_verified)
        if is_phone_verified and not isinstance(is_phone_verified, bool):
            raise TypeError("Expected argument 'is_phone_verified' to be a bool")
        pulumi.set(__self__, "is_phone_verified", is_phone_verified)
        if last_name and not isinstance(last_name, str):
            raise TypeError("Expected argument 'last_name' to be a str")
        pulumi.set(__self__, "last_name", last_name)
        if login_names and not isinstance(login_names, list):
            raise TypeError("Expected argument 'login_names' to be a list")
        pulumi.set(__self__, "login_names", login_names)
        if nick_name and not isinstance(nick_name, str):
            raise TypeError("Expected argument 'nick_name' to be a str")
        pulumi.set(__self__, "nick_name", nick_name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if phone and not isinstance(phone, str):
            raise TypeError("Expected argument 'phone' to be a str")
        pulumi.set(__self__, "phone", phone)
        if preferred_language and not isinstance(preferred_language, str):
            raise TypeError("Expected argument 'preferred_language' to be a str")
        pulumi.set(__self__, "preferred_language", preferred_language)
        if preferred_login_name and not isinstance(preferred_login_name, str):
            raise TypeError("Expected argument 'preferred_login_name' to be a str")
        pulumi.set(__self__, "preferred_login_name", preferred_login_name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name of the user
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        Email of the user
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        """
        First name of the user
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter
    def gender(self) -> str:
        """
        Gender of the user
        """
        return pulumi.get(self, "gender")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEmailVerified")
    def is_email_verified(self) -> bool:
        """
        Is the email verified of the user, can only be true if password of the user is set
        """
        return pulumi.get(self, "is_email_verified")

    @property
    @pulumi.getter(name="isPhoneVerified")
    def is_phone_verified(self) -> bool:
        """
        Is the phone verified of the user
        """
        return pulumi.get(self, "is_phone_verified")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        """
        Last name of the user
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="loginNames")
    def login_names(self) -> Sequence[str]:
        """
        Loginnames
        """
        return pulumi.get(self, "login_names")

    @property
    @pulumi.getter(name="nickName")
    def nick_name(self) -> str:
        """
        Nick name of the user
        """
        return pulumi.get(self, "nick_name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        ID of the organization
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def phone(self) -> str:
        """
        Phone of the user
        """
        return pulumi.get(self, "phone")

    @property
    @pulumi.getter(name="preferredLanguage")
    def preferred_language(self) -> str:
        """
        Preferred language of the user
        """
        return pulumi.get(self, "preferred_language")

    @property
    @pulumi.getter(name="preferredLoginName")
    def preferred_login_name(self) -> str:
        """
        Preferred login name
        """
        return pulumi.get(self, "preferred_login_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the user
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        Username
        """
        return pulumi.get(self, "user_name")


class AwaitableGetHumanUserResult(GetHumanUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHumanUserResult(
            display_name=self.display_name,
            email=self.email,
            first_name=self.first_name,
            gender=self.gender,
            id=self.id,
            is_email_verified=self.is_email_verified,
            is_phone_verified=self.is_phone_verified,
            last_name=self.last_name,
            login_names=self.login_names,
            nick_name=self.nick_name,
            org_id=self.org_id,
            phone=self.phone,
            preferred_language=self.preferred_language,
            preferred_login_name=self.preferred_login_name,
            state=self.state,
            user_id=self.user_id,
            user_name=self.user_name)


def get_human_user(org_id: Optional[str] = None,
                   user_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHumanUserResult:
    """
    Datasource representing a human user situated under an organization, which then can be authorized through memberships or direct grants on other resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zitadel as zitadel

    default = zitadel.get_human_user(org_id=data["zitadel_org"]["default"]["id"],
        user_id="123456789012345678")
    pulumi.export("humanUser", default)
    ```


    :param str org_id: ID of the organization
    :param str user_id: The ID of this resource.
    """
    __args__ = dict()
    __args__['orgId'] = org_id
    __args__['userId'] = user_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zitadel:index/getHumanUser:getHumanUser', __args__, opts=opts, typ=GetHumanUserResult).value

    return AwaitableGetHumanUserResult(
        display_name=pulumi.get(__ret__, 'display_name'),
        email=pulumi.get(__ret__, 'email'),
        first_name=pulumi.get(__ret__, 'first_name'),
        gender=pulumi.get(__ret__, 'gender'),
        id=pulumi.get(__ret__, 'id'),
        is_email_verified=pulumi.get(__ret__, 'is_email_verified'),
        is_phone_verified=pulumi.get(__ret__, 'is_phone_verified'),
        last_name=pulumi.get(__ret__, 'last_name'),
        login_names=pulumi.get(__ret__, 'login_names'),
        nick_name=pulumi.get(__ret__, 'nick_name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        phone=pulumi.get(__ret__, 'phone'),
        preferred_language=pulumi.get(__ret__, 'preferred_language'),
        preferred_login_name=pulumi.get(__ret__, 'preferred_login_name'),
        state=pulumi.get(__ret__, 'state'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_name=pulumi.get(__ret__, 'user_name'))


@_utilities.lift_output_func(get_human_user)
def get_human_user_output(org_id: Optional[pulumi.Input[str]] = None,
                          user_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHumanUserResult]:
    """
    Datasource representing a human user situated under an organization, which then can be authorized through memberships or direct grants on other resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_zitadel as zitadel

    default = zitadel.get_human_user(org_id=data["zitadel_org"]["default"]["id"],
        user_id="123456789012345678")
    pulumi.export("humanUser", default)
    ```


    :param str org_id: ID of the organization
    :param str user_id: The ID of this resource.
    """
    ...
