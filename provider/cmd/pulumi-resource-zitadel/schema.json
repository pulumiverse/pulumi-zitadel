{
    "name": "zitadel",
    "description": "A Pulumi package for creating and managing zitadel cloud resources.",
    "keywords": [
        "pulumi",
        "zitadel",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`zitadel` Terraform Provider](https://github.com/zitadel/terraform-provider-zitadel).",
    "repository": "https://github.com/pulumiverse/pulumi-zitadel",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/zitadel",
            "packageDescription": "A Pulumi package for creating and managing zitadel cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zitadel/terraform-provider-zitadel)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zitadel` repo](https://github.com/pulumiverse/pulumi-zitadel/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zitadel` repo](https://github.com/zitadel/terraform-provider-zitadel/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_zitadel",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zitadel/terraform-provider-zitadel)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zitadel` repo](https://github.com/pulumiverse/pulumi-zitadel/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zitadel` repo](https://github.com/zitadel/terraform-provider-zitadel/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "domain": {
                "type": "string",
                "description": "Domain used to connect to the ZITADEL instance\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Use insecure connection\n"
            },
            "jwtProfileFile": {
                "type": "string",
                "description": "Path to the file containing credentials to connect to ZITADEL. Either 'jwt_profile_file' or 'jwt_profile_json' is\nrequired\n"
            },
            "jwtProfileJson": {
                "type": "string",
                "description": "JSON value of credentials to connect to ZITADEL. Either 'jwt_profile_file' or 'jwt_profile_json' is required\n"
            },
            "port": {
                "type": "string",
                "description": "Used port if not the default ports 80 or 443 are configured\n"
            },
            "token": {
                "type": "string",
                "description": "Path to the file containing credentials to connect to ZITADEL\n"
            }
        },
        "defaults": [
            "domain"
        ]
    },
    "provider": {
        "description": "The provider type for the zitadel package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "domain": {
                "type": "string",
                "description": "Domain used to connect to the ZITADEL instance\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Use insecure connection\n"
            },
            "jwtProfileFile": {
                "type": "string",
                "description": "Path to the file containing credentials to connect to ZITADEL. Either 'jwt_profile_file' or 'jwt_profile_json' is\nrequired\n"
            },
            "jwtProfileJson": {
                "type": "string",
                "description": "JSON value of credentials to connect to ZITADEL. Either 'jwt_profile_file' or 'jwt_profile_json' is required\n"
            },
            "port": {
                "type": "string",
                "description": "Used port if not the default ports 80 or 443 are configured\n"
            },
            "token": {
                "type": "string",
                "description": "Path to the file containing credentials to connect to ZITADEL\n"
            }
        },
        "required": [
            "domain"
        ],
        "inputProperties": {
            "domain": {
                "type": "string",
                "description": "Domain used to connect to the ZITADEL instance\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Use insecure connection\n"
            },
            "jwtProfileFile": {
                "type": "string",
                "description": "Path to the file containing credentials to connect to ZITADEL. Either 'jwt_profile_file' or 'jwt_profile_json' is\nrequired\n"
            },
            "jwtProfileJson": {
                "type": "string",
                "description": "JSON value of credentials to connect to ZITADEL. Either 'jwt_profile_file' or 'jwt_profile_json' is required\n"
            },
            "port": {
                "type": "string",
                "description": "Used port if not the default ports 80 or 443 are configured\n"
            },
            "token": {
                "type": "string",
                "description": "Path to the file containing credentials to connect to ZITADEL\n"
            }
        },
        "requiredInputs": [
            "domain"
        ]
    },
    "resources": {
        "zitadel:index/action:Action": {
            "description": "Resource representing an action belonging to an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.Action(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    script: \"testscript\",\n    timeout: \"10s\",\n    allowedToFail: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.Action(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    script=\"testscript\",\n    timeout=\"10s\",\n    allowed_to_fail=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.Action(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Script = \"testscript\",\n        Timeout = \"10s\",\n        AllowedToFail = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewAction(ctx, \"default\", \u0026zitadel.ActionArgs{\n\t\t\tOrgId:         pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tScript:        pulumi.String(\"testscript\"),\n\t\t\tTimeout:       pulumi.String(\"10s\"),\n\t\t\tAllowedToFail: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.Action;\nimport com.pulumi.zitadel.ActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Action(\"default\", ActionArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .script(\"testscript\")\n            .timeout(\"10s\")\n            .allowedToFail(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:Action\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      script: testscript\n      timeout: 10s\n      allowedToFail: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/action:Action imported '123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "allowedToFail": {
                    "type": "boolean",
                    "description": "when true, the next action will be called even if this action fails\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "script": {
                    "type": "string"
                },
                "state": {
                    "type": "integer",
                    "description": "the state of the action\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "after which time the action will be terminated if not finished\n"
                }
            },
            "required": [
                "allowedToFail",
                "name",
                "script",
                "state",
                "timeout"
            ],
            "inputProperties": {
                "allowedToFail": {
                    "type": "boolean",
                    "description": "when true, the next action will be called even if this action fails\n"
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "script": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string",
                    "description": "after which time the action will be terminated if not finished\n"
                }
            },
            "requiredInputs": [
                "allowedToFail",
                "script",
                "timeout"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Action resources.\n",
                "properties": {
                    "allowedToFail": {
                        "type": "boolean",
                        "description": "when true, the next action will be called even if this action fails\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "script": {
                        "type": "string"
                    },
                    "state": {
                        "type": "integer",
                        "description": "the state of the action\n"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "after which time the action will be terminated if not finished\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/applicationApi:ApplicationApi": {
            "description": "Resource representing an API application belonging to a project, with all configuration possibilities.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.ApplicationApi(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    authMethodType: \"API_AUTH_METHOD_TYPE_BASIC\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.ApplicationApi(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    auth_method_type=\"API_AUTH_METHOD_TYPE_BASIC\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.ApplicationApi(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        AuthMethodType = \"API_AUTH_METHOD_TYPE_BASIC\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewApplicationApi(ctx, \"default\", \u0026zitadel.ApplicationApiArgs{\n\t\t\tOrgId:          pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tProjectId:      pulumi.Any(data.Zitadel_project.Default.Id),\n\t\t\tAuthMethodType: pulumi.String(\"API_AUTH_METHOD_TYPE_BASIC\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ApplicationApi;\nimport com.pulumi.zitadel.ApplicationApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ApplicationApi(\"default\", ApplicationApiArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .authMethodType(\"API_AUTH_METHOD_TYPE_BASIC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:ApplicationApi\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      projectId: ${data.zitadel_project.default.id}\n      authMethodType: API_AUTH_METHOD_TYPE_BASIC\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid:project_id[:org_id][:client_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/applicationApi:ApplicationApi imported '123456789012345678:123456789012345678:123456789012345678:123456789012345678@zitadel:JuaDFFeOak5DGE655KCYPSAclSkbMVEJXXuX1lEMBT14eLMSs0A0qhafKX5SA2Df'\n```\n\n ",
            "properties": {
                "authMethodType": {
                    "type": "string",
                    "description": "Auth method type, supported values: API*AUTH*METHOD*TYPE*BASIC, API*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "generated ID for this config\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "generated secret for this config\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "name",
                "projectId"
            ],
            "inputProperties": {
                "authMethodType": {
                    "type": "string",
                    "description": "Auth method type, supported values: API*AUTH*METHOD*TYPE*BASIC, API*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationApi resources.\n",
                "properties": {
                    "authMethodType": {
                        "type": "string",
                        "description": "Auth method type, supported values: API*AUTH*METHOD*TYPE*BASIC, API*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "generated ID for this config\n",
                        "secret": true
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "generated secret for this config\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/applicationKey:ApplicationKey": {
            "description": "Resource representing a app key\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.ApplicationKey(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    appId: data.zitadel_application_api[\"default\"].id,\n    keyType: \"KEY_TYPE_JSON\",\n    expirationDate: \"2519-04-01T08:45:00Z\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.ApplicationKey(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    app_id=data[\"zitadel_application_api\"][\"default\"][\"id\"],\n    key_type=\"KEY_TYPE_JSON\",\n    expiration_date=\"2519-04-01T08:45:00Z\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.ApplicationKey(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        AppId = data.Zitadel_application_api.Default.Id,\n        KeyType = \"KEY_TYPE_JSON\",\n        ExpirationDate = \"2519-04-01T08:45:00Z\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewApplicationKey(ctx, \"default\", \u0026zitadel.ApplicationKeyArgs{\n\t\t\tOrgId:          pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tProjectId:      pulumi.Any(data.Zitadel_project.Default.Id),\n\t\t\tAppId:          pulumi.Any(data.Zitadel_application_api.Default.Id),\n\t\t\tKeyType:        pulumi.String(\"KEY_TYPE_JSON\"),\n\t\t\tExpirationDate: pulumi.String(\"2519-04-01T08:45:00Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ApplicationKey;\nimport com.pulumi.zitadel.ApplicationKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ApplicationKey(\"default\", ApplicationKeyArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .appId(data.zitadel_application_api().default().id())\n            .keyType(\"KEY_TYPE_JSON\")\n            .expirationDate(\"2519-04-01T08:45:00Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:ApplicationKey\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      projectId: ${data.zitadel_project.default.id}\n      appId: ${data.zitadel_application_api.default.id}\n      keyType: KEY_TYPE_JSON\n      expirationDate: 2519-04-01T08:45:00Z\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid:project_id:app_id[:org_id][:key_details]\u003e`. You can use __SEMICOLON__ to escape :, e.g.\n\n```sh\n $ pulumi import zitadel:index/applicationKey:ApplicationKey imported \"123456789012345678:123456789012345678:123456789012345678:123456789012345678:$(cat ~/Downloads/123456789012345678.json | sed -e 's/:/__SEMICOLON__/g')\"\n```\n\n ",
            "properties": {
                "appId": {
                    "type": "string",
                    "description": "ID of the application\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "Expiration date of the app key in the RFC3339 format\n"
                },
                "keyDetails": {
                    "type": "string",
                    "description": "Value of the app key\n",
                    "secret": true
                },
                "keyType": {
                    "type": "string",
                    "description": "Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n"
                }
            },
            "required": [
                "appId",
                "expirationDate",
                "keyDetails",
                "keyType",
                "projectId"
            ],
            "inputProperties": {
                "appId": {
                    "type": "string",
                    "description": "ID of the application\n",
                    "willReplaceOnChanges": true
                },
                "expirationDate": {
                    "type": "string",
                    "description": "Expiration date of the app key in the RFC3339 format\n",
                    "willReplaceOnChanges": true
                },
                "keyType": {
                    "type": "string",
                    "description": "Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "appId",
                "expirationDate",
                "keyType",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationKey resources.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "ID of the application\n",
                        "willReplaceOnChanges": true
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "Expiration date of the app key in the RFC3339 format\n",
                        "willReplaceOnChanges": true
                    },
                    "keyDetails": {
                        "type": "string",
                        "description": "Value of the app key\n",
                        "secret": true
                    },
                    "keyType": {
                        "type": "string",
                        "description": "Type of the app key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/applicationOidc:ApplicationOidc": {
            "description": "Resource representing an OIDC application belonging to a project, with all configuration possibilities.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.ApplicationOidc(\"default\", {\n    projectId: data.zitadel_project[\"default\"].id,\n    orgId: data.zitadel_org[\"default\"].id,\n    redirectUris: [\"https://localhost.com\"],\n    responseTypes: [\"OIDC_RESPONSE_TYPE_CODE\"],\n    grantTypes: [\"OIDC_GRANT_TYPE_AUTHORIZATION_CODE\"],\n    postLogoutRedirectUris: [\"https://localhost.com\"],\n    appType: \"OIDC_APP_TYPE_WEB\",\n    authMethodType: \"OIDC_AUTH_METHOD_TYPE_BASIC\",\n    version: \"OIDC_VERSION_1_0\",\n    clockSkew: \"0s\",\n    devMode: true,\n    accessTokenType: \"OIDC_TOKEN_TYPE_BEARER\",\n    accessTokenRoleAssertion: false,\n    idTokenRoleAssertion: false,\n    idTokenUserinfoAssertion: false,\n    additionalOrigins: [],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.ApplicationOidc(\"default\",\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    redirect_uris=[\"https://localhost.com\"],\n    response_types=[\"OIDC_RESPONSE_TYPE_CODE\"],\n    grant_types=[\"OIDC_GRANT_TYPE_AUTHORIZATION_CODE\"],\n    post_logout_redirect_uris=[\"https://localhost.com\"],\n    app_type=\"OIDC_APP_TYPE_WEB\",\n    auth_method_type=\"OIDC_AUTH_METHOD_TYPE_BASIC\",\n    version=\"OIDC_VERSION_1_0\",\n    clock_skew=\"0s\",\n    dev_mode=True,\n    access_token_type=\"OIDC_TOKEN_TYPE_BEARER\",\n    access_token_role_assertion=False,\n    id_token_role_assertion=False,\n    id_token_userinfo_assertion=False,\n    additional_origins=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.ApplicationOidc(\"default\", new()\n    {\n        ProjectId = data.Zitadel_project.Default.Id,\n        OrgId = data.Zitadel_org.Default.Id,\n        RedirectUris = new[]\n        {\n            \"https://localhost.com\",\n        },\n        ResponseTypes = new[]\n        {\n            \"OIDC_RESPONSE_TYPE_CODE\",\n        },\n        GrantTypes = new[]\n        {\n            \"OIDC_GRANT_TYPE_AUTHORIZATION_CODE\",\n        },\n        PostLogoutRedirectUris = new[]\n        {\n            \"https://localhost.com\",\n        },\n        AppType = \"OIDC_APP_TYPE_WEB\",\n        AuthMethodType = \"OIDC_AUTH_METHOD_TYPE_BASIC\",\n        Version = \"OIDC_VERSION_1_0\",\n        ClockSkew = \"0s\",\n        DevMode = true,\n        AccessTokenType = \"OIDC_TOKEN_TYPE_BEARER\",\n        AccessTokenRoleAssertion = false,\n        IdTokenRoleAssertion = false,\n        IdTokenUserinfoAssertion = false,\n        AdditionalOrigins = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewApplicationOidc(ctx, \"default\", \u0026zitadel.ApplicationOidcArgs{\n\t\t\tProjectId: pulumi.Any(data.Zitadel_project.Default.Id),\n\t\t\tOrgId:     pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tRedirectUris: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://localhost.com\"),\n\t\t\t},\n\t\t\tResponseTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"OIDC_RESPONSE_TYPE_CODE\"),\n\t\t\t},\n\t\t\tGrantTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"OIDC_GRANT_TYPE_AUTHORIZATION_CODE\"),\n\t\t\t},\n\t\t\tPostLogoutRedirectUris: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"https://localhost.com\"),\n\t\t\t},\n\t\t\tAppType:                  pulumi.String(\"OIDC_APP_TYPE_WEB\"),\n\t\t\tAuthMethodType:           pulumi.String(\"OIDC_AUTH_METHOD_TYPE_BASIC\"),\n\t\t\tVersion:                  pulumi.String(\"OIDC_VERSION_1_0\"),\n\t\t\tClockSkew:                pulumi.String(\"0s\"),\n\t\t\tDevMode:                  pulumi.Bool(true),\n\t\t\tAccessTokenType:          pulumi.String(\"OIDC_TOKEN_TYPE_BEARER\"),\n\t\t\tAccessTokenRoleAssertion: pulumi.Bool(false),\n\t\t\tIdTokenRoleAssertion:     pulumi.Bool(false),\n\t\t\tIdTokenUserinfoAssertion: pulumi.Bool(false),\n\t\t\tAdditionalOrigins:        pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ApplicationOidc;\nimport com.pulumi.zitadel.ApplicationOidcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ApplicationOidc(\"default\", ApplicationOidcArgs.builder()        \n            .projectId(data.zitadel_project().default().id())\n            .orgId(data.zitadel_org().default().id())\n            .redirectUris(\"https://localhost.com\")\n            .responseTypes(\"OIDC_RESPONSE_TYPE_CODE\")\n            .grantTypes(\"OIDC_GRANT_TYPE_AUTHORIZATION_CODE\")\n            .postLogoutRedirectUris(\"https://localhost.com\")\n            .appType(\"OIDC_APP_TYPE_WEB\")\n            .authMethodType(\"OIDC_AUTH_METHOD_TYPE_BASIC\")\n            .version(\"OIDC_VERSION_1_0\")\n            .clockSkew(\"0s\")\n            .devMode(true)\n            .accessTokenType(\"OIDC_TOKEN_TYPE_BEARER\")\n            .accessTokenRoleAssertion(false)\n            .idTokenRoleAssertion(false)\n            .idTokenUserinfoAssertion(false)\n            .additionalOrigins()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:ApplicationOidc\n    properties:\n      projectId: ${data.zitadel_project.default.id}\n      orgId: ${data.zitadel_org.default.id}\n      redirectUris:\n        - https://localhost.com\n      responseTypes:\n        - OIDC_RESPONSE_TYPE_CODE\n      grantTypes:\n        - OIDC_GRANT_TYPE_AUTHORIZATION_CODE\n      postLogoutRedirectUris:\n        - https://localhost.com\n      appType: OIDC_APP_TYPE_WEB\n      authMethodType: OIDC_AUTH_METHOD_TYPE_BASIC\n      version: OIDC_VERSION_1_0\n      clockSkew: 0s\n      devMode: true\n      accessTokenType: OIDC_TOKEN_TYPE_BEARER\n      accessTokenRoleAssertion: false\n      idTokenRoleAssertion: false\n      idTokenUserinfoAssertion: false\n      additionalOrigins: []\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid:project_id[:org_id][:client_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/applicationOidc:ApplicationOidc imported '123456789012345678:123456789012345678:123456789012345678:123456789012345678@zitadel:JuaDFFeOak5DGE655KCYPSAclSkbMVEJXXuX1lEMBT14eLMSs0A0qhafKX5SA2Df'\n```\n\n ",
            "properties": {
                "accessTokenRoleAssertion": {
                    "type": "boolean",
                    "description": "Access token role assertion\n"
                },
                "accessTokenType": {
                    "type": "string",
                    "description": "Access token type, supported values: OIDC*TOKEN*TYPE*BEARER, OIDC*TOKEN*TYPE*JWT\n"
                },
                "additionalOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional origins\n"
                },
                "appType": {
                    "type": "string",
                    "description": "App type, supported values: OIDC*APP*TYPE*WEB, OIDC*APP*TYPE*USER*AGENT, OIDC*APP*TYPE*NATIVE\n"
                },
                "authMethodType": {
                    "type": "string",
                    "description": "Auth method type, supported values: OIDC*AUTH*METHOD*TYPE*BASIC, OIDC*AUTH*METHOD*TYPE*POST, OIDC*AUTH*METHOD*TYPE*NONE, OIDC*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "generated ID for this config\n",
                    "secret": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "generated secret for this config\n",
                    "secret": true
                },
                "clockSkew": {
                    "type": "string",
                    "description": "Clockskew\n"
                },
                "devMode": {
                    "type": "boolean",
                    "description": "Dev mode\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grant types, supported values: OIDC*GRANT*TYPE*AUTHORIZATION*CODE, OIDC*GRANT*TYPE*IMPLICIT, OIDC*GRANT*TYPE*REFRESH*TOKEN, OIDC*GRANT*TYPE*DEVICE_CODE\n"
                },
                "idTokenRoleAssertion": {
                    "type": "boolean",
                    "description": "ID token role assertion\n"
                },
                "idTokenUserinfoAssertion": {
                    "type": "boolean",
                    "description": "Token userinfo assertion\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "postLogoutRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post logout redirect URIs\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RedirectURIs\n"
                },
                "responseTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Response type, supported values: OIDC*RESPONSE*TYPE*CODE, OIDC*RESPONSE*TYPE*ID*TOKEN, OIDC*RESPONSE*TYPE*ID*TOKEN*TOKEN\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version, supported values: OIDC*VERSION*1_0\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "grantTypes",
                "name",
                "projectId",
                "redirectUris",
                "responseTypes"
            ],
            "inputProperties": {
                "accessTokenRoleAssertion": {
                    "type": "boolean",
                    "description": "Access token role assertion\n"
                },
                "accessTokenType": {
                    "type": "string",
                    "description": "Access token type, supported values: OIDC*TOKEN*TYPE*BEARER, OIDC*TOKEN*TYPE*JWT\n"
                },
                "additionalOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional origins\n"
                },
                "appType": {
                    "type": "string",
                    "description": "App type, supported values: OIDC*APP*TYPE*WEB, OIDC*APP*TYPE*USER*AGENT, OIDC*APP*TYPE*NATIVE\n"
                },
                "authMethodType": {
                    "type": "string",
                    "description": "Auth method type, supported values: OIDC*AUTH*METHOD*TYPE*BASIC, OIDC*AUTH*METHOD*TYPE*POST, OIDC*AUTH*METHOD*TYPE*NONE, OIDC*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT\n"
                },
                "clockSkew": {
                    "type": "string",
                    "description": "Clockskew\n"
                },
                "devMode": {
                    "type": "boolean",
                    "description": "Dev mode\n"
                },
                "grantTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Grant types, supported values: OIDC*GRANT*TYPE*AUTHORIZATION*CODE, OIDC*GRANT*TYPE*IMPLICIT, OIDC*GRANT*TYPE*REFRESH*TOKEN, OIDC*GRANT*TYPE*DEVICE_CODE\n"
                },
                "idTokenRoleAssertion": {
                    "type": "boolean",
                    "description": "ID token role assertion\n"
                },
                "idTokenUserinfoAssertion": {
                    "type": "boolean",
                    "description": "Token userinfo assertion\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the application\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "postLogoutRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post logout redirect URIs\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n",
                    "willReplaceOnChanges": true
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "RedirectURIs\n"
                },
                "responseTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Response type, supported values: OIDC*RESPONSE*TYPE*CODE, OIDC*RESPONSE*TYPE*ID*TOKEN, OIDC*RESPONSE*TYPE*ID*TOKEN*TOKEN\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version, supported values: OIDC*VERSION*1_0\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "grantTypes",
                "projectId",
                "redirectUris",
                "responseTypes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationOidc resources.\n",
                "properties": {
                    "accessTokenRoleAssertion": {
                        "type": "boolean",
                        "description": "Access token role assertion\n"
                    },
                    "accessTokenType": {
                        "type": "string",
                        "description": "Access token type, supported values: OIDC*TOKEN*TYPE*BEARER, OIDC*TOKEN*TYPE*JWT\n"
                    },
                    "additionalOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional origins\n"
                    },
                    "appType": {
                        "type": "string",
                        "description": "App type, supported values: OIDC*APP*TYPE*WEB, OIDC*APP*TYPE*USER*AGENT, OIDC*APP*TYPE*NATIVE\n"
                    },
                    "authMethodType": {
                        "type": "string",
                        "description": "Auth method type, supported values: OIDC*AUTH*METHOD*TYPE*BASIC, OIDC*AUTH*METHOD*TYPE*POST, OIDC*AUTH*METHOD*TYPE*NONE, OIDC*AUTH*METHOD*TYPE*PRIVATE*KEY*JWT\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "generated ID for this config\n",
                        "secret": true
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "generated secret for this config\n",
                        "secret": true
                    },
                    "clockSkew": {
                        "type": "string",
                        "description": "Clockskew\n"
                    },
                    "devMode": {
                        "type": "boolean",
                        "description": "Dev mode\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grant types, supported values: OIDC*GRANT*TYPE*AUTHORIZATION*CODE, OIDC*GRANT*TYPE*IMPLICIT, OIDC*GRANT*TYPE*REFRESH*TOKEN, OIDC*GRANT*TYPE*DEVICE_CODE\n"
                    },
                    "idTokenRoleAssertion": {
                        "type": "boolean",
                        "description": "ID token role assertion\n"
                    },
                    "idTokenUserinfoAssertion": {
                        "type": "boolean",
                        "description": "Token userinfo assertion\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "postLogoutRedirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Post logout redirect URIs\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n",
                        "willReplaceOnChanges": true
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "RedirectURIs\n"
                    },
                    "responseTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Response type, supported values: OIDC*RESPONSE*TYPE*CODE, OIDC*RESPONSE*TYPE*ID*TOKEN, OIDC*RESPONSE*TYPE*ID*TOKEN*TOKEN\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version, supported values: OIDC*VERSION*1_0\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/defaultDomainPolicy:DefaultDomainPolicy": {
            "description": "Resource representing the default domain policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.DefaultDomainPolicy(\"default\", {\n    smtpSenderAddressMatchesInstanceDomain: true,\n    userLoginMustBeDomain: false,\n    validateOrgDomains: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.DefaultDomainPolicy(\"default\",\n    smtp_sender_address_matches_instance_domain=True,\n    user_login_must_be_domain=False,\n    validate_org_domains=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.DefaultDomainPolicy(\"default\", new()\n    {\n        SmtpSenderAddressMatchesInstanceDomain = true,\n        UserLoginMustBeDomain = false,\n        ValidateOrgDomains = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDefaultDomainPolicy(ctx, \"default\", \u0026zitadel.DefaultDomainPolicyArgs{\n\t\t\tSmtpSenderAddressMatchesInstanceDomain: pulumi.Bool(true),\n\t\t\tUserLoginMustBeDomain:                  pulumi.Bool(false),\n\t\t\tValidateOrgDomains:                     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.DefaultDomainPolicy;\nimport com.pulumi.zitadel.DefaultDomainPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DefaultDomainPolicy(\"default\", DefaultDomainPolicyArgs.builder()        \n            .smtpSenderAddressMatchesInstanceDomain(true)\n            .userLoginMustBeDomain(false)\n            .validateOrgDomains(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:DefaultDomainPolicy\n    properties:\n      smtpSenderAddressMatchesInstanceDomain: true\n      userLoginMustBeDomain: false\n      validateOrgDomains: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/defaultDomainPolicy:DefaultDomainPolicy imported ''\n```\n\n ",
            "properties": {
                "smtpSenderAddressMatchesInstanceDomain": {
                    "type": "boolean"
                },
                "userLoginMustBeDomain": {
                    "type": "boolean",
                    "description": "User login must be domain\n"
                },
                "validateOrgDomains": {
                    "type": "boolean",
                    "description": "Validate organization domains\n"
                }
            },
            "required": [
                "smtpSenderAddressMatchesInstanceDomain",
                "userLoginMustBeDomain",
                "validateOrgDomains"
            ],
            "inputProperties": {
                "smtpSenderAddressMatchesInstanceDomain": {
                    "type": "boolean"
                },
                "userLoginMustBeDomain": {
                    "type": "boolean",
                    "description": "User login must be domain\n"
                },
                "validateOrgDomains": {
                    "type": "boolean",
                    "description": "Validate organization domains\n"
                }
            },
            "requiredInputs": [
                "smtpSenderAddressMatchesInstanceDomain",
                "userLoginMustBeDomain",
                "validateOrgDomains"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultDomainPolicy resources.\n",
                "properties": {
                    "smtpSenderAddressMatchesInstanceDomain": {
                        "type": "boolean"
                    },
                    "userLoginMustBeDomain": {
                        "type": "boolean",
                        "description": "User login must be domain\n"
                    },
                    "validateOrgDomains": {
                        "type": "boolean",
                        "description": "Validate organization domains\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/defaultLabelPolicy:DefaultLabelPolicy": {
            "description": "Resource representing the default label policy.\n\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/defaultLabelPolicy:DefaultLabelPolicy imported ''\n```\n\n ",
            "properties": {
                "backgroundColor": {
                    "type": "string",
                    "description": "hex value for background color\n"
                },
                "backgroundColorDark": {
                    "type": "string",
                    "description": "hex value for background color dark theme\n"
                },
                "disableWatermark": {
                    "type": "boolean",
                    "description": "disable watermark\n"
                },
                "fontColor": {
                    "type": "string",
                    "description": "hex value for font color\n"
                },
                "fontColorDark": {
                    "type": "string",
                    "description": "hex value for font color dark theme\n"
                },
                "fontHash": {
                    "type": "string"
                },
                "fontPath": {
                    "type": "string"
                },
                "fontUrl": {
                    "type": "string"
                },
                "hideLoginNameSuffix": {
                    "type": "boolean",
                    "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set. Details about this scope in https://docs.zitadel.ch/concepts#Reserved_Scopes\n"
                },
                "iconDarkHash": {
                    "type": "string"
                },
                "iconDarkPath": {
                    "type": "string"
                },
                "iconHash": {
                    "type": "string"
                },
                "iconPath": {
                    "type": "string"
                },
                "iconUrl": {
                    "type": "string"
                },
                "iconUrlDark": {
                    "type": "string"
                },
                "logoDarkHash": {
                    "type": "string"
                },
                "logoDarkPath": {
                    "type": "string"
                },
                "logoHash": {
                    "type": "string"
                },
                "logoPath": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "logoUrlDark": {
                    "type": "string"
                },
                "primaryColor": {
                    "type": "string",
                    "description": "hex value for primary color\n"
                },
                "primaryColorDark": {
                    "type": "string",
                    "description": "hex value for primary color dark theme\n"
                },
                "setActive": {
                    "type": "boolean",
                    "description": "set the label policy active after creating/updating\n"
                },
                "warnColor": {
                    "type": "string",
                    "description": "hex value for warn color\n"
                },
                "warnColorDark": {
                    "type": "string",
                    "description": "hex value for warn color dark theme\n"
                }
            },
            "required": [
                "backgroundColor",
                "backgroundColorDark",
                "disableWatermark",
                "fontColor",
                "fontColorDark",
                "fontUrl",
                "hideLoginNameSuffix",
                "iconUrl",
                "iconUrlDark",
                "logoUrl",
                "logoUrlDark",
                "primaryColor",
                "primaryColorDark",
                "warnColor",
                "warnColorDark"
            ],
            "inputProperties": {
                "backgroundColor": {
                    "type": "string",
                    "description": "hex value for background color\n"
                },
                "backgroundColorDark": {
                    "type": "string",
                    "description": "hex value for background color dark theme\n"
                },
                "disableWatermark": {
                    "type": "boolean",
                    "description": "disable watermark\n"
                },
                "fontColor": {
                    "type": "string",
                    "description": "hex value for font color\n"
                },
                "fontColorDark": {
                    "type": "string",
                    "description": "hex value for font color dark theme\n"
                },
                "fontHash": {
                    "type": "string"
                },
                "fontPath": {
                    "type": "string"
                },
                "hideLoginNameSuffix": {
                    "type": "boolean",
                    "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set. Details about this scope in https://docs.zitadel.ch/concepts#Reserved_Scopes\n"
                },
                "iconDarkHash": {
                    "type": "string"
                },
                "iconDarkPath": {
                    "type": "string"
                },
                "iconHash": {
                    "type": "string"
                },
                "iconPath": {
                    "type": "string"
                },
                "logoDarkHash": {
                    "type": "string"
                },
                "logoDarkPath": {
                    "type": "string"
                },
                "logoHash": {
                    "type": "string"
                },
                "logoPath": {
                    "type": "string"
                },
                "primaryColor": {
                    "type": "string",
                    "description": "hex value for primary color\n"
                },
                "primaryColorDark": {
                    "type": "string",
                    "description": "hex value for primary color dark theme\n"
                },
                "setActive": {
                    "type": "boolean",
                    "description": "set the label policy active after creating/updating\n"
                },
                "warnColor": {
                    "type": "string",
                    "description": "hex value for warn color\n"
                },
                "warnColorDark": {
                    "type": "string",
                    "description": "hex value for warn color dark theme\n"
                }
            },
            "requiredInputs": [
                "backgroundColor",
                "backgroundColorDark",
                "disableWatermark",
                "fontColor",
                "fontColorDark",
                "hideLoginNameSuffix",
                "primaryColor",
                "primaryColorDark",
                "warnColor",
                "warnColorDark"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultLabelPolicy resources.\n",
                "properties": {
                    "backgroundColor": {
                        "type": "string",
                        "description": "hex value for background color\n"
                    },
                    "backgroundColorDark": {
                        "type": "string",
                        "description": "hex value for background color dark theme\n"
                    },
                    "disableWatermark": {
                        "type": "boolean",
                        "description": "disable watermark\n"
                    },
                    "fontColor": {
                        "type": "string",
                        "description": "hex value for font color\n"
                    },
                    "fontColorDark": {
                        "type": "string",
                        "description": "hex value for font color dark theme\n"
                    },
                    "fontHash": {
                        "type": "string"
                    },
                    "fontPath": {
                        "type": "string"
                    },
                    "fontUrl": {
                        "type": "string"
                    },
                    "hideLoginNameSuffix": {
                        "type": "boolean",
                        "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set. Details about this scope in https://docs.zitadel.ch/concepts#Reserved_Scopes\n"
                    },
                    "iconDarkHash": {
                        "type": "string"
                    },
                    "iconDarkPath": {
                        "type": "string"
                    },
                    "iconHash": {
                        "type": "string"
                    },
                    "iconPath": {
                        "type": "string"
                    },
                    "iconUrl": {
                        "type": "string"
                    },
                    "iconUrlDark": {
                        "type": "string"
                    },
                    "logoDarkHash": {
                        "type": "string"
                    },
                    "logoDarkPath": {
                        "type": "string"
                    },
                    "logoHash": {
                        "type": "string"
                    },
                    "logoPath": {
                        "type": "string"
                    },
                    "logoUrl": {
                        "type": "string"
                    },
                    "logoUrlDark": {
                        "type": "string"
                    },
                    "primaryColor": {
                        "type": "string",
                        "description": "hex value for primary color\n"
                    },
                    "primaryColorDark": {
                        "type": "string",
                        "description": "hex value for primary color dark theme\n"
                    },
                    "setActive": {
                        "type": "boolean",
                        "description": "set the label policy active after creating/updating\n"
                    },
                    "warnColor": {
                        "type": "string",
                        "description": "hex value for warn color\n"
                    },
                    "warnColorDark": {
                        "type": "string",
                        "description": "hex value for warn color dark theme\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/defaultLockoutPolicy:DefaultLockoutPolicy": {
            "description": "Resource representing the default lockout policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.DefaultLockoutPolicy(\"default\", {maxPasswordAttempts: 5});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.DefaultLockoutPolicy(\"default\", max_password_attempts=5)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.DefaultLockoutPolicy(\"default\", new()\n    {\n        MaxPasswordAttempts = 5,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDefaultLockoutPolicy(ctx, \"default\", \u0026zitadel.DefaultLockoutPolicyArgs{\n\t\t\tMaxPasswordAttempts: pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.DefaultLockoutPolicy;\nimport com.pulumi.zitadel.DefaultLockoutPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DefaultLockoutPolicy(\"default\", DefaultLockoutPolicyArgs.builder()        \n            .maxPasswordAttempts(\"5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:DefaultLockoutPolicy\n    properties:\n      maxPasswordAttempts: '5'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/defaultLockoutPolicy:DefaultLockoutPolicy imported ''\n```\n\n ",
            "properties": {
                "maxPasswordAttempts": {
                    "type": "integer",
                    "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correctly or the password is reset.\n"
                }
            },
            "required": [
                "maxPasswordAttempts"
            ],
            "inputProperties": {
                "maxPasswordAttempts": {
                    "type": "integer",
                    "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correctly or the password is reset.\n"
                }
            },
            "requiredInputs": [
                "maxPasswordAttempts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultLockoutPolicy resources.\n",
                "properties": {
                    "maxPasswordAttempts": {
                        "type": "integer",
                        "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correctly or the password is reset.\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/defaultLoginPolicy:DefaultLoginPolicy": {
            "description": "Resource representing the default login policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.DefaultLoginPolicy(\"default\", {\n    userLogin: true,\n    allowRegister: true,\n    allowExternalIdp: true,\n    forceMfa: false,\n    forceMfaLocalOnly: false,\n    passwordlessType: \"PASSWORDLESS_TYPE_ALLOWED\",\n    hidePasswordReset: false,\n    passwordCheckLifetime: \"240h0m0s\",\n    externalLoginCheckLifetime: \"240h0m0s\",\n    multiFactorCheckLifetime: \"24h0m0s\",\n    mfaInitSkipLifetime: \"720h0m0s\",\n    secondFactorCheckLifetime: \"24h0m0s\",\n    ignoreUnknownUsernames: true,\n    defaultRedirectUri: \"localhost:8080\",\n    secondFactors: [\n        \"SECOND_FACTOR_TYPE_OTP\",\n        \"SECOND_FACTOR_TYPE_U2F\",\n    ],\n    multiFactors: [\"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\"],\n    idps: [\n        data.zitadel_idp_google[\"default\"].id,\n        data.zitadel_idp_azure_ad[\"default\"].id,\n    ],\n    allowDomainDiscovery: true,\n    disableLoginWithEmail: true,\n    disableLoginWithPhone: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.DefaultLoginPolicy(\"default\",\n    user_login=True,\n    allow_register=True,\n    allow_external_idp=True,\n    force_mfa=False,\n    force_mfa_local_only=False,\n    passwordless_type=\"PASSWORDLESS_TYPE_ALLOWED\",\n    hide_password_reset=False,\n    password_check_lifetime=\"240h0m0s\",\n    external_login_check_lifetime=\"240h0m0s\",\n    multi_factor_check_lifetime=\"24h0m0s\",\n    mfa_init_skip_lifetime=\"720h0m0s\",\n    second_factor_check_lifetime=\"24h0m0s\",\n    ignore_unknown_usernames=True,\n    default_redirect_uri=\"localhost:8080\",\n    second_factors=[\n        \"SECOND_FACTOR_TYPE_OTP\",\n        \"SECOND_FACTOR_TYPE_U2F\",\n    ],\n    multi_factors=[\"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\"],\n    idps=[\n        data[\"zitadel_idp_google\"][\"default\"][\"id\"],\n        data[\"zitadel_idp_azure_ad\"][\"default\"][\"id\"],\n    ],\n    allow_domain_discovery=True,\n    disable_login_with_email=True,\n    disable_login_with_phone=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.DefaultLoginPolicy(\"default\", new()\n    {\n        UserLogin = true,\n        AllowRegister = true,\n        AllowExternalIdp = true,\n        ForceMfa = false,\n        ForceMfaLocalOnly = false,\n        PasswordlessType = \"PASSWORDLESS_TYPE_ALLOWED\",\n        HidePasswordReset = false,\n        PasswordCheckLifetime = \"240h0m0s\",\n        ExternalLoginCheckLifetime = \"240h0m0s\",\n        MultiFactorCheckLifetime = \"24h0m0s\",\n        MfaInitSkipLifetime = \"720h0m0s\",\n        SecondFactorCheckLifetime = \"24h0m0s\",\n        IgnoreUnknownUsernames = true,\n        DefaultRedirectUri = \"localhost:8080\",\n        SecondFactors = new[]\n        {\n            \"SECOND_FACTOR_TYPE_OTP\",\n            \"SECOND_FACTOR_TYPE_U2F\",\n        },\n        MultiFactors = new[]\n        {\n            \"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\",\n        },\n        Idps = new[]\n        {\n            data.Zitadel_idp_google.Default.Id,\n            data.Zitadel_idp_azure_ad.Default.Id,\n        },\n        AllowDomainDiscovery = true,\n        DisableLoginWithEmail = true,\n        DisableLoginWithPhone = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDefaultLoginPolicy(ctx, \"default\", \u0026zitadel.DefaultLoginPolicyArgs{\n\t\t\tUserLogin:                  pulumi.Bool(true),\n\t\t\tAllowRegister:              pulumi.Bool(true),\n\t\t\tAllowExternalIdp:           pulumi.Bool(true),\n\t\t\tForceMfa:                   pulumi.Bool(false),\n\t\t\tForceMfaLocalOnly:          pulumi.Bool(false),\n\t\t\tPasswordlessType:           pulumi.String(\"PASSWORDLESS_TYPE_ALLOWED\"),\n\t\t\tHidePasswordReset:          pulumi.Bool(false),\n\t\t\tPasswordCheckLifetime:      pulumi.String(\"240h0m0s\"),\n\t\t\tExternalLoginCheckLifetime: pulumi.String(\"240h0m0s\"),\n\t\t\tMultiFactorCheckLifetime:   pulumi.String(\"24h0m0s\"),\n\t\t\tMfaInitSkipLifetime:        pulumi.String(\"720h0m0s\"),\n\t\t\tSecondFactorCheckLifetime:  pulumi.String(\"24h0m0s\"),\n\t\t\tIgnoreUnknownUsernames:     pulumi.Bool(true),\n\t\t\tDefaultRedirectUri:         pulumi.String(\"localhost:8080\"),\n\t\t\tSecondFactors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SECOND_FACTOR_TYPE_OTP\"),\n\t\t\t\tpulumi.String(\"SECOND_FACTOR_TYPE_U2F\"),\n\t\t\t},\n\t\t\tMultiFactors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\"),\n\t\t\t},\n\t\t\tIdps: pulumi.StringArray{\n\t\t\t\tdata.Zitadel_idp_google.Default.Id,\n\t\t\t\tdata.Zitadel_idp_azure_ad.Default.Id,\n\t\t\t},\n\t\t\tAllowDomainDiscovery:  pulumi.Bool(true),\n\t\t\tDisableLoginWithEmail: pulumi.Bool(true),\n\t\t\tDisableLoginWithPhone: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.DefaultLoginPolicy;\nimport com.pulumi.zitadel.DefaultLoginPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DefaultLoginPolicy(\"default\", DefaultLoginPolicyArgs.builder()        \n            .userLogin(true)\n            .allowRegister(true)\n            .allowExternalIdp(true)\n            .forceMfa(false)\n            .forceMfaLocalOnly(false)\n            .passwordlessType(\"PASSWORDLESS_TYPE_ALLOWED\")\n            .hidePasswordReset(\"false\")\n            .passwordCheckLifetime(\"240h0m0s\")\n            .externalLoginCheckLifetime(\"240h0m0s\")\n            .multiFactorCheckLifetime(\"24h0m0s\")\n            .mfaInitSkipLifetime(\"720h0m0s\")\n            .secondFactorCheckLifetime(\"24h0m0s\")\n            .ignoreUnknownUsernames(true)\n            .defaultRedirectUri(\"localhost:8080\")\n            .secondFactors(            \n                \"SECOND_FACTOR_TYPE_OTP\",\n                \"SECOND_FACTOR_TYPE_U2F\")\n            .multiFactors(\"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\")\n            .idps(            \n                data.zitadel_idp_google().default().id(),\n                data.zitadel_idp_azure_ad().default().id())\n            .allowDomainDiscovery(true)\n            .disableLoginWithEmail(true)\n            .disableLoginWithPhone(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:DefaultLoginPolicy\n    properties:\n      userLogin: true\n      allowRegister: true\n      allowExternalIdp: true\n      forceMfa: false\n      forceMfaLocalOnly: false\n      passwordlessType: PASSWORDLESS_TYPE_ALLOWED\n      hidePasswordReset: 'false'\n      passwordCheckLifetime: 240h0m0s\n      externalLoginCheckLifetime: 240h0m0s\n      multiFactorCheckLifetime: 24h0m0s\n      mfaInitSkipLifetime: 720h0m0s\n      secondFactorCheckLifetime: 24h0m0s\n      ignoreUnknownUsernames: true\n      defaultRedirectUri: localhost:8080\n      secondFactors:\n        - SECOND_FACTOR_TYPE_OTP\n        - SECOND_FACTOR_TYPE_U2F\n      multiFactors:\n        - MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\n      idps:\n        - ${data.zitadel_idp_google.default.id}\n        - ${data.zitadel_idp_azure_ad.default.id}\n      allowDomainDiscovery: true\n      disableLoginWithEmail: true\n      disableLoginWithPhone: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/defaultLoginPolicy:DefaultLoginPolicy imported ''\n```\n\n ",
            "properties": {
                "allowDomainDiscovery": {
                    "type": "boolean",
                    "description": "if set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organisation on success.\n"
                },
                "allowExternalIdp": {
                    "type": "boolean",
                    "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth\n"
                },
                "allowRegister": {
                    "type": "boolean",
                    "description": "defines if a person is allowed to register a user on this organisation\n"
                },
                "defaultRedirectUri": {
                    "type": "string",
                    "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)\n"
                },
                "disableLoginWithEmail": {
                    "type": "boolean",
                    "description": "defines if user can additionally (to the loginname) be identified by their verified email address\n"
                },
                "disableLoginWithPhone": {
                    "type": "boolean",
                    "description": "defines if user can additionally (to the loginname) be identified by their verified phone number\n"
                },
                "externalLoginCheckLifetime": {
                    "type": "string"
                },
                "forceMfa": {
                    "type": "boolean",
                    "description": "defines if a user MUST use a multi factor to log in\n"
                },
                "forceMfaLocalOnly": {
                    "type": "boolean",
                    "description": "if activated, ZITADEL only enforces MFA on local authentications. On authentications through MFA, ZITADEL won't prompt for MFA.\n"
                },
                "hidePasswordReset": {
                    "type": "boolean",
                    "description": "defines if password reset link should be shown in the login screen\n"
                },
                "idps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed idps to login or register\n"
                },
                "ignoreUnknownUsernames": {
                    "type": "boolean",
                    "description": "defines if unknown username on login screen directly return an error or always display the password screen\n"
                },
                "mfaInitSkipLifetime": {
                    "type": "string"
                },
                "multiFactorCheckLifetime": {
                    "type": "string"
                },
                "multiFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed multi factors\n"
                },
                "passwordCheckLifetime": {
                    "type": "string"
                },
                "passwordlessType": {
                    "type": "string",
                    "description": "defines if passwordless is allowed for users\n"
                },
                "secondFactorCheckLifetime": {
                    "type": "string"
                },
                "secondFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed second factors\n"
                },
                "userLogin": {
                    "type": "boolean",
                    "description": "defines if a user is allowed to login with his username and password\n"
                }
            },
            "required": [
                "allowExternalIdp",
                "allowRegister",
                "defaultRedirectUri",
                "externalLoginCheckLifetime",
                "forceMfa",
                "forceMfaLocalOnly",
                "hidePasswordReset",
                "ignoreUnknownUsernames",
                "mfaInitSkipLifetime",
                "multiFactorCheckLifetime",
                "passwordCheckLifetime",
                "passwordlessType",
                "secondFactorCheckLifetime",
                "userLogin"
            ],
            "inputProperties": {
                "allowDomainDiscovery": {
                    "type": "boolean",
                    "description": "if set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organisation on success.\n"
                },
                "allowExternalIdp": {
                    "type": "boolean",
                    "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth\n"
                },
                "allowRegister": {
                    "type": "boolean",
                    "description": "defines if a person is allowed to register a user on this organisation\n"
                },
                "defaultRedirectUri": {
                    "type": "string",
                    "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)\n"
                },
                "disableLoginWithEmail": {
                    "type": "boolean",
                    "description": "defines if user can additionally (to the loginname) be identified by their verified email address\n"
                },
                "disableLoginWithPhone": {
                    "type": "boolean",
                    "description": "defines if user can additionally (to the loginname) be identified by their verified phone number\n"
                },
                "externalLoginCheckLifetime": {
                    "type": "string"
                },
                "forceMfa": {
                    "type": "boolean",
                    "description": "defines if a user MUST use a multi factor to log in\n"
                },
                "forceMfaLocalOnly": {
                    "type": "boolean",
                    "description": "if activated, ZITADEL only enforces MFA on local authentications. On authentications through MFA, ZITADEL won't prompt for MFA.\n"
                },
                "hidePasswordReset": {
                    "type": "boolean",
                    "description": "defines if password reset link should be shown in the login screen\n"
                },
                "idps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed idps to login or register\n"
                },
                "ignoreUnknownUsernames": {
                    "type": "boolean",
                    "description": "defines if unknown username on login screen directly return an error or always display the password screen\n"
                },
                "mfaInitSkipLifetime": {
                    "type": "string"
                },
                "multiFactorCheckLifetime": {
                    "type": "string"
                },
                "multiFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed multi factors\n"
                },
                "passwordCheckLifetime": {
                    "type": "string"
                },
                "passwordlessType": {
                    "type": "string",
                    "description": "defines if passwordless is allowed for users\n"
                },
                "secondFactorCheckLifetime": {
                    "type": "string"
                },
                "secondFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed second factors\n"
                },
                "userLogin": {
                    "type": "boolean",
                    "description": "defines if a user is allowed to login with his username and password\n"
                }
            },
            "requiredInputs": [
                "allowExternalIdp",
                "allowRegister",
                "defaultRedirectUri",
                "externalLoginCheckLifetime",
                "forceMfa",
                "forceMfaLocalOnly",
                "hidePasswordReset",
                "ignoreUnknownUsernames",
                "mfaInitSkipLifetime",
                "multiFactorCheckLifetime",
                "passwordCheckLifetime",
                "passwordlessType",
                "secondFactorCheckLifetime",
                "userLogin"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultLoginPolicy resources.\n",
                "properties": {
                    "allowDomainDiscovery": {
                        "type": "boolean",
                        "description": "if set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organisation on success.\n"
                    },
                    "allowExternalIdp": {
                        "type": "boolean",
                        "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth\n"
                    },
                    "allowRegister": {
                        "type": "boolean",
                        "description": "defines if a person is allowed to register a user on this organisation\n"
                    },
                    "defaultRedirectUri": {
                        "type": "string",
                        "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)\n"
                    },
                    "disableLoginWithEmail": {
                        "type": "boolean",
                        "description": "defines if user can additionally (to the loginname) be identified by their verified email address\n"
                    },
                    "disableLoginWithPhone": {
                        "type": "boolean",
                        "description": "defines if user can additionally (to the loginname) be identified by their verified phone number\n"
                    },
                    "externalLoginCheckLifetime": {
                        "type": "string"
                    },
                    "forceMfa": {
                        "type": "boolean",
                        "description": "defines if a user MUST use a multi factor to log in\n"
                    },
                    "forceMfaLocalOnly": {
                        "type": "boolean",
                        "description": "if activated, ZITADEL only enforces MFA on local authentications. On authentications through MFA, ZITADEL won't prompt for MFA.\n"
                    },
                    "hidePasswordReset": {
                        "type": "boolean",
                        "description": "defines if password reset link should be shown in the login screen\n"
                    },
                    "idps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "allowed idps to login or register\n"
                    },
                    "ignoreUnknownUsernames": {
                        "type": "boolean",
                        "description": "defines if unknown username on login screen directly return an error or always display the password screen\n"
                    },
                    "mfaInitSkipLifetime": {
                        "type": "string"
                    },
                    "multiFactorCheckLifetime": {
                        "type": "string"
                    },
                    "multiFactors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "allowed multi factors\n"
                    },
                    "passwordCheckLifetime": {
                        "type": "string"
                    },
                    "passwordlessType": {
                        "type": "string",
                        "description": "defines if passwordless is allowed for users\n"
                    },
                    "secondFactorCheckLifetime": {
                        "type": "string"
                    },
                    "secondFactors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "allowed second factors\n"
                    },
                    "userLogin": {
                        "type": "boolean",
                        "description": "defines if a user is allowed to login with his username and password\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/defaultNotificationPolicy:DefaultNotificationPolicy": {
            "description": "Resource representing the default notification policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.DefaultNotificationPolicy(\"default\", {passwordChange: false});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.DefaultNotificationPolicy(\"default\", password_change=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.DefaultNotificationPolicy(\"default\", new()\n    {\n        PasswordChange = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDefaultNotificationPolicy(ctx, \"default\", \u0026zitadel.DefaultNotificationPolicyArgs{\n\t\t\tPasswordChange: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.DefaultNotificationPolicy;\nimport com.pulumi.zitadel.DefaultNotificationPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DefaultNotificationPolicy(\"default\", DefaultNotificationPolicyArgs.builder()        \n            .passwordChange(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:DefaultNotificationPolicy\n    properties:\n      passwordChange: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/defaultNotificationPolicy:DefaultNotificationPolicy imported ''\n```\n\n ",
            "properties": {
                "passwordChange": {
                    "type": "boolean",
                    "description": "Send notification if a user changes his password\n"
                }
            },
            "required": [
                "passwordChange"
            ],
            "inputProperties": {
                "passwordChange": {
                    "type": "boolean",
                    "description": "Send notification if a user changes his password\n"
                }
            },
            "requiredInputs": [
                "passwordChange"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultNotificationPolicy resources.\n",
                "properties": {
                    "passwordChange": {
                        "type": "boolean",
                        "description": "Send notification if a user changes his password\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/defaultOidcSettings:DefaultOidcSettings": {
            "description": "Resource representing the default oidc settings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.DefaultOidcSettings(\"default\", {\n    accessTokenLifetime: \"12h0m0s\",\n    idTokenLifetime: \"12h0m0s\",\n    refreshTokenExpiration: \"720h0m0s\",\n    refreshTokenIdleExpiration: \"2160h0m0s\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.DefaultOidcSettings(\"default\",\n    access_token_lifetime=\"12h0m0s\",\n    id_token_lifetime=\"12h0m0s\",\n    refresh_token_expiration=\"720h0m0s\",\n    refresh_token_idle_expiration=\"2160h0m0s\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.DefaultOidcSettings(\"default\", new()\n    {\n        AccessTokenLifetime = \"12h0m0s\",\n        IdTokenLifetime = \"12h0m0s\",\n        RefreshTokenExpiration = \"720h0m0s\",\n        RefreshTokenIdleExpiration = \"2160h0m0s\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDefaultOidcSettings(ctx, \"default\", \u0026zitadel.DefaultOidcSettingsArgs{\n\t\t\tAccessTokenLifetime:        pulumi.String(\"12h0m0s\"),\n\t\t\tIdTokenLifetime:            pulumi.String(\"12h0m0s\"),\n\t\t\tRefreshTokenExpiration:     pulumi.String(\"720h0m0s\"),\n\t\t\tRefreshTokenIdleExpiration: pulumi.String(\"2160h0m0s\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.DefaultOidcSettings;\nimport com.pulumi.zitadel.DefaultOidcSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DefaultOidcSettings(\"default\", DefaultOidcSettingsArgs.builder()        \n            .accessTokenLifetime(\"12h0m0s\")\n            .idTokenLifetime(\"12h0m0s\")\n            .refreshTokenExpiration(\"720h0m0s\")\n            .refreshTokenIdleExpiration(\"2160h0m0s\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:DefaultOidcSettings\n    properties:\n      accessTokenLifetime: 12h0m0s\n      idTokenLifetime: 12h0m0s\n      refreshTokenExpiration: 720h0m0s\n      refreshTokenIdleExpiration: 2160h0m0s\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessTokenLifetime": {
                    "type": "string",
                    "description": "lifetime duration of access tokens\n"
                },
                "idTokenLifetime": {
                    "type": "string",
                    "description": "lifetime duration of id tokens\n"
                },
                "refreshTokenExpiration": {
                    "type": "string",
                    "description": "expiration duration of refresh tokens\n"
                },
                "refreshTokenIdleExpiration": {
                    "type": "string",
                    "description": "expiration duration of idle refresh tokens\n"
                }
            },
            "required": [
                "accessTokenLifetime",
                "idTokenLifetime",
                "refreshTokenExpiration",
                "refreshTokenIdleExpiration"
            ],
            "inputProperties": {
                "accessTokenLifetime": {
                    "type": "string",
                    "description": "lifetime duration of access tokens\n"
                },
                "idTokenLifetime": {
                    "type": "string",
                    "description": "lifetime duration of id tokens\n"
                },
                "refreshTokenExpiration": {
                    "type": "string",
                    "description": "expiration duration of refresh tokens\n"
                },
                "refreshTokenIdleExpiration": {
                    "type": "string",
                    "description": "expiration duration of idle refresh tokens\n"
                }
            },
            "requiredInputs": [
                "accessTokenLifetime",
                "idTokenLifetime",
                "refreshTokenExpiration",
                "refreshTokenIdleExpiration"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultOidcSettings resources.\n",
                "properties": {
                    "accessTokenLifetime": {
                        "type": "string",
                        "description": "lifetime duration of access tokens\n"
                    },
                    "idTokenLifetime": {
                        "type": "string",
                        "description": "lifetime duration of id tokens\n"
                    },
                    "refreshTokenExpiration": {
                        "type": "string",
                        "description": "expiration duration of refresh tokens\n"
                    },
                    "refreshTokenIdleExpiration": {
                        "type": "string",
                        "description": "expiration duration of idle refresh tokens\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/defaultPasswordComplexityPolicy:DefaultPasswordComplexityPolicy": {
            "description": "Resource representing the default password complexity policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.DefaultPasswordComplexityPolicy(\"default\", {\n    hasLowercase: true,\n    hasNumber: true,\n    hasSymbol: true,\n    hasUppercase: true,\n    minLength: 8,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.DefaultPasswordComplexityPolicy(\"default\",\n    has_lowercase=True,\n    has_number=True,\n    has_symbol=True,\n    has_uppercase=True,\n    min_length=8)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.DefaultPasswordComplexityPolicy(\"default\", new()\n    {\n        HasLowercase = true,\n        HasNumber = true,\n        HasSymbol = true,\n        HasUppercase = true,\n        MinLength = 8,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDefaultPasswordComplexityPolicy(ctx, \"default\", \u0026zitadel.DefaultPasswordComplexityPolicyArgs{\n\t\t\tHasLowercase: pulumi.Bool(true),\n\t\t\tHasNumber:    pulumi.Bool(true),\n\t\t\tHasSymbol:    pulumi.Bool(true),\n\t\t\tHasUppercase: pulumi.Bool(true),\n\t\t\tMinLength:    pulumi.Int(8),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.DefaultPasswordComplexityPolicy;\nimport com.pulumi.zitadel.DefaultPasswordComplexityPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DefaultPasswordComplexityPolicy(\"default\", DefaultPasswordComplexityPolicyArgs.builder()        \n            .hasLowercase(true)\n            .hasNumber(true)\n            .hasSymbol(true)\n            .hasUppercase(true)\n            .minLength(\"8\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:DefaultPasswordComplexityPolicy\n    properties:\n      hasLowercase: true\n      hasNumber: true\n      hasSymbol: true\n      hasUppercase: true\n      minLength: '8'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/defaultPasswordComplexityPolicy:DefaultPasswordComplexityPolicy imported ''\n```\n\n ",
            "properties": {
                "hasLowercase": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a lower case letter\n"
                },
                "hasNumber": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a number\n"
                },
                "hasSymbol": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a symbol. E.g. \"$\"\n"
                },
                "hasUppercase": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain an upper case letter\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Minimal length for the password\n"
                }
            },
            "required": [
                "hasLowercase",
                "hasNumber",
                "hasSymbol",
                "hasUppercase",
                "minLength"
            ],
            "inputProperties": {
                "hasLowercase": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a lower case letter\n"
                },
                "hasNumber": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a number\n"
                },
                "hasSymbol": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a symbol. E.g. \"$\"\n"
                },
                "hasUppercase": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain an upper case letter\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Minimal length for the password\n"
                }
            },
            "requiredInputs": [
                "hasLowercase",
                "hasNumber",
                "hasSymbol",
                "hasUppercase",
                "minLength"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultPasswordComplexityPolicy resources.\n",
                "properties": {
                    "hasLowercase": {
                        "type": "boolean",
                        "description": "defines if the password MUST contain a lower case letter\n"
                    },
                    "hasNumber": {
                        "type": "boolean",
                        "description": "defines if the password MUST contain a number\n"
                    },
                    "hasSymbol": {
                        "type": "boolean",
                        "description": "defines if the password MUST contain a symbol. E.g. \"$\"\n"
                    },
                    "hasUppercase": {
                        "type": "boolean",
                        "description": "defines if the password MUST contain an upper case letter\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "Minimal length for the password\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/defaultPrivacyPolicy:DefaultPrivacyPolicy": {
            "description": "Resource representing the default privacy policy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.DefaultPrivacyPolicy(\"default\", {\n    helpLink: \"https://example.com/help\",\n    privacyLink: \"https://example.com/privacy\",\n    supportEmail: \"support@example.com\",\n    tosLink: \"https://example.com/tos\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.DefaultPrivacyPolicy(\"default\",\n    help_link=\"https://example.com/help\",\n    privacy_link=\"https://example.com/privacy\",\n    support_email=\"support@example.com\",\n    tos_link=\"https://example.com/tos\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.DefaultPrivacyPolicy(\"default\", new()\n    {\n        HelpLink = \"https://example.com/help\",\n        PrivacyLink = \"https://example.com/privacy\",\n        SupportEmail = \"support@example.com\",\n        TosLink = \"https://example.com/tos\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDefaultPrivacyPolicy(ctx, \"default\", \u0026zitadel.DefaultPrivacyPolicyArgs{\n\t\t\tHelpLink:     pulumi.String(\"https://example.com/help\"),\n\t\t\tPrivacyLink:  pulumi.String(\"https://example.com/privacy\"),\n\t\t\tSupportEmail: pulumi.String(\"support@example.com\"),\n\t\t\tTosLink:      pulumi.String(\"https://example.com/tos\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.DefaultPrivacyPolicy;\nimport com.pulumi.zitadel.DefaultPrivacyPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DefaultPrivacyPolicy(\"default\", DefaultPrivacyPolicyArgs.builder()        \n            .helpLink(\"https://example.com/help\")\n            .privacyLink(\"https://example.com/privacy\")\n            .supportEmail(\"support@example.com\")\n            .tosLink(\"https://example.com/tos\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:DefaultPrivacyPolicy\n    properties:\n      helpLink: https://example.com/help\n      privacyLink: https://example.com/privacy\n      supportEmail: support@example.com\n      tosLink: https://example.com/tos\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/defaultPrivacyPolicy:DefaultPrivacyPolicy imported ''\n```\n\n ",
            "properties": {
                "helpLink": {
                    "type": "string"
                },
                "privacyLink": {
                    "type": "string"
                },
                "supportEmail": {
                    "type": "string"
                },
                "tosLink": {
                    "type": "string"
                }
            },
            "inputProperties": {
                "helpLink": {
                    "type": "string"
                },
                "privacyLink": {
                    "type": "string"
                },
                "supportEmail": {
                    "type": "string"
                },
                "tosLink": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultPrivacyPolicy resources.\n",
                "properties": {
                    "helpLink": {
                        "type": "string"
                    },
                    "privacyLink": {
                        "type": "string"
                    },
                    "supportEmail": {
                        "type": "string"
                    },
                    "tosLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/domain:Domain": {
            "description": "Resource representing a domain of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.Domain(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    isPrimary: false,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.Domain(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    is_primary=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.Domain(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        IsPrimary = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDomain(ctx, \"default\", \u0026zitadel.DomainArgs{\n\t\t\tOrgId:     pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tIsPrimary: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.Domain;\nimport com.pulumi.zitadel.DomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Domain(\"default\", DomainArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .isPrimary(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:Domain\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      isPrimary: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `name[:org_id]`, e.g.\n\n```sh\n $ pulumi import zitadel:index/domain:Domain imported 'example.com:123456789012345678'\n```\n\n ",
            "properties": {
                "isPrimary": {
                    "type": "boolean",
                    "description": "Is domain primary\n"
                },
                "isVerified": {
                    "type": "boolean",
                    "description": "Is domain verified\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the domain\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "validationType": {
                    "type": "integer",
                    "description": "Validation type\n"
                }
            },
            "required": [
                "isVerified",
                "name",
                "validationType"
            ],
            "inputProperties": {
                "isPrimary": {
                    "type": "boolean",
                    "description": "Is domain primary\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the domain\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "isPrimary": {
                        "type": "boolean",
                        "description": "Is domain primary\n"
                    },
                    "isVerified": {
                        "type": "boolean",
                        "description": "Is domain verified\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the domain\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "validationType": {
                        "type": "integer",
                        "description": "Validation type\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/domainPolicy:DomainPolicy": {
            "description": "Resource representing the custom domain policy of an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.DomainPolicy(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    userLoginMustBeDomain: false,\n    validateOrgDomains: true,\n    smtpSenderAddressMatchesInstanceDomain: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.DomainPolicy(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_login_must_be_domain=False,\n    validate_org_domains=True,\n    smtp_sender_address_matches_instance_domain=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.DomainPolicy(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserLoginMustBeDomain = false,\n        ValidateOrgDomains = true,\n        SmtpSenderAddressMatchesInstanceDomain = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewDomainPolicy(ctx, \"default\", \u0026zitadel.DomainPolicyArgs{\n\t\t\tOrgId:                                  pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tUserLoginMustBeDomain:                  pulumi.Bool(false),\n\t\t\tValidateOrgDomains:                     pulumi.Bool(true),\n\t\t\tSmtpSenderAddressMatchesInstanceDomain: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.DomainPolicy;\nimport com.pulumi.zitadel.DomainPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new DomainPolicy(\"default\", DomainPolicyArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .userLoginMustBeDomain(false)\n            .validateOrgDomains(true)\n            .smtpSenderAddressMatchesInstanceDomain(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:DomainPolicy\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      userLoginMustBeDomain: false\n      validateOrgDomains: true\n      smtpSenderAddressMatchesInstanceDomain: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c[org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/domainPolicy:DomainPolicy imported '123456789012345678'\n```\n\n ",
            "properties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "smtpSenderAddressMatchesInstanceDomain": {
                    "type": "boolean"
                },
                "userLoginMustBeDomain": {
                    "type": "boolean",
                    "description": "User login must be domain\n"
                },
                "validateOrgDomains": {
                    "type": "boolean",
                    "description": "Validate organization domains\n"
                }
            },
            "required": [
                "smtpSenderAddressMatchesInstanceDomain",
                "userLoginMustBeDomain",
                "validateOrgDomains"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "smtpSenderAddressMatchesInstanceDomain": {
                    "type": "boolean"
                },
                "userLoginMustBeDomain": {
                    "type": "boolean",
                    "description": "User login must be domain\n"
                },
                "validateOrgDomains": {
                    "type": "boolean",
                    "description": "Validate organization domains\n"
                }
            },
            "requiredInputs": [
                "smtpSenderAddressMatchesInstanceDomain",
                "userLoginMustBeDomain",
                "validateOrgDomains"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainPolicy resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "smtpSenderAddressMatchesInstanceDomain": {
                        "type": "boolean"
                    },
                    "userLoginMustBeDomain": {
                        "type": "boolean",
                        "description": "User login must be domain\n"
                    },
                    "validateOrgDomains": {
                        "type": "boolean",
                        "description": "Validate organization domains\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/humanUser:HumanUser": {
            "description": "**Caution: Email can only be set verified if a password is set for the user, either with initial_password or during runtime**\n\nResource representing a human user situated under an organization, which then can be authorized through memberships or direct grants on other resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.HumanUser(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    userName: \"humanfull@localhost.com\",\n    firstName: \"firstname\",\n    lastName: \"lastname\",\n    nickName: \"nickname\",\n    displayName: \"displayname\",\n    preferredLanguage: \"de\",\n    gender: \"GENDER_MALE\",\n    phone: \"+41799999999\",\n    isPhoneVerified: true,\n    email: \"test@zitadel.com\",\n    isEmailVerified: true,\n    initialPassword: \"Password1!\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.HumanUser(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_name=\"humanfull@localhost.com\",\n    first_name=\"firstname\",\n    last_name=\"lastname\",\n    nick_name=\"nickname\",\n    display_name=\"displayname\",\n    preferred_language=\"de\",\n    gender=\"GENDER_MALE\",\n    phone=\"+41799999999\",\n    is_phone_verified=True,\n    email=\"test@zitadel.com\",\n    is_email_verified=True,\n    initial_password=\"Password1!\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.HumanUser(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserName = \"humanfull@localhost.com\",\n        FirstName = \"firstname\",\n        LastName = \"lastname\",\n        NickName = \"nickname\",\n        DisplayName = \"displayname\",\n        PreferredLanguage = \"de\",\n        Gender = \"GENDER_MALE\",\n        Phone = \"+41799999999\",\n        IsPhoneVerified = true,\n        Email = \"test@zitadel.com\",\n        IsEmailVerified = true,\n        InitialPassword = \"Password1!\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewHumanUser(ctx, \"default\", \u0026zitadel.HumanUserArgs{\n\t\t\tOrgId:             pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tUserName:          pulumi.String(\"humanfull@localhost.com\"),\n\t\t\tFirstName:         pulumi.String(\"firstname\"),\n\t\t\tLastName:          pulumi.String(\"lastname\"),\n\t\t\tNickName:          pulumi.String(\"nickname\"),\n\t\t\tDisplayName:       pulumi.String(\"displayname\"),\n\t\t\tPreferredLanguage: pulumi.String(\"de\"),\n\t\t\tGender:            pulumi.String(\"GENDER_MALE\"),\n\t\t\tPhone:             pulumi.String(\"+41799999999\"),\n\t\t\tIsPhoneVerified:   pulumi.Bool(true),\n\t\t\tEmail:             pulumi.String(\"test@zitadel.com\"),\n\t\t\tIsEmailVerified:   pulumi.Bool(true),\n\t\t\tInitialPassword:   pulumi.String(\"Password1!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.HumanUser;\nimport com.pulumi.zitadel.HumanUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new HumanUser(\"default\", HumanUserArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .userName(\"humanfull@localhost.com\")\n            .firstName(\"firstname\")\n            .lastName(\"lastname\")\n            .nickName(\"nickname\")\n            .displayName(\"displayname\")\n            .preferredLanguage(\"de\")\n            .gender(\"GENDER_MALE\")\n            .phone(\"+41799999999\")\n            .isPhoneVerified(true)\n            .email(\"test@zitadel.com\")\n            .isEmailVerified(true)\n            .initialPassword(\"Password1!\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:HumanUser\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      userName: humanfull@localhost.com\n      firstName: firstname\n      lastName: lastname\n      nickName: nickname\n      displayName: displayname\n      preferredLanguage: de\n      gender: GENDER_MALE\n      phone: '+41799999999'\n      isPhoneVerified: true\n      email: test@zitadel.com\n      isEmailVerified: true\n      initialPassword: Password1!\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `id[:org_id][:initial_password]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/humanUser:HumanUser imported '123456789012345678:123456789012345678:Password1!'\n```\n\n ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Display name of the user\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the user\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user\n"
                },
                "gender": {
                    "type": "string",
                    "description": "Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE\n"
                },
                "initialPassword": {
                    "type": "string",
                    "description": "Initially set password for the user, not changeable after creation\n",
                    "secret": true
                },
                "isEmailVerified": {
                    "type": "boolean",
                    "description": "Is the email verified of the user, can only be true if password of the user is set\n"
                },
                "isPhoneVerified": {
                    "type": "boolean",
                    "description": "Is the phone verified of the user\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user\n"
                },
                "loginNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Loginnames\n"
                },
                "nickName": {
                    "type": "string",
                    "description": "Nick name of the user\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "phone": {
                    "type": "string",
                    "description": "Phone of the user\n"
                },
                "preferredLanguage": {
                    "type": "string",
                    "description": "Preferred language of the user\n"
                },
                "preferredLoginName": {
                    "type": "string",
                    "description": "Preferred login name\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the user\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Username\n"
                }
            },
            "required": [
                "displayName",
                "email",
                "firstName",
                "lastName",
                "loginNames",
                "preferredLoginName",
                "state",
                "userName"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "Display name of the user\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the user\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user\n"
                },
                "gender": {
                    "type": "string",
                    "description": "Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE\n"
                },
                "initialPassword": {
                    "type": "string",
                    "description": "Initially set password for the user, not changeable after creation\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "isEmailVerified": {
                    "type": "boolean",
                    "description": "Is the email verified of the user, can only be true if password of the user is set\n"
                },
                "isPhoneVerified": {
                    "type": "boolean",
                    "description": "Is the phone verified of the user\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "Last name of the user\n"
                },
                "nickName": {
                    "type": "string",
                    "description": "Nick name of the user\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "phone": {
                    "type": "string",
                    "description": "Phone of the user\n"
                },
                "preferredLanguage": {
                    "type": "string",
                    "description": "Preferred language of the user\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Username\n"
                }
            },
            "requiredInputs": [
                "email",
                "firstName",
                "lastName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HumanUser resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the user\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the user\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the user\n"
                    },
                    "gender": {
                        "type": "string",
                        "description": "Gender of the user, supported values: GENDER*UNSPECIFIED, GENDER*FEMALE, GENDER*MALE, GENDER*DIVERSE\n"
                    },
                    "initialPassword": {
                        "type": "string",
                        "description": "Initially set password for the user, not changeable after creation\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Is the email verified of the user, can only be true if password of the user is set\n"
                    },
                    "isPhoneVerified": {
                        "type": "boolean",
                        "description": "Is the phone verified of the user\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the user\n"
                    },
                    "loginNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Loginnames\n",
                        "willReplaceOnChanges": true
                    },
                    "nickName": {
                        "type": "string",
                        "description": "Nick name of the user\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone of the user\n"
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "Preferred language of the user\n"
                    },
                    "preferredLoginName": {
                        "type": "string",
                        "description": "Preferred login name\n",
                        "willReplaceOnChanges": true
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the user\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Username\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/idpAzureAd:IdpAzureAd": {
            "description": "Resource representing an Azure AD IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.IdpAzureAd(\"default\", {\n    clientId: \"9065bfc8-a08a...\",\n    clientSecret: \"H2n***\",\n    emailVerified: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n    isCreationAllowed: true,\n    isLinkingAllowed: false,\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n        \"User.Read\",\n    ],\n    tenantType: \"AZURE_AD_TENANT_TYPE_ORGANISATIONS\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.IdpAzureAd(\"default\",\n    client_id=\"9065bfc8-a08a...\",\n    client_secret=\"H2n***\",\n    email_verified=True,\n    is_auto_creation=False,\n    is_auto_update=True,\n    is_creation_allowed=True,\n    is_linking_allowed=False,\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n        \"User.Read\",\n    ],\n    tenant_type=\"AZURE_AD_TENANT_TYPE_ORGANISATIONS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.IdpAzureAd(\"default\", new()\n    {\n        ClientId = \"9065bfc8-a08a...\",\n        ClientSecret = \"H2n***\",\n        EmailVerified = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n        IsCreationAllowed = true,\n        IsLinkingAllowed = false,\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n            \"User.Read\",\n        },\n        TenantType = \"AZURE_AD_TENANT_TYPE_ORGANISATIONS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewIdpAzureAd(ctx, \"default\", \u0026zitadel.IdpAzureAdArgs{\n\t\t\tClientId:          pulumi.String(\"9065bfc8-a08a...\"),\n\t\t\tClientSecret:      pulumi.String(\"H2n***\"),\n\t\t\tEmailVerified:     pulumi.Bool(true),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\tpulumi.String(\"User.Read\"),\n\t\t\t},\n\t\t\tTenantType: pulumi.String(\"AZURE_AD_TENANT_TYPE_ORGANISATIONS\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.IdpAzureAd;\nimport com.pulumi.zitadel.IdpAzureAdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new IdpAzureAd(\"default\", IdpAzureAdArgs.builder()        \n            .clientId(\"9065bfc8-a08a...\")\n            .clientSecret(\"H2n***\")\n            .emailVerified(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .isCreationAllowed(true)\n            .isLinkingAllowed(false)\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\",\n                \"User.Read\")\n            .tenantType(\"AZURE_AD_TENANT_TYPE_ORGANISATIONS\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:IdpAzureAd\n    properties:\n      clientId: 9065bfc8-a08a...\n      clientSecret: H2n***\n      emailVerified: true\n      isAutoCreation: false\n      isAutoUpdate: true\n      isCreationAllowed: true\n      isLinkingAllowed: false\n      scopes:\n        - openid\n        - profile\n        - email\n        - User.Read\n      tenantType: AZURE_AD_TENANT_TYPE_ORGANISATIONS\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/idpAzureAd:IdpAzureAd imported '123456789012345678:12345678-1234-1234-1234-123456789012'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "emailVerified": {
                    "type": "boolean",
                    "description": "automatically mark emails as verified\n"
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "if tenant*id is not set, the tenant*type is used\n"
                },
                "tenantType": {
                    "type": "string",
                    "description": "the azure ad tenant type\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "emailVerified",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "emailVerified": {
                    "type": "boolean",
                    "description": "automatically mark emails as verified\n"
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "if tenant*id is not set, the tenant*type is used\n"
                },
                "tenantType": {
                    "type": "string",
                    "description": "the azure ad tenant type\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "emailVerified",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdpAzureAd resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "automatically mark emails as verified\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "if tenant*id is not set, the tenant*type is used\n"
                    },
                    "tenantType": {
                        "type": "string",
                        "description": "the azure ad tenant type\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/idpGithub:IdpGithub": {
            "description": "Resource representing a GitHub IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.IdpGithub(\"default\", {\n    clientId: \"86a165...\",\n    clientSecret: \"*****afdbac18\",\n    isAutoCreation: false,\n    isAutoUpdate: true,\n    isCreationAllowed: true,\n    isLinkingAllowed: false,\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.IdpGithub(\"default\",\n    client_id=\"86a165...\",\n    client_secret=\"*****afdbac18\",\n    is_auto_creation=False,\n    is_auto_update=True,\n    is_creation_allowed=True,\n    is_linking_allowed=False,\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.IdpGithub(\"default\", new()\n    {\n        ClientId = \"86a165...\",\n        ClientSecret = \"*****afdbac18\",\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n        IsCreationAllowed = true,\n        IsLinkingAllowed = false,\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewIdpGithub(ctx, \"default\", \u0026zitadel.IdpGithubArgs{\n\t\t\tClientId:          pulumi.String(\"86a165...\"),\n\t\t\tClientSecret:      pulumi.String(\"*****afdbac18\"),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.IdpGithub;\nimport com.pulumi.zitadel.IdpGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new IdpGithub(\"default\", IdpGithubArgs.builder()        \n            .clientId(\"86a165...\")\n            .clientSecret(\"*****afdbac18\")\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .isCreationAllowed(true)\n            .isLinkingAllowed(false)\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:IdpGithub\n    properties:\n      clientId: 86a165...\n      clientSecret: '*****afdbac18'\n      isAutoCreation: false\n      isAutoUpdate: true\n      isCreationAllowed: true\n      isLinkingAllowed: false\n      scopes:\n        - openid\n        - profile\n        - email\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/idpGithub:IdpGithub imported '123456789012345678:1234567890123456781234567890123456787890'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdpGithub resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/idpGithubEs:IdpGithubEs": {
            "description": "Resource representing a GitHub Enterprise IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.IdpGithubEs(\"default\", {\n    authorizationEndpoint: \"https://auth.endpoint\",\n    clientId: \"86a165...\",\n    clientSecret: \"*****afdbac18\",\n    isAutoCreation: false,\n    isAutoUpdate: true,\n    isCreationAllowed: true,\n    isLinkingAllowed: false,\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    tokenEndpoint: \"https://token.endpoint\",\n    userEndpoint: \"https://user.endpoint\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.IdpGithubEs(\"default\",\n    authorization_endpoint=\"https://auth.endpoint\",\n    client_id=\"86a165...\",\n    client_secret=\"*****afdbac18\",\n    is_auto_creation=False,\n    is_auto_update=True,\n    is_creation_allowed=True,\n    is_linking_allowed=False,\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    token_endpoint=\"https://token.endpoint\",\n    user_endpoint=\"https://user.endpoint\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.IdpGithubEs(\"default\", new()\n    {\n        AuthorizationEndpoint = \"https://auth.endpoint\",\n        ClientId = \"86a165...\",\n        ClientSecret = \"*****afdbac18\",\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n        IsCreationAllowed = true,\n        IsLinkingAllowed = false,\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n        TokenEndpoint = \"https://token.endpoint\",\n        UserEndpoint = \"https://user.endpoint\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewIdpGithubEs(ctx, \"default\", \u0026zitadel.IdpGithubEsArgs{\n\t\t\tAuthorizationEndpoint: pulumi.String(\"https://auth.endpoint\"),\n\t\t\tClientId:              pulumi.String(\"86a165...\"),\n\t\t\tClientSecret:          pulumi.String(\"*****afdbac18\"),\n\t\t\tIsAutoCreation:        pulumi.Bool(false),\n\t\t\tIsAutoUpdate:          pulumi.Bool(true),\n\t\t\tIsCreationAllowed:     pulumi.Bool(true),\n\t\t\tIsLinkingAllowed:      pulumi.Bool(false),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tTokenEndpoint: pulumi.String(\"https://token.endpoint\"),\n\t\t\tUserEndpoint:  pulumi.String(\"https://user.endpoint\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.IdpGithubEs;\nimport com.pulumi.zitadel.IdpGithubEsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new IdpGithubEs(\"default\", IdpGithubEsArgs.builder()        \n            .authorizationEndpoint(\"https://auth.endpoint\")\n            .clientId(\"86a165...\")\n            .clientSecret(\"*****afdbac18\")\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .isCreationAllowed(true)\n            .isLinkingAllowed(false)\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .tokenEndpoint(\"https://token.endpoint\")\n            .userEndpoint(\"https://user.endpoint\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:IdpGithubEs\n    properties:\n      authorizationEndpoint: https://auth.endpoint\n      clientId: 86a165...\n      clientSecret: '*****afdbac18'\n      isAutoCreation: false\n      isAutoUpdate: true\n      isCreationAllowed: true\n      isLinkingAllowed: false\n      scopes:\n        - openid\n        - profile\n        - email\n      tokenEndpoint: https://token.endpoint\n      userEndpoint: https://user.endpoint\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/idpGithubEs:IdpGithubEs imported '123456789012345678:1234567890123456781234567890123456787890'\n```\n\n ",
            "properties": {
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "the providers authorization endpoint\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "the providers token endpoint\n"
                },
                "userEndpoint": {
                    "type": "string",
                    "description": "the providers user endpoint\n"
                }
            },
            "required": [
                "authorizationEndpoint",
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name",
                "tokenEndpoint",
                "userEndpoint"
            ],
            "inputProperties": {
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "the providers authorization endpoint\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "the providers token endpoint\n"
                },
                "userEndpoint": {
                    "type": "string",
                    "description": "the providers user endpoint\n"
                }
            },
            "requiredInputs": [
                "authorizationEndpoint",
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "tokenEndpoint",
                "userEndpoint"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdpGithubEs resources.\n",
                "properties": {
                    "authorizationEndpoint": {
                        "type": "string",
                        "description": "the providers authorization endpoint\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    },
                    "tokenEndpoint": {
                        "type": "string",
                        "description": "the providers token endpoint\n"
                    },
                    "userEndpoint": {
                        "type": "string",
                        "description": "the providers user endpoint\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/idpGitlab:IdpGitlab": {
            "description": "Resource representing a GitLab IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.IdpGitlab(\"default\", {\n    clientId: \"15765e...\",\n    clientSecret: \"*****abcxyz\",\n    isAutoCreation: false,\n    isAutoUpdate: true,\n    isCreationAllowed: true,\n    isLinkingAllowed: false,\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.IdpGitlab(\"default\",\n    client_id=\"15765e...\",\n    client_secret=\"*****abcxyz\",\n    is_auto_creation=False,\n    is_auto_update=True,\n    is_creation_allowed=True,\n    is_linking_allowed=False,\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.IdpGitlab(\"default\", new()\n    {\n        ClientId = \"15765e...\",\n        ClientSecret = \"*****abcxyz\",\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n        IsCreationAllowed = true,\n        IsLinkingAllowed = false,\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewIdpGitlab(ctx, \"default\", \u0026zitadel.IdpGitlabArgs{\n\t\t\tClientId:          pulumi.String(\"15765e...\"),\n\t\t\tClientSecret:      pulumi.String(\"*****abcxyz\"),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.IdpGitlab;\nimport com.pulumi.zitadel.IdpGitlabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new IdpGitlab(\"default\", IdpGitlabArgs.builder()        \n            .clientId(\"15765e...\")\n            .clientSecret(\"*****abcxyz\")\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .isCreationAllowed(true)\n            .isLinkingAllowed(false)\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:IdpGitlab\n    properties:\n      clientId: 15765e...\n      clientSecret: '*****abcxyz'\n      isAutoCreation: false\n      isAutoUpdate: true\n      isCreationAllowed: true\n      isLinkingAllowed: false\n      scopes:\n        - openid\n        - profile\n        - email\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/idpGitlab:IdpGitlab imported '123456789012345678:1234567890abcdef'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdpGitlab resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/idpGitlabSelfHosted:IdpGitlabSelfHosted": {
            "description": "Resource representing a GitLab Self Hosted IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.IdpGitlabSelfHosted(\"default\", {\n    clientId: \"15765e...\",\n    clientSecret: \"*****abcxyz\",\n    isAutoCreation: false,\n    isAutoUpdate: true,\n    isCreationAllowed: true,\n    isLinkingAllowed: false,\n    issuer: \"https://my.issuer\",\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.IdpGitlabSelfHosted(\"default\",\n    client_id=\"15765e...\",\n    client_secret=\"*****abcxyz\",\n    is_auto_creation=False,\n    is_auto_update=True,\n    is_creation_allowed=True,\n    is_linking_allowed=False,\n    issuer=\"https://my.issuer\",\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.IdpGitlabSelfHosted(\"default\", new()\n    {\n        ClientId = \"15765e...\",\n        ClientSecret = \"*****abcxyz\",\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n        IsCreationAllowed = true,\n        IsLinkingAllowed = false,\n        Issuer = \"https://my.issuer\",\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewIdpGitlabSelfHosted(ctx, \"default\", \u0026zitadel.IdpGitlabSelfHostedArgs{\n\t\t\tClientId:          pulumi.String(\"15765e...\"),\n\t\t\tClientSecret:      pulumi.String(\"*****abcxyz\"),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tIssuer:            pulumi.String(\"https://my.issuer\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.IdpGitlabSelfHosted;\nimport com.pulumi.zitadel.IdpGitlabSelfHostedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new IdpGitlabSelfHosted(\"default\", IdpGitlabSelfHostedArgs.builder()        \n            .clientId(\"15765e...\")\n            .clientSecret(\"*****abcxyz\")\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .isCreationAllowed(true)\n            .isLinkingAllowed(false)\n            .issuer(\"https://my.issuer\")\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:IdpGitlabSelfHosted\n    properties:\n      clientId: 15765e...\n      clientSecret: '*****abcxyz'\n      isAutoCreation: false\n      isAutoUpdate: true\n      isCreationAllowed: true\n      isLinkingAllowed: false\n      issuer: https://my.issuer\n      scopes:\n        - openid\n        - profile\n        - email\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/idpGitlabSelfHosted:IdpGitlabSelfHosted imported '123456789012345678:1234567890abcdef'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "the providers issuer\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "issuer",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "the providers issuer\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "issuer"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdpGitlabSelfHosted resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "the providers issuer\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/idpGoogle:IdpGoogle": {
            "description": "Resource representing a Google IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.IdpGoogle(\"default\", {\n    clientId: \"182902...\",\n    clientSecret: \"GOCSPX-*****\",\n    isAutoCreation: false,\n    isAutoUpdate: true,\n    isCreationAllowed: true,\n    isLinkingAllowed: false,\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.IdpGoogle(\"default\",\n    client_id=\"182902...\",\n    client_secret=\"GOCSPX-*****\",\n    is_auto_creation=False,\n    is_auto_update=True,\n    is_creation_allowed=True,\n    is_linking_allowed=False,\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.IdpGoogle(\"default\", new()\n    {\n        ClientId = \"182902...\",\n        ClientSecret = \"GOCSPX-*****\",\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n        IsCreationAllowed = true,\n        IsLinkingAllowed = false,\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewIdpGoogle(ctx, \"default\", \u0026zitadel.IdpGoogleArgs{\n\t\t\tClientId:          pulumi.String(\"182902...\"),\n\t\t\tClientSecret:      pulumi.String(\"GOCSPX-*****\"),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.IdpGoogle;\nimport com.pulumi.zitadel.IdpGoogleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new IdpGoogle(\"default\", IdpGoogleArgs.builder()        \n            .clientId(\"182902...\")\n            .clientSecret(\"GOCSPX-*****\")\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .isCreationAllowed(true)\n            .isLinkingAllowed(false)\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:IdpGoogle\n    properties:\n      clientId: 182902...\n      clientSecret: GOCSPX-*****\n      isAutoCreation: false\n      isAutoUpdate: true\n      isCreationAllowed: true\n      isLinkingAllowed: false\n      scopes:\n        - openid\n        - profile\n        - email\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/idpGoogle:IdpGoogle imported '123456789012345678:G1234567890123'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdpGoogle resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/idpLdap:IdpLdap": {
            "description": "Resource representing an LDAP IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.IdpLdap(\"default\", {\n    baseDn: \"dc=example,dc=com\",\n    bindDn: \"cn=admin,dc=example,dc=com\",\n    bindPassword: \"Password1!\",\n    firstNameAttribute: \"firstname\",\n    idAttribute: \"uid\",\n    isAutoCreation: false,\n    isAutoUpdate: true,\n    isCreationAllowed: true,\n    isLinkingAllowed: false,\n    lastNameAttribute: \"lastname\",\n    servers: [\n        \"ldaps://my.primary.server:389\",\n        \"ldaps://my.secondary.server:389\",\n    ],\n    startTls: false,\n    timeout: \"10s\",\n    userBase: \"dn\",\n    userFilters: [\n        \"uid\",\n        \"email\",\n    ],\n    userObjectClasses: [\"inetOrgPerson\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.IdpLdap(\"default\",\n    base_dn=\"dc=example,dc=com\",\n    bind_dn=\"cn=admin,dc=example,dc=com\",\n    bind_password=\"Password1!\",\n    first_name_attribute=\"firstname\",\n    id_attribute=\"uid\",\n    is_auto_creation=False,\n    is_auto_update=True,\n    is_creation_allowed=True,\n    is_linking_allowed=False,\n    last_name_attribute=\"lastname\",\n    servers=[\n        \"ldaps://my.primary.server:389\",\n        \"ldaps://my.secondary.server:389\",\n    ],\n    start_tls=False,\n    timeout=\"10s\",\n    user_base=\"dn\",\n    user_filters=[\n        \"uid\",\n        \"email\",\n    ],\n    user_object_classes=[\"inetOrgPerson\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.IdpLdap(\"default\", new()\n    {\n        BaseDn = \"dc=example,dc=com\",\n        BindDn = \"cn=admin,dc=example,dc=com\",\n        BindPassword = \"Password1!\",\n        FirstNameAttribute = \"firstname\",\n        IdAttribute = \"uid\",\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n        IsCreationAllowed = true,\n        IsLinkingAllowed = false,\n        LastNameAttribute = \"lastname\",\n        Servers = new[]\n        {\n            \"ldaps://my.primary.server:389\",\n            \"ldaps://my.secondary.server:389\",\n        },\n        StartTls = false,\n        Timeout = \"10s\",\n        UserBase = \"dn\",\n        UserFilters = new[]\n        {\n            \"uid\",\n            \"email\",\n        },\n        UserObjectClasses = new[]\n        {\n            \"inetOrgPerson\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewIdpLdap(ctx, \"default\", \u0026zitadel.IdpLdapArgs{\n\t\t\tBaseDn:             pulumi.String(\"dc=example,dc=com\"),\n\t\t\tBindDn:             pulumi.String(\"cn=admin,dc=example,dc=com\"),\n\t\t\tBindPassword:       pulumi.String(\"Password1!\"),\n\t\t\tFirstNameAttribute: pulumi.String(\"firstname\"),\n\t\t\tIdAttribute:        pulumi.String(\"uid\"),\n\t\t\tIsAutoCreation:     pulumi.Bool(false),\n\t\t\tIsAutoUpdate:       pulumi.Bool(true),\n\t\t\tIsCreationAllowed:  pulumi.Bool(true),\n\t\t\tIsLinkingAllowed:   pulumi.Bool(false),\n\t\t\tLastNameAttribute:  pulumi.String(\"lastname\"),\n\t\t\tServers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ldaps://my.primary.server:389\"),\n\t\t\t\tpulumi.String(\"ldaps://my.secondary.server:389\"),\n\t\t\t},\n\t\t\tStartTls: pulumi.Bool(false),\n\t\t\tTimeout:  pulumi.String(\"10s\"),\n\t\t\tUserBase: pulumi.String(\"dn\"),\n\t\t\tUserFilters: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"uid\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tUserObjectClasses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"inetOrgPerson\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.IdpLdap;\nimport com.pulumi.zitadel.IdpLdapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new IdpLdap(\"default\", IdpLdapArgs.builder()        \n            .baseDn(\"dc=example,dc=com\")\n            .bindDn(\"cn=admin,dc=example,dc=com\")\n            .bindPassword(\"Password1!\")\n            .firstNameAttribute(\"firstname\")\n            .idAttribute(\"uid\")\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .isCreationAllowed(true)\n            .isLinkingAllowed(false)\n            .lastNameAttribute(\"lastname\")\n            .servers(            \n                \"ldaps://my.primary.server:389\",\n                \"ldaps://my.secondary.server:389\")\n            .startTls(false)\n            .timeout(\"10s\")\n            .userBase(\"dn\")\n            .userFilters(            \n                \"uid\",\n                \"email\")\n            .userObjectClasses(\"inetOrgPerson\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:IdpLdap\n    properties:\n      baseDn: dc=example,dc=com\n      bindDn: cn=admin,dc=example,dc=com\n      bindPassword: Password1!\n      firstNameAttribute: firstname\n      idAttribute: uid\n      isAutoCreation: false\n      isAutoUpdate: true\n      isCreationAllowed: true\n      isLinkingAllowed: false\n      lastNameAttribute: lastname\n      servers:\n        - ldaps://my.primary.server:389\n        - ldaps://my.secondary.server:389\n      startTls: false\n      timeout: 10s\n      userBase: dn\n      userFilters:\n        - uid\n        - email\n      userObjectClasses:\n        - inetOrgPerson\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:bind_password]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/idpLdap:IdpLdap imported '123456789012345678:b1nd_p4ssw0rd'\n```\n\n ",
            "properties": {
                "avatarUrlAttribute": {
                    "type": "string",
                    "description": "User attribute for the avatar url\n"
                },
                "baseDn": {
                    "type": "string",
                    "description": "Base DN for LDAP connections\n"
                },
                "bindDn": {
                    "type": "string",
                    "description": "Bind DN for LDAP connections\n"
                },
                "bindPassword": {
                    "type": "string",
                    "description": "Bind password for LDAP connections\n",
                    "secret": true
                },
                "displayNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the display name\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "User attribute for the email\n"
                },
                "emailVerifiedAttribute": {
                    "type": "string",
                    "description": "User attribute for the email verified state\n"
                },
                "firstNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the first name\n"
                },
                "idAttribute": {
                    "type": "string",
                    "description": "User attribute for the id\n"
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "lastNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the last name\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "nickNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the nick name\n"
                },
                "phoneAttribute": {
                    "type": "string",
                    "description": "User attribute for the phone\n"
                },
                "phoneVerifiedAttribute": {
                    "type": "string",
                    "description": "User attribute for the phone verified state\n"
                },
                "preferredLanguageAttribute": {
                    "type": "string",
                    "description": "User attribute for the preferred language\n"
                },
                "preferredUsernameAttribute": {
                    "type": "string",
                    "description": "User attribute for the preferred username\n"
                },
                "profileAttribute": {
                    "type": "string",
                    "description": "User attribute for the profile\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Servers to try in order for establishing LDAP connections\n"
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Wether to use StartTLS for LDAP connections\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "Timeout for LDAP connections\n"
                },
                "userBase": {
                    "type": "string",
                    "description": "User base for LDAP connections\n"
                },
                "userFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User filters for LDAP connections\n"
                },
                "userObjectClasses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User object classes for LDAP connections\n"
                }
            },
            "required": [
                "baseDn",
                "bindDn",
                "bindPassword",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name",
                "servers",
                "startTls",
                "timeout",
                "userBase",
                "userFilters",
                "userObjectClasses"
            ],
            "inputProperties": {
                "avatarUrlAttribute": {
                    "type": "string",
                    "description": "User attribute for the avatar url\n"
                },
                "baseDn": {
                    "type": "string",
                    "description": "Base DN for LDAP connections\n"
                },
                "bindDn": {
                    "type": "string",
                    "description": "Bind DN for LDAP connections\n"
                },
                "bindPassword": {
                    "type": "string",
                    "description": "Bind password for LDAP connections\n",
                    "secret": true
                },
                "displayNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the display name\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "User attribute for the email\n"
                },
                "emailVerifiedAttribute": {
                    "type": "string",
                    "description": "User attribute for the email verified state\n"
                },
                "firstNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the first name\n"
                },
                "idAttribute": {
                    "type": "string",
                    "description": "User attribute for the id\n"
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "lastNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the last name\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "nickNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the nick name\n"
                },
                "phoneAttribute": {
                    "type": "string",
                    "description": "User attribute for the phone\n"
                },
                "phoneVerifiedAttribute": {
                    "type": "string",
                    "description": "User attribute for the phone verified state\n"
                },
                "preferredLanguageAttribute": {
                    "type": "string",
                    "description": "User attribute for the preferred language\n"
                },
                "preferredUsernameAttribute": {
                    "type": "string",
                    "description": "User attribute for the preferred username\n"
                },
                "profileAttribute": {
                    "type": "string",
                    "description": "User attribute for the profile\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Servers to try in order for establishing LDAP connections\n"
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Wether to use StartTLS for LDAP connections\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "Timeout for LDAP connections\n"
                },
                "userBase": {
                    "type": "string",
                    "description": "User base for LDAP connections\n"
                },
                "userFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User filters for LDAP connections\n"
                },
                "userObjectClasses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User object classes for LDAP connections\n"
                }
            },
            "requiredInputs": [
                "baseDn",
                "bindDn",
                "bindPassword",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "servers",
                "startTls",
                "timeout",
                "userBase",
                "userFilters",
                "userObjectClasses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IdpLdap resources.\n",
                "properties": {
                    "avatarUrlAttribute": {
                        "type": "string",
                        "description": "User attribute for the avatar url\n"
                    },
                    "baseDn": {
                        "type": "string",
                        "description": "Base DN for LDAP connections\n"
                    },
                    "bindDn": {
                        "type": "string",
                        "description": "Bind DN for LDAP connections\n"
                    },
                    "bindPassword": {
                        "type": "string",
                        "description": "Bind password for LDAP connections\n",
                        "secret": true
                    },
                    "displayNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the display name\n"
                    },
                    "emailAttribute": {
                        "type": "string",
                        "description": "User attribute for the email\n"
                    },
                    "emailVerifiedAttribute": {
                        "type": "string",
                        "description": "User attribute for the email verified state\n"
                    },
                    "firstNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the first name\n"
                    },
                    "idAttribute": {
                        "type": "string",
                        "description": "User attribute for the id\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "lastNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the last name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "nickNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the nick name\n"
                    },
                    "phoneAttribute": {
                        "type": "string",
                        "description": "User attribute for the phone\n"
                    },
                    "phoneVerifiedAttribute": {
                        "type": "string",
                        "description": "User attribute for the phone verified state\n"
                    },
                    "preferredLanguageAttribute": {
                        "type": "string",
                        "description": "User attribute for the preferred language\n"
                    },
                    "preferredUsernameAttribute": {
                        "type": "string",
                        "description": "User attribute for the preferred username\n"
                    },
                    "profileAttribute": {
                        "type": "string",
                        "description": "User attribute for the profile\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Servers to try in order for establishing LDAP connections\n"
                    },
                    "startTls": {
                        "type": "boolean",
                        "description": "Wether to use StartTLS for LDAP connections\n"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "Timeout for LDAP connections\n"
                    },
                    "userBase": {
                        "type": "string",
                        "description": "User base for LDAP connections\n"
                    },
                    "userFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User filters for LDAP connections\n"
                    },
                    "userObjectClasses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User object classes for LDAP connections\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/instanceMember:InstanceMember": {
            "description": "Resource representing the membership of a user on an instance, defined with the given role.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.InstanceMember(\"default\", {\n    userId: data.zitadel_human_user[\"default\"].id,\n    roles: [\"IAM_OWNER\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.InstanceMember(\"default\",\n    user_id=data[\"zitadel_human_user\"][\"default\"][\"id\"],\n    roles=[\"IAM_OWNER\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.InstanceMember(\"default\", new()\n    {\n        UserId = data.Zitadel_human_user.Default.Id,\n        Roles = new[]\n        {\n            \"IAM_OWNER\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewInstanceMember(ctx, \"default\", \u0026zitadel.InstanceMemberArgs{\n\t\t\tUserId: pulumi.Any(data.Zitadel_human_user.Default.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"IAM_OWNER\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.InstanceMember;\nimport com.pulumi.zitadel.InstanceMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new InstanceMember(\"default\", InstanceMemberArgs.builder()        \n            .userId(data.zitadel_human_user().default().id())\n            .roles(\"IAM_OWNER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:InstanceMember\n    properties:\n      userId: ${data.zitadel_human_user.default.id}\n      roles:\n        - IAM_OWNER\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cuser_id\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/instanceMember:InstanceMember imported '123456789012345678'\n```\n\n ",
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted, full list available here: https://zitadel.com/docs/guides/manage/console/managers#roles\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n"
                }
            },
            "required": [
                "roles",
                "userId"
            ],
            "inputProperties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted, full list available here: https://zitadel.com/docs/guides/manage/console/managers#roles\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roles",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InstanceMember resources.\n",
                "properties": {
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roles granted, full list available here: https://zitadel.com/docs/guides/manage/console/managers#roles\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/labelPolicy:LabelPolicy": {
            "description": "Resource representing the custom label policy of an organization.\n\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c[org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/labelPolicy:LabelPolicy imported '123456789012345678'\n```\n\n ",
            "properties": {
                "backgroundColor": {
                    "type": "string",
                    "description": "hex value for background color\n"
                },
                "backgroundColorDark": {
                    "type": "string",
                    "description": "hex value for background color dark theme\n"
                },
                "disableWatermark": {
                    "type": "boolean",
                    "description": "disable watermark\n"
                },
                "fontColor": {
                    "type": "string",
                    "description": "hex value for font color\n"
                },
                "fontColorDark": {
                    "type": "string",
                    "description": "hex value for font color dark theme\n"
                },
                "fontHash": {
                    "type": "string"
                },
                "fontPath": {
                    "type": "string"
                },
                "fontUrl": {
                    "type": "string"
                },
                "hideLoginNameSuffix": {
                    "type": "boolean",
                    "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes\n"
                },
                "iconDarkHash": {
                    "type": "string"
                },
                "iconDarkPath": {
                    "type": "string"
                },
                "iconHash": {
                    "type": "string"
                },
                "iconPath": {
                    "type": "string"
                },
                "iconUrl": {
                    "type": "string"
                },
                "iconUrlDark": {
                    "type": "string"
                },
                "logoDarkHash": {
                    "type": "string"
                },
                "logoDarkPath": {
                    "type": "string"
                },
                "logoHash": {
                    "type": "string"
                },
                "logoPath": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "logoUrlDark": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "primaryColor": {
                    "type": "string",
                    "description": "hex value for primary color\n"
                },
                "primaryColorDark": {
                    "type": "string",
                    "description": "hex value for primary color dark theme\n"
                },
                "setActive": {
                    "type": "boolean",
                    "description": "set the label policy active after creating/updating\n"
                },
                "warnColor": {
                    "type": "string",
                    "description": "hex value for warn color\n"
                },
                "warnColorDark": {
                    "type": "string",
                    "description": "hex value for warn color dark theme\n"
                }
            },
            "required": [
                "backgroundColor",
                "backgroundColorDark",
                "disableWatermark",
                "fontColor",
                "fontColorDark",
                "fontUrl",
                "hideLoginNameSuffix",
                "iconUrl",
                "iconUrlDark",
                "logoUrl",
                "logoUrlDark",
                "primaryColor",
                "primaryColorDark",
                "warnColor",
                "warnColorDark"
            ],
            "inputProperties": {
                "backgroundColor": {
                    "type": "string",
                    "description": "hex value for background color\n"
                },
                "backgroundColorDark": {
                    "type": "string",
                    "description": "hex value for background color dark theme\n"
                },
                "disableWatermark": {
                    "type": "boolean",
                    "description": "disable watermark\n"
                },
                "fontColor": {
                    "type": "string",
                    "description": "hex value for font color\n"
                },
                "fontColorDark": {
                    "type": "string",
                    "description": "hex value for font color dark theme\n"
                },
                "fontHash": {
                    "type": "string"
                },
                "fontPath": {
                    "type": "string"
                },
                "hideLoginNameSuffix": {
                    "type": "boolean",
                    "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes\n"
                },
                "iconDarkHash": {
                    "type": "string"
                },
                "iconDarkPath": {
                    "type": "string"
                },
                "iconHash": {
                    "type": "string"
                },
                "iconPath": {
                    "type": "string"
                },
                "logoDarkHash": {
                    "type": "string"
                },
                "logoDarkPath": {
                    "type": "string"
                },
                "logoHash": {
                    "type": "string"
                },
                "logoPath": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "primaryColor": {
                    "type": "string",
                    "description": "hex value for primary color\n"
                },
                "primaryColorDark": {
                    "type": "string",
                    "description": "hex value for primary color dark theme\n"
                },
                "setActive": {
                    "type": "boolean",
                    "description": "set the label policy active after creating/updating\n"
                },
                "warnColor": {
                    "type": "string",
                    "description": "hex value for warn color\n"
                },
                "warnColorDark": {
                    "type": "string",
                    "description": "hex value for warn color dark theme\n"
                }
            },
            "requiredInputs": [
                "backgroundColor",
                "backgroundColorDark",
                "disableWatermark",
                "fontColor",
                "fontColorDark",
                "hideLoginNameSuffix",
                "primaryColor",
                "primaryColorDark",
                "warnColor",
                "warnColorDark"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LabelPolicy resources.\n",
                "properties": {
                    "backgroundColor": {
                        "type": "string",
                        "description": "hex value for background color\n"
                    },
                    "backgroundColorDark": {
                        "type": "string",
                        "description": "hex value for background color dark theme\n"
                    },
                    "disableWatermark": {
                        "type": "boolean",
                        "description": "disable watermark\n"
                    },
                    "fontColor": {
                        "type": "string",
                        "description": "hex value for font color\n"
                    },
                    "fontColorDark": {
                        "type": "string",
                        "description": "hex value for font color dark theme\n"
                    },
                    "fontHash": {
                        "type": "string"
                    },
                    "fontPath": {
                        "type": "string"
                    },
                    "fontUrl": {
                        "type": "string"
                    },
                    "hideLoginNameSuffix": {
                        "type": "boolean",
                        "description": "hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set. Details about this scope in https://zitadel.com/docs/apis/openidoauth/scopes#reserved-scopes\n"
                    },
                    "iconDarkHash": {
                        "type": "string"
                    },
                    "iconDarkPath": {
                        "type": "string"
                    },
                    "iconHash": {
                        "type": "string"
                    },
                    "iconPath": {
                        "type": "string"
                    },
                    "iconUrl": {
                        "type": "string"
                    },
                    "iconUrlDark": {
                        "type": "string"
                    },
                    "logoDarkHash": {
                        "type": "string"
                    },
                    "logoDarkPath": {
                        "type": "string"
                    },
                    "logoHash": {
                        "type": "string"
                    },
                    "logoPath": {
                        "type": "string"
                    },
                    "logoUrl": {
                        "type": "string"
                    },
                    "logoUrlDark": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "primaryColor": {
                        "type": "string",
                        "description": "hex value for primary color\n"
                    },
                    "primaryColorDark": {
                        "type": "string",
                        "description": "hex value for primary color dark theme\n"
                    },
                    "setActive": {
                        "type": "boolean",
                        "description": "set the label policy active after creating/updating\n"
                    },
                    "warnColor": {
                        "type": "string",
                        "description": "hex value for warn color\n"
                    },
                    "warnColorDark": {
                        "type": "string",
                        "description": "hex value for warn color dark theme\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/lockoutPolicy:LockoutPolicy": {
            "description": "Resource representing the custom lockout policy of an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.LockoutPolicy(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    maxPasswordAttempts: 5,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.LockoutPolicy(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    max_password_attempts=5)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.LockoutPolicy(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        MaxPasswordAttempts = 5,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewLockoutPolicy(ctx, \"default\", \u0026zitadel.LockoutPolicyArgs{\n\t\t\tOrgId:               pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tMaxPasswordAttempts: pulumi.Int(5),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.LockoutPolicy;\nimport com.pulumi.zitadel.LockoutPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new LockoutPolicy(\"default\", LockoutPolicyArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .maxPasswordAttempts(\"5\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:LockoutPolicy\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      maxPasswordAttempts: '5'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c[org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/lockoutPolicy:LockoutPolicy imported '123456789012345678'\n```\n\n ",
            "properties": {
                "maxPasswordAttempts": {
                    "type": "integer",
                    "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correct or the password is reset.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                }
            },
            "required": [
                "maxPasswordAttempts"
            ],
            "inputProperties": {
                "maxPasswordAttempts": {
                    "type": "integer",
                    "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correct or the password is reset.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "maxPasswordAttempts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LockoutPolicy resources.\n",
                "properties": {
                    "maxPasswordAttempts": {
                        "type": "integer",
                        "description": "Maximum password check attempts before the account gets locked. Attempts are reset as soon as the password is entered correct or the password is reset.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/loginPolicy:LoginPolicy": {
            "description": "Resource representing the custom login policy of an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.LoginPolicy(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    userLogin: true,\n    allowRegister: true,\n    allowExternalIdp: true,\n    forceMfa: false,\n    forceMfaLocalOnly: false,\n    passwordlessType: \"PASSWORDLESS_TYPE_ALLOWED\",\n    hidePasswordReset: false,\n    passwordCheckLifetime: \"240h0m0s\",\n    externalLoginCheckLifetime: \"240h0m0s\",\n    multiFactorCheckLifetime: \"24h0m0s\",\n    mfaInitSkipLifetime: \"720h0m0s\",\n    secondFactorCheckLifetime: \"24h0m0s\",\n    ignoreUnknownUsernames: true,\n    defaultRedirectUri: \"localhost:8080\",\n    secondFactors: [\n        \"SECOND_FACTOR_TYPE_OTP\",\n        \"SECOND_FACTOR_TYPE_U2F\",\n    ],\n    multiFactors: [\"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\"],\n    idps: [\n        data.zitadel_idp_google[\"default\"].id,\n        data.zitadel_idp_azure_ad[\"default\"].id,\n    ],\n    allowDomainDiscovery: true,\n    disableLoginWithEmail: true,\n    disableLoginWithPhone: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.LoginPolicy(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_login=True,\n    allow_register=True,\n    allow_external_idp=True,\n    force_mfa=False,\n    force_mfa_local_only=False,\n    passwordless_type=\"PASSWORDLESS_TYPE_ALLOWED\",\n    hide_password_reset=False,\n    password_check_lifetime=\"240h0m0s\",\n    external_login_check_lifetime=\"240h0m0s\",\n    multi_factor_check_lifetime=\"24h0m0s\",\n    mfa_init_skip_lifetime=\"720h0m0s\",\n    second_factor_check_lifetime=\"24h0m0s\",\n    ignore_unknown_usernames=True,\n    default_redirect_uri=\"localhost:8080\",\n    second_factors=[\n        \"SECOND_FACTOR_TYPE_OTP\",\n        \"SECOND_FACTOR_TYPE_U2F\",\n    ],\n    multi_factors=[\"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\"],\n    idps=[\n        data[\"zitadel_idp_google\"][\"default\"][\"id\"],\n        data[\"zitadel_idp_azure_ad\"][\"default\"][\"id\"],\n    ],\n    allow_domain_discovery=True,\n    disable_login_with_email=True,\n    disable_login_with_phone=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.LoginPolicy(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserLogin = true,\n        AllowRegister = true,\n        AllowExternalIdp = true,\n        ForceMfa = false,\n        ForceMfaLocalOnly = false,\n        PasswordlessType = \"PASSWORDLESS_TYPE_ALLOWED\",\n        HidePasswordReset = false,\n        PasswordCheckLifetime = \"240h0m0s\",\n        ExternalLoginCheckLifetime = \"240h0m0s\",\n        MultiFactorCheckLifetime = \"24h0m0s\",\n        MfaInitSkipLifetime = \"720h0m0s\",\n        SecondFactorCheckLifetime = \"24h0m0s\",\n        IgnoreUnknownUsernames = true,\n        DefaultRedirectUri = \"localhost:8080\",\n        SecondFactors = new[]\n        {\n            \"SECOND_FACTOR_TYPE_OTP\",\n            \"SECOND_FACTOR_TYPE_U2F\",\n        },\n        MultiFactors = new[]\n        {\n            \"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\",\n        },\n        Idps = new[]\n        {\n            data.Zitadel_idp_google.Default.Id,\n            data.Zitadel_idp_azure_ad.Default.Id,\n        },\n        AllowDomainDiscovery = true,\n        DisableLoginWithEmail = true,\n        DisableLoginWithPhone = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewLoginPolicy(ctx, \"default\", \u0026zitadel.LoginPolicyArgs{\n\t\t\tOrgId:                      pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tUserLogin:                  pulumi.Bool(true),\n\t\t\tAllowRegister:              pulumi.Bool(true),\n\t\t\tAllowExternalIdp:           pulumi.Bool(true),\n\t\t\tForceMfa:                   pulumi.Bool(false),\n\t\t\tForceMfaLocalOnly:          pulumi.Bool(false),\n\t\t\tPasswordlessType:           pulumi.String(\"PASSWORDLESS_TYPE_ALLOWED\"),\n\t\t\tHidePasswordReset:          pulumi.Bool(false),\n\t\t\tPasswordCheckLifetime:      pulumi.String(\"240h0m0s\"),\n\t\t\tExternalLoginCheckLifetime: pulumi.String(\"240h0m0s\"),\n\t\t\tMultiFactorCheckLifetime:   pulumi.String(\"24h0m0s\"),\n\t\t\tMfaInitSkipLifetime:        pulumi.String(\"720h0m0s\"),\n\t\t\tSecondFactorCheckLifetime:  pulumi.String(\"24h0m0s\"),\n\t\t\tIgnoreUnknownUsernames:     pulumi.Bool(true),\n\t\t\tDefaultRedirectUri:         pulumi.String(\"localhost:8080\"),\n\t\t\tSecondFactors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SECOND_FACTOR_TYPE_OTP\"),\n\t\t\t\tpulumi.String(\"SECOND_FACTOR_TYPE_U2F\"),\n\t\t\t},\n\t\t\tMultiFactors: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\"),\n\t\t\t},\n\t\t\tIdps: pulumi.StringArray{\n\t\t\t\tdata.Zitadel_idp_google.Default.Id,\n\t\t\t\tdata.Zitadel_idp_azure_ad.Default.Id,\n\t\t\t},\n\t\t\tAllowDomainDiscovery:  pulumi.Bool(true),\n\t\t\tDisableLoginWithEmail: pulumi.Bool(true),\n\t\t\tDisableLoginWithPhone: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.LoginPolicy;\nimport com.pulumi.zitadel.LoginPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new LoginPolicy(\"default\", LoginPolicyArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .userLogin(true)\n            .allowRegister(true)\n            .allowExternalIdp(true)\n            .forceMfa(false)\n            .forceMfaLocalOnly(false)\n            .passwordlessType(\"PASSWORDLESS_TYPE_ALLOWED\")\n            .hidePasswordReset(\"false\")\n            .passwordCheckLifetime(\"240h0m0s\")\n            .externalLoginCheckLifetime(\"240h0m0s\")\n            .multiFactorCheckLifetime(\"24h0m0s\")\n            .mfaInitSkipLifetime(\"720h0m0s\")\n            .secondFactorCheckLifetime(\"24h0m0s\")\n            .ignoreUnknownUsernames(true)\n            .defaultRedirectUri(\"localhost:8080\")\n            .secondFactors(            \n                \"SECOND_FACTOR_TYPE_OTP\",\n                \"SECOND_FACTOR_TYPE_U2F\")\n            .multiFactors(\"MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\")\n            .idps(            \n                data.zitadel_idp_google().default().id(),\n                data.zitadel_idp_azure_ad().default().id())\n            .allowDomainDiscovery(true)\n            .disableLoginWithEmail(true)\n            .disableLoginWithPhone(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:LoginPolicy\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      userLogin: true\n      allowRegister: true\n      allowExternalIdp: true\n      forceMfa: false\n      forceMfaLocalOnly: false\n      passwordlessType: PASSWORDLESS_TYPE_ALLOWED\n      hidePasswordReset: 'false'\n      passwordCheckLifetime: 240h0m0s\n      externalLoginCheckLifetime: 240h0m0s\n      multiFactorCheckLifetime: 24h0m0s\n      mfaInitSkipLifetime: 720h0m0s\n      secondFactorCheckLifetime: 24h0m0s\n      ignoreUnknownUsernames: true\n      defaultRedirectUri: localhost:8080\n      secondFactors:\n        - SECOND_FACTOR_TYPE_OTP\n        - SECOND_FACTOR_TYPE_U2F\n      multiFactors:\n        - MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION\n      idps:\n        - ${data.zitadel_idp_google.default.id}\n        - ${data.zitadel_idp_azure_ad.default.id}\n      allowDomainDiscovery: true\n      disableLoginWithEmail: true\n      disableLoginWithPhone: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c[org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/loginPolicy:LoginPolicy imported '123456789012345678'\n```\n\n ",
            "properties": {
                "allowDomainDiscovery": {
                    "type": "boolean",
                    "description": "if set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organisation on success.\n"
                },
                "allowExternalIdp": {
                    "type": "boolean",
                    "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth\n"
                },
                "allowRegister": {
                    "type": "boolean",
                    "description": "defines if a person is allowed to register a user on this organisation\n"
                },
                "defaultRedirectUri": {
                    "type": "string",
                    "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)\n"
                },
                "disableLoginWithEmail": {
                    "type": "boolean",
                    "description": "defines if user can additionally (to the loginname) be identified by their verified email address\n"
                },
                "disableLoginWithPhone": {
                    "type": "boolean",
                    "description": "defines if user can additionally (to the loginname) be identified by their verified phone number\n"
                },
                "externalLoginCheckLifetime": {
                    "type": "string"
                },
                "forceMfa": {
                    "type": "boolean",
                    "description": "defines if a user MUST use a multi factor to log in\n"
                },
                "forceMfaLocalOnly": {
                    "type": "boolean",
                    "description": "if activated, ZITADEL only enforces MFA on local authentications. On authentications through MFA, ZITADEL won't prompt for MFA.\n"
                },
                "hidePasswordReset": {
                    "type": "boolean",
                    "description": "defines if password reset link should be shown in the login screen\n"
                },
                "idps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed idps to login or register\n"
                },
                "ignoreUnknownUsernames": {
                    "type": "boolean",
                    "description": "defines if unknown username on login screen directly return an error or always display the password screen\n"
                },
                "mfaInitSkipLifetime": {
                    "type": "string"
                },
                "multiFactorCheckLifetime": {
                    "type": "string"
                },
                "multiFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed multi factors\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "passwordCheckLifetime": {
                    "type": "string"
                },
                "passwordlessType": {
                    "type": "string",
                    "description": "defines if passwordless is allowed for users\n"
                },
                "secondFactorCheckLifetime": {
                    "type": "string"
                },
                "secondFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed second factors\n"
                },
                "userLogin": {
                    "type": "boolean",
                    "description": "defines if a user is allowed to login with his username and password\n"
                }
            },
            "required": [
                "allowExternalIdp",
                "allowRegister",
                "defaultRedirectUri",
                "externalLoginCheckLifetime",
                "forceMfa",
                "forceMfaLocalOnly",
                "hidePasswordReset",
                "ignoreUnknownUsernames",
                "mfaInitSkipLifetime",
                "multiFactorCheckLifetime",
                "passwordCheckLifetime",
                "passwordlessType",
                "secondFactorCheckLifetime",
                "userLogin"
            ],
            "inputProperties": {
                "allowDomainDiscovery": {
                    "type": "boolean",
                    "description": "if set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organisation on success.\n"
                },
                "allowExternalIdp": {
                    "type": "boolean",
                    "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth\n"
                },
                "allowRegister": {
                    "type": "boolean",
                    "description": "defines if a person is allowed to register a user on this organisation\n"
                },
                "defaultRedirectUri": {
                    "type": "string",
                    "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)\n"
                },
                "disableLoginWithEmail": {
                    "type": "boolean",
                    "description": "defines if user can additionally (to the loginname) be identified by their verified email address\n"
                },
                "disableLoginWithPhone": {
                    "type": "boolean",
                    "description": "defines if user can additionally (to the loginname) be identified by their verified phone number\n"
                },
                "externalLoginCheckLifetime": {
                    "type": "string"
                },
                "forceMfa": {
                    "type": "boolean",
                    "description": "defines if a user MUST use a multi factor to log in\n"
                },
                "forceMfaLocalOnly": {
                    "type": "boolean",
                    "description": "if activated, ZITADEL only enforces MFA on local authentications. On authentications through MFA, ZITADEL won't prompt for MFA.\n"
                },
                "hidePasswordReset": {
                    "type": "boolean",
                    "description": "defines if password reset link should be shown in the login screen\n"
                },
                "idps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed idps to login or register\n"
                },
                "ignoreUnknownUsernames": {
                    "type": "boolean",
                    "description": "defines if unknown username on login screen directly return an error or always display the password screen\n"
                },
                "mfaInitSkipLifetime": {
                    "type": "string"
                },
                "multiFactorCheckLifetime": {
                    "type": "string"
                },
                "multiFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed multi factors\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "passwordCheckLifetime": {
                    "type": "string"
                },
                "passwordlessType": {
                    "type": "string",
                    "description": "defines if passwordless is allowed for users\n"
                },
                "secondFactorCheckLifetime": {
                    "type": "string"
                },
                "secondFactors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "allowed second factors\n"
                },
                "userLogin": {
                    "type": "boolean",
                    "description": "defines if a user is allowed to login with his username and password\n"
                }
            },
            "requiredInputs": [
                "allowExternalIdp",
                "allowRegister",
                "defaultRedirectUri",
                "externalLoginCheckLifetime",
                "forceMfa",
                "forceMfaLocalOnly",
                "hidePasswordReset",
                "ignoreUnknownUsernames",
                "mfaInitSkipLifetime",
                "multiFactorCheckLifetime",
                "passwordCheckLifetime",
                "passwordlessType",
                "secondFactorCheckLifetime",
                "userLogin"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoginPolicy resources.\n",
                "properties": {
                    "allowDomainDiscovery": {
                        "type": "boolean",
                        "description": "if set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organisation on success.\n"
                    },
                    "allowExternalIdp": {
                        "type": "boolean",
                        "description": "defines if a user is allowed to add a defined identity provider. E.g. Google auth\n"
                    },
                    "allowRegister": {
                        "type": "boolean",
                        "description": "defines if a person is allowed to register a user on this organisation\n"
                    },
                    "defaultRedirectUri": {
                        "type": "string",
                        "description": "defines where the user will be redirected to if the login is started without app context (e.g. from mail)\n"
                    },
                    "disableLoginWithEmail": {
                        "type": "boolean",
                        "description": "defines if user can additionally (to the loginname) be identified by their verified email address\n"
                    },
                    "disableLoginWithPhone": {
                        "type": "boolean",
                        "description": "defines if user can additionally (to the loginname) be identified by their verified phone number\n"
                    },
                    "externalLoginCheckLifetime": {
                        "type": "string"
                    },
                    "forceMfa": {
                        "type": "boolean",
                        "description": "defines if a user MUST use a multi factor to log in\n"
                    },
                    "forceMfaLocalOnly": {
                        "type": "boolean",
                        "description": "if activated, ZITADEL only enforces MFA on local authentications. On authentications through MFA, ZITADEL won't prompt for MFA.\n"
                    },
                    "hidePasswordReset": {
                        "type": "boolean",
                        "description": "defines if password reset link should be shown in the login screen\n"
                    },
                    "idps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "allowed idps to login or register\n"
                    },
                    "ignoreUnknownUsernames": {
                        "type": "boolean",
                        "description": "defines if unknown username on login screen directly return an error or always display the password screen\n"
                    },
                    "mfaInitSkipLifetime": {
                        "type": "string"
                    },
                    "multiFactorCheckLifetime": {
                        "type": "string"
                    },
                    "multiFactors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "allowed multi factors\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "passwordCheckLifetime": {
                        "type": "string"
                    },
                    "passwordlessType": {
                        "type": "string",
                        "description": "defines if passwordless is allowed for users\n"
                    },
                    "secondFactorCheckLifetime": {
                        "type": "string"
                    },
                    "secondFactors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "allowed second factors\n"
                    },
                    "userLogin": {
                        "type": "boolean",
                        "description": "defines if a user is allowed to login with his username and password\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/machineKey:MachineKey": {
            "description": "Resource representing a machine key\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.MachineKey(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    userId: data.zitadel_machine_user[\"default\"].id,\n    keyType: \"KEY_TYPE_JSON\",\n    expirationDate: \"2519-04-01T08:45:00Z\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.MachineKey(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_id=data[\"zitadel_machine_user\"][\"default\"][\"id\"],\n    key_type=\"KEY_TYPE_JSON\",\n    expiration_date=\"2519-04-01T08:45:00Z\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.MachineKey(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserId = data.Zitadel_machine_user.Default.Id,\n        KeyType = \"KEY_TYPE_JSON\",\n        ExpirationDate = \"2519-04-01T08:45:00Z\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewMachineKey(ctx, \"default\", \u0026zitadel.MachineKeyArgs{\n\t\t\tOrgId:          pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tUserId:         pulumi.Any(data.Zitadel_machine_user.Default.Id),\n\t\t\tKeyType:        pulumi.String(\"KEY_TYPE_JSON\"),\n\t\t\tExpirationDate: pulumi.String(\"2519-04-01T08:45:00Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.MachineKey;\nimport com.pulumi.zitadel.MachineKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new MachineKey(\"default\", MachineKeyArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .userId(data.zitadel_machine_user().default().id())\n            .keyType(\"KEY_TYPE_JSON\")\n            .expirationDate(\"2519-04-01T08:45:00Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:MachineKey\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      userId: ${data.zitadel_machine_user.default.id}\n      keyType: KEY_TYPE_JSON\n      expirationDate: 2519-04-01T08:45:00Z\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid:user_id[:org_id][:key_details]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/machineKey:MachineKey imported '123456789012345678:123456789012345678:123456789012345678:{\"type\":\"serviceaccount\",\"keyId\":\"123456789012345678\",\"key\":\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQ...-----END RSA PRIVATE KEY-----\\n\",\"userId\":\"123456789012345678\"}'\n```\n\n ",
            "properties": {
                "expirationDate": {
                    "type": "string",
                    "description": "Expiration date of the machine key in the RFC3339 format\n"
                },
                "keyDetails": {
                    "type": "string",
                    "description": "Value of the machine key\n",
                    "secret": true
                },
                "keyType": {
                    "type": "string",
                    "description": "Type of the machine key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n"
                }
            },
            "required": [
                "expirationDate",
                "keyDetails",
                "keyType",
                "userId"
            ],
            "inputProperties": {
                "expirationDate": {
                    "type": "string",
                    "description": "Expiration date of the machine key in the RFC3339 format\n",
                    "willReplaceOnChanges": true
                },
                "keyType": {
                    "type": "string",
                    "description": "Type of the machine key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "keyType",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MachineKey resources.\n",
                "properties": {
                    "expirationDate": {
                        "type": "string",
                        "description": "Expiration date of the machine key in the RFC3339 format\n",
                        "willReplaceOnChanges": true
                    },
                    "keyDetails": {
                        "type": "string",
                        "description": "Value of the machine key\n",
                        "secret": true
                    },
                    "keyType": {
                        "type": "string",
                        "description": "Type of the machine key, supported values: KEY*TYPE*UNSPECIFIED, KEY*TYPE*JSON\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/machineUser:MachineUser": {
            "description": "Resource representing a serviceaccount situated under an organization, which then can be authorized through memberships or direct grants on other resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.MachineUser(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    userName: \"machine@example.com\",\n    description: \"a machine user\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.MachineUser(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_name=\"machine@example.com\",\n    description=\"a machine user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.MachineUser(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserName = \"machine@example.com\",\n        Description = \"a machine user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewMachineUser(ctx, \"default\", \u0026zitadel.MachineUserArgs{\n\t\t\tOrgId:       pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tUserName:    pulumi.String(\"machine@example.com\"),\n\t\t\tDescription: pulumi.String(\"a machine user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.MachineUser;\nimport com.pulumi.zitadel.MachineUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new MachineUser(\"default\", MachineUserArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .userName(\"machine@example.com\")\n            .description(\"a machine user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:MachineUser\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      userName: machine@example.com\n      description: a machine user\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/machineUser:MachineUser imported '123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "accessTokenType": {
                    "type": "string",
                    "description": "Access token type, supported values: ACCESS*TOKEN*TYPE*BEARER, ACCESS*TOKEN*TYPE*JWT\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the user\n"
                },
                "loginNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Loginnames\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the machine user\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "preferredLoginName": {
                    "type": "string",
                    "description": "Preferred login name\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the user\n"
                },
                "userName": {
                    "type": "string",
                    "description": "Username\n"
                }
            },
            "required": [
                "loginNames",
                "name",
                "preferredLoginName",
                "state",
                "userName"
            ],
            "inputProperties": {
                "accessTokenType": {
                    "type": "string",
                    "description": "Access token type, supported values: ACCESS*TOKEN*TYPE*BEARER, ACCESS*TOKEN*TYPE*JWT\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the user\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the machine user\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "description": "Username\n"
                }
            },
            "requiredInputs": [
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MachineUser resources.\n",
                "properties": {
                    "accessTokenType": {
                        "type": "string",
                        "description": "Access token type, supported values: ACCESS*TOKEN*TYPE*BEARER, ACCESS*TOKEN*TYPE*JWT\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the user\n"
                    },
                    "loginNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Loginnames\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the machine user\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "preferredLoginName": {
                        "type": "string",
                        "description": "Preferred login name\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the user\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Username\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/notificationPolicy:NotificationPolicy": {
            "description": "Resource representing the custom notification policy of an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.NotificationPolicy(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    passwordChange: false,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.NotificationPolicy(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    password_change=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.NotificationPolicy(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        PasswordChange = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewNotificationPolicy(ctx, \"default\", \u0026zitadel.NotificationPolicyArgs{\n\t\t\tOrgId:          pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tPasswordChange: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.NotificationPolicy;\nimport com.pulumi.zitadel.NotificationPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new NotificationPolicy(\"default\", NotificationPolicyArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .passwordChange(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:NotificationPolicy\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      passwordChange: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c[org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/notificationPolicy:NotificationPolicy imported '123456789012345678'\n```\n\n ",
            "properties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "passwordChange": {
                    "type": "boolean",
                    "description": "Send notification if a user changes his password\n"
                }
            },
            "required": [
                "passwordChange"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "passwordChange": {
                    "type": "boolean",
                    "description": "Send notification if a user changes his password\n"
                }
            },
            "requiredInputs": [
                "passwordChange"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationPolicy resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "passwordChange": {
                        "type": "boolean",
                        "description": "Send notification if a user changes his password\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/org:Org": {
            "description": "Resource representing an organization in ZITADEL, which is the highest level after the instance and contains several other resource including policies if the configuration differs to the default policies on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.Org(\"default\", {});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.Org(\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.Org(\"default\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrg(ctx, \"default\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.Org;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Org(\"default\");\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:Org\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/org:Org imported '123456789012345678'\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the org\n"
                },
                "primaryDomain": {
                    "type": "string",
                    "description": "Primary domain of the org\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the org\n"
                }
            },
            "required": [
                "name",
                "primaryDomain",
                "state"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the org\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Org resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the org\n"
                    },
                    "primaryDomain": {
                        "type": "string",
                        "description": "Primary domain of the org\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the org\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpAzureAd:OrgIdpAzureAd": {
            "description": "Resource representing an Azure AD IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpAzureAd(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    clientId: \"9065bfc8-a08a...\",\n    clientSecret: \"H2n***\",\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n        \"User.Read\",\n    ],\n    tenantType: \"AZURE_AD_TENANT_TYPE_ORGANISATIONS\",\n    emailVerified: true,\n    isLinkingAllowed: false,\n    isCreationAllowed: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpAzureAd(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    client_id=\"9065bfc8-a08a...\",\n    client_secret=\"H2n***\",\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n        \"User.Read\",\n    ],\n    tenant_type=\"AZURE_AD_TENANT_TYPE_ORGANISATIONS\",\n    email_verified=True,\n    is_linking_allowed=False,\n    is_creation_allowed=True,\n    is_auto_creation=False,\n    is_auto_update=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpAzureAd(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ClientId = \"9065bfc8-a08a...\",\n        ClientSecret = \"H2n***\",\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n            \"User.Read\",\n        },\n        TenantType = \"AZURE_AD_TENANT_TYPE_ORGANISATIONS\",\n        EmailVerified = true,\n        IsLinkingAllowed = false,\n        IsCreationAllowed = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpAzureAd(ctx, \"default\", \u0026zitadel.OrgIdpAzureAdArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tClientId:     pulumi.String(\"9065bfc8-a08a...\"),\n\t\t\tClientSecret: pulumi.String(\"H2n***\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t\tpulumi.String(\"User.Read\"),\n\t\t\t},\n\t\t\tTenantType:        pulumi.String(\"AZURE_AD_TENANT_TYPE_ORGANISATIONS\"),\n\t\t\tEmailVerified:     pulumi.Bool(true),\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpAzureAd;\nimport com.pulumi.zitadel.OrgIdpAzureAdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpAzureAd(\"default\", OrgIdpAzureAdArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .clientId(\"9065bfc8-a08a...\")\n            .clientSecret(\"H2n***\")\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\",\n                \"User.Read\")\n            .tenantType(\"AZURE_AD_TENANT_TYPE_ORGANISATIONS\")\n            .emailVerified(true)\n            .isLinkingAllowed(false)\n            .isCreationAllowed(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpAzureAd\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      clientId: 9065bfc8-a08a...\n      clientSecret: H2n***\n      scopes:\n        - openid\n        - profile\n        - email\n        - User.Read\n      tenantType: AZURE_AD_TENANT_TYPE_ORGANISATIONS\n      emailVerified: true\n      isLinkingAllowed: false\n      isCreationAllowed: true\n      isAutoCreation: false\n      isAutoUpdate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpAzureAd:OrgIdpAzureAd imported '123456789012345678:123456789012345678:12345678-1234-1234-1234-123456789012'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "emailVerified": {
                    "type": "boolean",
                    "description": "automatically mark emails as verified\n"
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "if tenant*id is not set, the tenant*type is used\n"
                },
                "tenantType": {
                    "type": "string",
                    "description": "the azure ad tenant type\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "emailVerified",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "emailVerified": {
                    "type": "boolean",
                    "description": "automatically mark emails as verified\n"
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "if tenant*id is not set, the tenant*type is used\n"
                },
                "tenantType": {
                    "type": "string",
                    "description": "the azure ad tenant type\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "emailVerified",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpAzureAd resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "automatically mark emails as verified\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "if tenant*id is not set, the tenant*type is used\n"
                    },
                    "tenantType": {
                        "type": "string",
                        "description": "the azure ad tenant type\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpGithub:OrgIdpGithub": {
            "description": "Resource representing a GitHub IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpGithub(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    clientId: \"86a165...\",\n    clientSecret: \"*****afdbac18\",\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    isLinkingAllowed: false,\n    isCreationAllowed: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpGithub(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    client_id=\"86a165...\",\n    client_secret=\"*****afdbac18\",\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    is_linking_allowed=False,\n    is_creation_allowed=True,\n    is_auto_creation=False,\n    is_auto_update=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpGithub(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ClientId = \"86a165...\",\n        ClientSecret = \"*****afdbac18\",\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n        IsLinkingAllowed = false,\n        IsCreationAllowed = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpGithub(ctx, \"default\", \u0026zitadel.OrgIdpGithubArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tClientId:     pulumi.String(\"86a165...\"),\n\t\t\tClientSecret: pulumi.String(\"*****afdbac18\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpGithub;\nimport com.pulumi.zitadel.OrgIdpGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpGithub(\"default\", OrgIdpGithubArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .clientId(\"86a165...\")\n            .clientSecret(\"*****afdbac18\")\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .isLinkingAllowed(false)\n            .isCreationAllowed(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpGithub\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      clientId: 86a165...\n      clientSecret: '*****afdbac18'\n      scopes:\n        - openid\n        - profile\n        - email\n      isLinkingAllowed: false\n      isCreationAllowed: true\n      isAutoCreation: false\n      isAutoUpdate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpGithub:OrgIdpGithub imported '123456789012345678:123456789012345678:1234567890123456781234567890123456787890'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpGithub resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpGithubEs:OrgIdpGithubEs": {
            "description": "Resource representing a GitHub Enterprise IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpGithubEs(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    clientId: \"86a165...\",\n    clientSecret: \"*****afdbac18\",\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    authorizationEndpoint: \"https://auth.endpoint\",\n    tokenEndpoint: \"https://token.endpoint\",\n    userEndpoint: \"https://user.endpoint\",\n    isLinkingAllowed: false,\n    isCreationAllowed: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpGithubEs(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    client_id=\"86a165...\",\n    client_secret=\"*****afdbac18\",\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    authorization_endpoint=\"https://auth.endpoint\",\n    token_endpoint=\"https://token.endpoint\",\n    user_endpoint=\"https://user.endpoint\",\n    is_linking_allowed=False,\n    is_creation_allowed=True,\n    is_auto_creation=False,\n    is_auto_update=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpGithubEs(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ClientId = \"86a165...\",\n        ClientSecret = \"*****afdbac18\",\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n        AuthorizationEndpoint = \"https://auth.endpoint\",\n        TokenEndpoint = \"https://token.endpoint\",\n        UserEndpoint = \"https://user.endpoint\",\n        IsLinkingAllowed = false,\n        IsCreationAllowed = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpGithubEs(ctx, \"default\", \u0026zitadel.OrgIdpGithubEsArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tClientId:     pulumi.String(\"86a165...\"),\n\t\t\tClientSecret: pulumi.String(\"*****afdbac18\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tAuthorizationEndpoint: pulumi.String(\"https://auth.endpoint\"),\n\t\t\tTokenEndpoint:         pulumi.String(\"https://token.endpoint\"),\n\t\t\tUserEndpoint:          pulumi.String(\"https://user.endpoint\"),\n\t\t\tIsLinkingAllowed:      pulumi.Bool(false),\n\t\t\tIsCreationAllowed:     pulumi.Bool(true),\n\t\t\tIsAutoCreation:        pulumi.Bool(false),\n\t\t\tIsAutoUpdate:          pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpGithubEs;\nimport com.pulumi.zitadel.OrgIdpGithubEsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpGithubEs(\"default\", OrgIdpGithubEsArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .clientId(\"86a165...\")\n            .clientSecret(\"*****afdbac18\")\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .authorizationEndpoint(\"https://auth.endpoint\")\n            .tokenEndpoint(\"https://token.endpoint\")\n            .userEndpoint(\"https://user.endpoint\")\n            .isLinkingAllowed(false)\n            .isCreationAllowed(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpGithubEs\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      clientId: 86a165...\n      clientSecret: '*****afdbac18'\n      scopes:\n        - openid\n        - profile\n        - email\n      authorizationEndpoint: https://auth.endpoint\n      tokenEndpoint: https://token.endpoint\n      userEndpoint: https://user.endpoint\n      isLinkingAllowed: false\n      isCreationAllowed: true\n      isAutoCreation: false\n      isAutoUpdate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpGithubEs:OrgIdpGithubEs imported '123456789012345678:123456789012345678:123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "the providers authorization endpoint\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "the providers token endpoint\n"
                },
                "userEndpoint": {
                    "type": "string",
                    "description": "the providers user endpoint\n"
                }
            },
            "required": [
                "authorizationEndpoint",
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name",
                "tokenEndpoint",
                "userEndpoint"
            ],
            "inputProperties": {
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "the providers authorization endpoint\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "the providers token endpoint\n"
                },
                "userEndpoint": {
                    "type": "string",
                    "description": "the providers user endpoint\n"
                }
            },
            "requiredInputs": [
                "authorizationEndpoint",
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "tokenEndpoint",
                "userEndpoint"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpGithubEs resources.\n",
                "properties": {
                    "authorizationEndpoint": {
                        "type": "string",
                        "description": "the providers authorization endpoint\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    },
                    "tokenEndpoint": {
                        "type": "string",
                        "description": "the providers token endpoint\n"
                    },
                    "userEndpoint": {
                        "type": "string",
                        "description": "the providers user endpoint\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpGitlab:OrgIdpGitlab": {
            "description": "Resource representing a GitLab IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpGitlab(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    clientId: \"15765e...\",\n    clientSecret: \"*****abcxyz\",\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    isLinkingAllowed: false,\n    isCreationAllowed: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpGitlab(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    client_id=\"15765e...\",\n    client_secret=\"*****abcxyz\",\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    is_linking_allowed=False,\n    is_creation_allowed=True,\n    is_auto_creation=False,\n    is_auto_update=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpGitlab(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ClientId = \"15765e...\",\n        ClientSecret = \"*****abcxyz\",\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n        IsLinkingAllowed = false,\n        IsCreationAllowed = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpGitlab(ctx, \"default\", \u0026zitadel.OrgIdpGitlabArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tClientId:     pulumi.String(\"15765e...\"),\n\t\t\tClientSecret: pulumi.String(\"*****abcxyz\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpGitlab;\nimport com.pulumi.zitadel.OrgIdpGitlabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpGitlab(\"default\", OrgIdpGitlabArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .clientId(\"15765e...\")\n            .clientSecret(\"*****abcxyz\")\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .isLinkingAllowed(false)\n            .isCreationAllowed(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpGitlab\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      clientId: 15765e...\n      clientSecret: '*****abcxyz'\n      scopes:\n        - openid\n        - profile\n        - email\n      isLinkingAllowed: false\n      isCreationAllowed: true\n      isAutoCreation: false\n      isAutoUpdate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpGitlab:OrgIdpGitlab imported '123456789012345678:123456789012345678:1234567890abcdef'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpGitlab resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpGitlabSelfHosted:OrgIdpGitlabSelfHosted": {
            "description": "Resource representing a GitLab Self Hosted IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpGitlabSelfHosted(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    clientId: \"15765e...\",\n    clientSecret: \"*****abcxyz\",\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    issuer: \"https://my.issuer\",\n    isLinkingAllowed: false,\n    isCreationAllowed: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpGitlabSelfHosted(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    client_id=\"15765e...\",\n    client_secret=\"*****abcxyz\",\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    issuer=\"https://my.issuer\",\n    is_linking_allowed=False,\n    is_creation_allowed=True,\n    is_auto_creation=False,\n    is_auto_update=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpGitlabSelfHosted(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ClientId = \"15765e...\",\n        ClientSecret = \"*****abcxyz\",\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n        Issuer = \"https://my.issuer\",\n        IsLinkingAllowed = false,\n        IsCreationAllowed = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpGitlabSelfHosted(ctx, \"default\", \u0026zitadel.OrgIdpGitlabSelfHostedArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tClientId:     pulumi.String(\"15765e...\"),\n\t\t\tClientSecret: pulumi.String(\"*****abcxyz\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tIssuer:            pulumi.String(\"https://my.issuer\"),\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpGitlabSelfHosted;\nimport com.pulumi.zitadel.OrgIdpGitlabSelfHostedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpGitlabSelfHosted(\"default\", OrgIdpGitlabSelfHostedArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .clientId(\"15765e...\")\n            .clientSecret(\"*****abcxyz\")\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .issuer(\"https://my.issuer\")\n            .isLinkingAllowed(false)\n            .isCreationAllowed(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpGitlabSelfHosted\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      clientId: 15765e...\n      clientSecret: '*****abcxyz'\n      scopes:\n        - openid\n        - profile\n        - email\n      issuer: https://my.issuer\n      isLinkingAllowed: false\n      isCreationAllowed: true\n      isAutoCreation: false\n      isAutoUpdate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpGitlabSelfHosted:OrgIdpGitlabSelfHosted imported '123456789012345678:123456789012345678:1234567890abcdef'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "the providers issuer\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "issuer",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "the providers issuer\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "issuer"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpGitlabSelfHosted resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "the providers issuer\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpGoogle:OrgIdpGoogle": {
            "description": "Resource representing a Google IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpGoogle(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    clientId: \"182902...\",\n    clientSecret: \"GOCSPX-*****\",\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    isLinkingAllowed: false,\n    isCreationAllowed: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpGoogle(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    client_id=\"182902...\",\n    client_secret=\"GOCSPX-*****\",\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    is_linking_allowed=False,\n    is_creation_allowed=True,\n    is_auto_creation=False,\n    is_auto_update=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpGoogle(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ClientId = \"182902...\",\n        ClientSecret = \"GOCSPX-*****\",\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n        IsLinkingAllowed = false,\n        IsCreationAllowed = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpGoogle(ctx, \"default\", \u0026zitadel.OrgIdpGoogleArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tClientId:     pulumi.String(\"182902...\"),\n\t\t\tClientSecret: pulumi.String(\"GOCSPX-*****\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpGoogle;\nimport com.pulumi.zitadel.OrgIdpGoogleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpGoogle(\"default\", OrgIdpGoogleArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .clientId(\"182902...\")\n            .clientSecret(\"GOCSPX-*****\")\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .isLinkingAllowed(false)\n            .isCreationAllowed(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpGoogle\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      clientId: 182902...\n      clientSecret: GOCSPX-*****\n      scopes:\n        - openid\n        - profile\n        - email\n      isLinkingAllowed: false\n      isCreationAllowed: true\n      isAutoCreation: false\n      isAutoUpdate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpGoogle:OrgIdpGoogle imported '123456789012345678:123456789012345678:G1234567890123'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpGoogle resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpJwt:OrgIdpJwt": {
            "description": "Resource representing a generic JWT IdP of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpJwt(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    stylingType: \"STYLING_TYPE_UNSPECIFIED\",\n    jwtEndpoint: \"https://jwtendpoint.com/jwt\",\n    issuer: \"https://google.com\",\n    keysEndpoint: \"https://jwtendpoint.com/keys\",\n    headerName: \"x-auth-token\",\n    autoRegister: false,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpJwt(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    styling_type=\"STYLING_TYPE_UNSPECIFIED\",\n    jwt_endpoint=\"https://jwtendpoint.com/jwt\",\n    issuer=\"https://google.com\",\n    keys_endpoint=\"https://jwtendpoint.com/keys\",\n    header_name=\"x-auth-token\",\n    auto_register=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpJwt(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        StylingType = \"STYLING_TYPE_UNSPECIFIED\",\n        JwtEndpoint = \"https://jwtendpoint.com/jwt\",\n        Issuer = \"https://google.com\",\n        KeysEndpoint = \"https://jwtendpoint.com/keys\",\n        HeaderName = \"x-auth-token\",\n        AutoRegister = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpJwt(ctx, \"default\", \u0026zitadel.OrgIdpJwtArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tStylingType:  pulumi.String(\"STYLING_TYPE_UNSPECIFIED\"),\n\t\t\tJwtEndpoint:  pulumi.String(\"https://jwtendpoint.com/jwt\"),\n\t\t\tIssuer:       pulumi.String(\"https://google.com\"),\n\t\t\tKeysEndpoint: pulumi.String(\"https://jwtendpoint.com/keys\"),\n\t\t\tHeaderName:   pulumi.String(\"x-auth-token\"),\n\t\t\tAutoRegister: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpJwt;\nimport com.pulumi.zitadel.OrgIdpJwtArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpJwt(\"default\", OrgIdpJwtArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .stylingType(\"STYLING_TYPE_UNSPECIFIED\")\n            .jwtEndpoint(\"https://jwtendpoint.com/jwt\")\n            .issuer(\"https://google.com\")\n            .keysEndpoint(\"https://jwtendpoint.com/keys\")\n            .headerName(\"x-auth-token\")\n            .autoRegister(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpJwt\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      stylingType: STYLING_TYPE_UNSPECIFIED\n      jwtEndpoint: https://jwtendpoint.com/jwt\n      issuer: https://google.com\n      keysEndpoint: https://jwtendpoint.com/keys\n      headerName: x-auth-token\n      autoRegister: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpJwt:OrgIdpJwt imported '123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "autoRegister": {
                    "type": "boolean",
                    "description": "auto register for users from this idp\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "the name of the header where the JWT is sent in, default is authorization\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "the issuer of the jwt (for validation)\n"
                },
                "jwtEndpoint": {
                    "type": "string",
                    "description": "the endpoint where the jwt can be extracted\n"
                },
                "keysEndpoint": {
                    "type": "string",
                    "description": "the endpoint to the key (JWK) which are used to sign the JWT with\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "stylingType": {
                    "type": "string",
                    "description": "Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE\n"
                }
            },
            "required": [
                "autoRegister",
                "headerName",
                "issuer",
                "jwtEndpoint",
                "keysEndpoint",
                "name",
                "stylingType"
            ],
            "inputProperties": {
                "autoRegister": {
                    "type": "boolean",
                    "description": "auto register for users from this idp\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "the name of the header where the JWT is sent in, default is authorization\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "the issuer of the jwt (for validation)\n"
                },
                "jwtEndpoint": {
                    "type": "string",
                    "description": "the endpoint where the jwt can be extracted\n"
                },
                "keysEndpoint": {
                    "type": "string",
                    "description": "the endpoint to the key (JWK) which are used to sign the JWT with\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "stylingType": {
                    "type": "string",
                    "description": "Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE\n"
                }
            },
            "requiredInputs": [
                "autoRegister",
                "headerName",
                "issuer",
                "jwtEndpoint",
                "keysEndpoint",
                "stylingType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpJwt resources.\n",
                "properties": {
                    "autoRegister": {
                        "type": "boolean",
                        "description": "auto register for users from this idp\n"
                    },
                    "headerName": {
                        "type": "string",
                        "description": "the name of the header where the JWT is sent in, default is authorization\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "the issuer of the jwt (for validation)\n"
                    },
                    "jwtEndpoint": {
                        "type": "string",
                        "description": "the endpoint where the jwt can be extracted\n"
                    },
                    "keysEndpoint": {
                        "type": "string",
                        "description": "the endpoint to the key (JWK) which are used to sign the JWT with\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "stylingType": {
                        "type": "string",
                        "description": "Some identity providers specify the styling of the button to their login, supported values: STYLING*TYPE*UNSPECIFIED, STYLING*TYPE*GOOGLE\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpLdap:OrgIdpLdap": {
            "description": "Resource representing an LDAP IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpLdap(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    servers: [\n        \"ldaps://my.primary.server:389\",\n        \"ldaps://my.secondary.server:389\",\n    ],\n    startTls: false,\n    baseDn: \"dc=example,dc=com\",\n    bindDn: \"cn=admin,dc=example,dc=com\",\n    bindPassword: \"Password1!\",\n    userBase: \"dn\",\n    userObjectClasses: [\"inetOrgPerson\"],\n    userFilters: [\n        \"uid\",\n        \"email\",\n    ],\n    timeout: \"10s\",\n    idAttribute: \"uid\",\n    firstNameAttribute: \"firstname\",\n    lastNameAttribute: \"lastname\",\n    isLinkingAllowed: false,\n    isCreationAllowed: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpLdap(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    servers=[\n        \"ldaps://my.primary.server:389\",\n        \"ldaps://my.secondary.server:389\",\n    ],\n    start_tls=False,\n    base_dn=\"dc=example,dc=com\",\n    bind_dn=\"cn=admin,dc=example,dc=com\",\n    bind_password=\"Password1!\",\n    user_base=\"dn\",\n    user_object_classes=[\"inetOrgPerson\"],\n    user_filters=[\n        \"uid\",\n        \"email\",\n    ],\n    timeout=\"10s\",\n    id_attribute=\"uid\",\n    first_name_attribute=\"firstname\",\n    last_name_attribute=\"lastname\",\n    is_linking_allowed=False,\n    is_creation_allowed=True,\n    is_auto_creation=False,\n    is_auto_update=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpLdap(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Servers = new[]\n        {\n            \"ldaps://my.primary.server:389\",\n            \"ldaps://my.secondary.server:389\",\n        },\n        StartTls = false,\n        BaseDn = \"dc=example,dc=com\",\n        BindDn = \"cn=admin,dc=example,dc=com\",\n        BindPassword = \"Password1!\",\n        UserBase = \"dn\",\n        UserObjectClasses = new[]\n        {\n            \"inetOrgPerson\",\n        },\n        UserFilters = new[]\n        {\n            \"uid\",\n            \"email\",\n        },\n        Timeout = \"10s\",\n        IdAttribute = \"uid\",\n        FirstNameAttribute = \"firstname\",\n        LastNameAttribute = \"lastname\",\n        IsLinkingAllowed = false,\n        IsCreationAllowed = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpLdap(ctx, \"default\", \u0026zitadel.OrgIdpLdapArgs{\n\t\t\tOrgId: pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tServers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ldaps://my.primary.server:389\"),\n\t\t\t\tpulumi.String(\"ldaps://my.secondary.server:389\"),\n\t\t\t},\n\t\t\tStartTls:     pulumi.Bool(false),\n\t\t\tBaseDn:       pulumi.String(\"dc=example,dc=com\"),\n\t\t\tBindDn:       pulumi.String(\"cn=admin,dc=example,dc=com\"),\n\t\t\tBindPassword: pulumi.String(\"Password1!\"),\n\t\t\tUserBase:     pulumi.String(\"dn\"),\n\t\t\tUserObjectClasses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"inetOrgPerson\"),\n\t\t\t},\n\t\t\tUserFilters: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"uid\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tTimeout:            pulumi.String(\"10s\"),\n\t\t\tIdAttribute:        pulumi.String(\"uid\"),\n\t\t\tFirstNameAttribute: pulumi.String(\"firstname\"),\n\t\t\tLastNameAttribute:  pulumi.String(\"lastname\"),\n\t\t\tIsLinkingAllowed:   pulumi.Bool(false),\n\t\t\tIsCreationAllowed:  pulumi.Bool(true),\n\t\t\tIsAutoCreation:     pulumi.Bool(false),\n\t\t\tIsAutoUpdate:       pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpLdap;\nimport com.pulumi.zitadel.OrgIdpLdapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpLdap(\"default\", OrgIdpLdapArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .servers(            \n                \"ldaps://my.primary.server:389\",\n                \"ldaps://my.secondary.server:389\")\n            .startTls(false)\n            .baseDn(\"dc=example,dc=com\")\n            .bindDn(\"cn=admin,dc=example,dc=com\")\n            .bindPassword(\"Password1!\")\n            .userBase(\"dn\")\n            .userObjectClasses(\"inetOrgPerson\")\n            .userFilters(            \n                \"uid\",\n                \"email\")\n            .timeout(\"10s\")\n            .idAttribute(\"uid\")\n            .firstNameAttribute(\"firstname\")\n            .lastNameAttribute(\"lastname\")\n            .isLinkingAllowed(false)\n            .isCreationAllowed(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpLdap\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      servers:\n        - ldaps://my.primary.server:389\n        - ldaps://my.secondary.server:389\n      startTls: false\n      baseDn: dc=example,dc=com\n      bindDn: cn=admin,dc=example,dc=com\n      bindPassword: Password1!\n      userBase: dn\n      userObjectClasses:\n        - inetOrgPerson\n      userFilters:\n        - uid\n        - email\n      timeout: 10s\n      idAttribute: uid\n      firstNameAttribute: firstname\n      lastNameAttribute: lastname\n      isLinkingAllowed: false\n      isCreationAllowed: true\n      isAutoCreation: false\n      isAutoUpdate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id][:bind_password]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpLdap:OrgIdpLdap imported '123456789012345678:123456789012345678:b1nd_p4ssw0rd'\n```\n\n ",
            "properties": {
                "avatarUrlAttribute": {
                    "type": "string",
                    "description": "User attribute for the avatar url\n"
                },
                "baseDn": {
                    "type": "string",
                    "description": "Base DN for LDAP connections\n"
                },
                "bindDn": {
                    "type": "string",
                    "description": "Bind DN for LDAP connections\n"
                },
                "bindPassword": {
                    "type": "string",
                    "description": "Bind password for LDAP connections\n",
                    "secret": true
                },
                "displayNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the display name\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "User attribute for the email\n"
                },
                "emailVerifiedAttribute": {
                    "type": "string",
                    "description": "User attribute for the email verified state\n"
                },
                "firstNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the first name\n"
                },
                "idAttribute": {
                    "type": "string",
                    "description": "User attribute for the id\n"
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "lastNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the last name\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "nickNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the nick name\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "phoneAttribute": {
                    "type": "string",
                    "description": "User attribute for the phone\n"
                },
                "phoneVerifiedAttribute": {
                    "type": "string",
                    "description": "User attribute for the phone verified state\n"
                },
                "preferredLanguageAttribute": {
                    "type": "string",
                    "description": "User attribute for the preferred language\n"
                },
                "preferredUsernameAttribute": {
                    "type": "string",
                    "description": "User attribute for the preferred username\n"
                },
                "profileAttribute": {
                    "type": "string",
                    "description": "User attribute for the profile\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Servers to try in order for establishing LDAP connections\n"
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Wether to use StartTLS for LDAP connections\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "Timeout for LDAP connections\n"
                },
                "userBase": {
                    "type": "string",
                    "description": "User base for LDAP connections\n"
                },
                "userFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User filters for LDAP connections\n"
                },
                "userObjectClasses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User object classes for LDAP connections\n"
                }
            },
            "required": [
                "baseDn",
                "bindDn",
                "bindPassword",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "name",
                "servers",
                "startTls",
                "timeout",
                "userBase",
                "userFilters",
                "userObjectClasses"
            ],
            "inputProperties": {
                "avatarUrlAttribute": {
                    "type": "string",
                    "description": "User attribute for the avatar url\n"
                },
                "baseDn": {
                    "type": "string",
                    "description": "Base DN for LDAP connections\n"
                },
                "bindDn": {
                    "type": "string",
                    "description": "Bind DN for LDAP connections\n"
                },
                "bindPassword": {
                    "type": "string",
                    "description": "Bind password for LDAP connections\n",
                    "secret": true
                },
                "displayNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the display name\n"
                },
                "emailAttribute": {
                    "type": "string",
                    "description": "User attribute for the email\n"
                },
                "emailVerifiedAttribute": {
                    "type": "string",
                    "description": "User attribute for the email verified state\n"
                },
                "firstNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the first name\n"
                },
                "idAttribute": {
                    "type": "string",
                    "description": "User attribute for the id\n"
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "lastNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the last name\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "nickNameAttribute": {
                    "type": "string",
                    "description": "User attribute for the nick name\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "phoneAttribute": {
                    "type": "string",
                    "description": "User attribute for the phone\n"
                },
                "phoneVerifiedAttribute": {
                    "type": "string",
                    "description": "User attribute for the phone verified state\n"
                },
                "preferredLanguageAttribute": {
                    "type": "string",
                    "description": "User attribute for the preferred language\n"
                },
                "preferredUsernameAttribute": {
                    "type": "string",
                    "description": "User attribute for the preferred username\n"
                },
                "profileAttribute": {
                    "type": "string",
                    "description": "User attribute for the profile\n"
                },
                "servers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Servers to try in order for establishing LDAP connections\n"
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Wether to use StartTLS for LDAP connections\n"
                },
                "timeout": {
                    "type": "string",
                    "description": "Timeout for LDAP connections\n"
                },
                "userBase": {
                    "type": "string",
                    "description": "User base for LDAP connections\n"
                },
                "userFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User filters for LDAP connections\n"
                },
                "userObjectClasses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User object classes for LDAP connections\n"
                }
            },
            "requiredInputs": [
                "baseDn",
                "bindDn",
                "bindPassword",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isLinkingAllowed",
                "servers",
                "startTls",
                "timeout",
                "userBase",
                "userFilters",
                "userObjectClasses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpLdap resources.\n",
                "properties": {
                    "avatarUrlAttribute": {
                        "type": "string",
                        "description": "User attribute for the avatar url\n"
                    },
                    "baseDn": {
                        "type": "string",
                        "description": "Base DN for LDAP connections\n"
                    },
                    "bindDn": {
                        "type": "string",
                        "description": "Bind DN for LDAP connections\n"
                    },
                    "bindPassword": {
                        "type": "string",
                        "description": "Bind password for LDAP connections\n",
                        "secret": true
                    },
                    "displayNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the display name\n"
                    },
                    "emailAttribute": {
                        "type": "string",
                        "description": "User attribute for the email\n"
                    },
                    "emailVerifiedAttribute": {
                        "type": "string",
                        "description": "User attribute for the email verified state\n"
                    },
                    "firstNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the first name\n"
                    },
                    "idAttribute": {
                        "type": "string",
                        "description": "User attribute for the id\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "lastNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the last name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "nickNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the nick name\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "phoneAttribute": {
                        "type": "string",
                        "description": "User attribute for the phone\n"
                    },
                    "phoneVerifiedAttribute": {
                        "type": "string",
                        "description": "User attribute for the phone verified state\n"
                    },
                    "preferredLanguageAttribute": {
                        "type": "string",
                        "description": "User attribute for the preferred language\n"
                    },
                    "preferredUsernameAttribute": {
                        "type": "string",
                        "description": "User attribute for the preferred username\n"
                    },
                    "profileAttribute": {
                        "type": "string",
                        "description": "User attribute for the profile\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Servers to try in order for establishing LDAP connections\n"
                    },
                    "startTls": {
                        "type": "boolean",
                        "description": "Wether to use StartTLS for LDAP connections\n"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "Timeout for LDAP connections\n"
                    },
                    "userBase": {
                        "type": "string",
                        "description": "User base for LDAP connections\n"
                    },
                    "userFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User filters for LDAP connections\n"
                    },
                    "userObjectClasses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User object classes for LDAP connections\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgIdpOidc:OrgIdpOidc": {
            "description": "Resource representing a generic OIDC IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgIdpOidc(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    clientId: \"a_client_id\",\n    clientSecret: \"a_client_secret\",\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    issuer: \"https://example.com\",\n    isLinkingAllowed: false,\n    isCreationAllowed: true,\n    isAutoCreation: false,\n    isAutoUpdate: true,\n    isIdTokenMapping: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgIdpOidc(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    client_id=\"a_client_id\",\n    client_secret=\"a_client_secret\",\n    scopes=[\n        \"openid\",\n        \"profile\",\n        \"email\",\n    ],\n    issuer=\"https://example.com\",\n    is_linking_allowed=False,\n    is_creation_allowed=True,\n    is_auto_creation=False,\n    is_auto_update=True,\n    is_id_token_mapping=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgIdpOidc(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ClientId = \"a_client_id\",\n        ClientSecret = \"a_client_secret\",\n        Scopes = new[]\n        {\n            \"openid\",\n            \"profile\",\n            \"email\",\n        },\n        Issuer = \"https://example.com\",\n        IsLinkingAllowed = false,\n        IsCreationAllowed = true,\n        IsAutoCreation = false,\n        IsAutoUpdate = true,\n        IsIdTokenMapping = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgIdpOidc(ctx, \"default\", \u0026zitadel.OrgIdpOidcArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tClientId:     pulumi.String(\"a_client_id\"),\n\t\t\tClientSecret: pulumi.String(\"a_client_secret\"),\n\t\t\tScopes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"openid\"),\n\t\t\t\tpulumi.String(\"profile\"),\n\t\t\t\tpulumi.String(\"email\"),\n\t\t\t},\n\t\t\tIssuer:            pulumi.String(\"https://example.com\"),\n\t\t\tIsLinkingAllowed:  pulumi.Bool(false),\n\t\t\tIsCreationAllowed: pulumi.Bool(true),\n\t\t\tIsAutoCreation:    pulumi.Bool(false),\n\t\t\tIsAutoUpdate:      pulumi.Bool(true),\n\t\t\tIsIdTokenMapping:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgIdpOidc;\nimport com.pulumi.zitadel.OrgIdpOidcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgIdpOidc(\"default\", OrgIdpOidcArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .clientId(\"a_client_id\")\n            .clientSecret(\"a_client_secret\")\n            .scopes(            \n                \"openid\",\n                \"profile\",\n                \"email\")\n            .issuer(\"https://example.com\")\n            .isLinkingAllowed(false)\n            .isCreationAllowed(true)\n            .isAutoCreation(false)\n            .isAutoUpdate(true)\n            .isIdTokenMapping(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgIdpOidc\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      clientId: a_client_id\n      clientSecret: a_client_secret\n      scopes:\n        - openid\n        - profile\n        - email\n      issuer: https://example.com\n      isLinkingAllowed: false\n      isCreationAllowed: true\n      isAutoCreation: false\n      isAutoUpdate: true\n      isIdTokenMapping: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id][:client_secret]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgIdpOidc:OrgIdpOidc imported '123456789012345678:123456789012345678:1234567890abcdef'\n```\n\n ",
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isIdTokenMapping": {
                    "type": "boolean",
                    "description": "if true, provider information get mapped from the id token, not from the userinfo endpoint\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "the issuer of the idp\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "required": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isIdTokenMapping",
                "isLinkingAllowed",
                "issuer",
                "name"
            ],
            "inputProperties": {
                "clientId": {
                    "type": "string",
                    "description": "client id generated by the identity provider\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "client secret generated by the identity provider\n",
                    "secret": true
                },
                "isAutoCreation": {
                    "type": "boolean",
                    "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                },
                "isAutoUpdate": {
                    "type": "boolean",
                    "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                },
                "isCreationAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                },
                "isIdTokenMapping": {
                    "type": "boolean",
                    "description": "if true, provider information get mapped from the id token, not from the userinfo endpoint\n"
                },
                "isLinkingAllowed": {
                    "type": "boolean",
                    "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "the issuer of the idp\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IDP\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                }
            },
            "requiredInputs": [
                "clientId",
                "clientSecret",
                "isAutoCreation",
                "isAutoUpdate",
                "isCreationAllowed",
                "isIdTokenMapping",
                "isLinkingAllowed",
                "issuer"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgIdpOidc resources.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enable if a new account in ZITADEL should be created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enable if a the ZITADEL account fields should be updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isIdTokenMapping": {
                        "type": "boolean",
                        "description": "if true, provider information get mapped from the id token, not from the userinfo endpoint\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enable if users should be able to link an existing ZITADEL user with an external account\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "the issuer of the idp\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/orgMember:OrgMember": {
            "description": "Resource representing the membership of a user on an organization, defined with the given role.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.OrgMember(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    userId: data.zitadel_human_user[\"default\"].id,\n    roles: [\"ORG_OWNER\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.OrgMember(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_id=data[\"zitadel_human_user\"][\"default\"][\"id\"],\n    roles=[\"ORG_OWNER\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.OrgMember(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserId = data.Zitadel_human_user.Default.Id,\n        Roles = new[]\n        {\n            \"ORG_OWNER\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewOrgMember(ctx, \"default\", \u0026zitadel.OrgMemberArgs{\n\t\t\tOrgId:  pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tUserId: pulumi.Any(data.Zitadel_human_user.Default.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ORG_OWNER\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.OrgMember;\nimport com.pulumi.zitadel.OrgMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new OrgMember(\"default\", OrgMemberArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .userId(data.zitadel_human_user().default().id())\n            .roles(\"ORG_OWNER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:OrgMember\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      userId: ${data.zitadel_human_user.default.id}\n      roles:\n        - ORG_OWNER\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cuser_id[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/orgMember:OrgMember imported '123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n"
                }
            },
            "required": [
                "roles",
                "userId"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roles",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgMember resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roles granted\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/passwordComplexityPolicy:PasswordComplexityPolicy": {
            "description": "Resource representing the custom password complexity policy of an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.PasswordComplexityPolicy(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    minLength: 8,\n    hasUppercase: true,\n    hasLowercase: true,\n    hasNumber: true,\n    hasSymbol: true,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.PasswordComplexityPolicy(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    min_length=8,\n    has_uppercase=True,\n    has_lowercase=True,\n    has_number=True,\n    has_symbol=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.PasswordComplexityPolicy(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        MinLength = 8,\n        HasUppercase = true,\n        HasLowercase = true,\n        HasNumber = true,\n        HasSymbol = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewPasswordComplexityPolicy(ctx, \"default\", \u0026zitadel.PasswordComplexityPolicyArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tMinLength:    pulumi.Int(8),\n\t\t\tHasUppercase: pulumi.Bool(true),\n\t\t\tHasLowercase: pulumi.Bool(true),\n\t\t\tHasNumber:    pulumi.Bool(true),\n\t\t\tHasSymbol:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.PasswordComplexityPolicy;\nimport com.pulumi.zitadel.PasswordComplexityPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new PasswordComplexityPolicy(\"default\", PasswordComplexityPolicyArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .minLength(\"8\")\n            .hasUppercase(true)\n            .hasLowercase(true)\n            .hasNumber(true)\n            .hasSymbol(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:PasswordComplexityPolicy\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      minLength: '8'\n      hasUppercase: true\n      hasLowercase: true\n      hasNumber: true\n      hasSymbol: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "hasLowercase": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a lower case letter\n"
                },
                "hasNumber": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a number\n"
                },
                "hasSymbol": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a symbol. E.g. \"$\"\n"
                },
                "hasUppercase": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain an upper case letter\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Minimal length for the password\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                }
            },
            "required": [
                "hasLowercase",
                "hasNumber",
                "hasSymbol",
                "hasUppercase",
                "minLength"
            ],
            "inputProperties": {
                "hasLowercase": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a lower case letter\n"
                },
                "hasNumber": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a number\n"
                },
                "hasSymbol": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain a symbol. E.g. \"$\"\n"
                },
                "hasUppercase": {
                    "type": "boolean",
                    "description": "defines if the password MUST contain an upper case letter\n"
                },
                "minLength": {
                    "type": "integer",
                    "description": "Minimal length for the password\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hasLowercase",
                "hasNumber",
                "hasSymbol",
                "hasUppercase",
                "minLength"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PasswordComplexityPolicy resources.\n",
                "properties": {
                    "hasLowercase": {
                        "type": "boolean",
                        "description": "defines if the password MUST contain a lower case letter\n"
                    },
                    "hasNumber": {
                        "type": "boolean",
                        "description": "defines if the password MUST contain a number\n"
                    },
                    "hasSymbol": {
                        "type": "boolean",
                        "description": "defines if the password MUST contain a symbol. E.g. \"$\"\n"
                    },
                    "hasUppercase": {
                        "type": "boolean",
                        "description": "defines if the password MUST contain an upper case letter\n"
                    },
                    "minLength": {
                        "type": "integer",
                        "description": "Minimal length for the password\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/personalAccessToken:PersonalAccessToken": {
            "description": "Resource representing a personal access token of a user\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.PersonalAccessToken(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    userId: data.zitadel_machine_user[\"default\"].id,\n    expirationDate: \"2519-04-01T08:45:00Z\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.PersonalAccessToken(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_id=data[\"zitadel_machine_user\"][\"default\"][\"id\"],\n    expiration_date=\"2519-04-01T08:45:00Z\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.PersonalAccessToken(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserId = data.Zitadel_machine_user.Default.Id,\n        ExpirationDate = \"2519-04-01T08:45:00Z\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewPersonalAccessToken(ctx, \"default\", \u0026zitadel.PersonalAccessTokenArgs{\n\t\t\tOrgId:          pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tUserId:         pulumi.Any(data.Zitadel_machine_user.Default.Id),\n\t\t\tExpirationDate: pulumi.String(\"2519-04-01T08:45:00Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.PersonalAccessToken;\nimport com.pulumi.zitadel.PersonalAccessTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new PersonalAccessToken(\"default\", PersonalAccessTokenArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .userId(data.zitadel_machine_user().default().id())\n            .expirationDate(\"2519-04-01T08:45:00Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:PersonalAccessToken\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      userId: ${data.zitadel_machine_user.default.id}\n      expirationDate: 2519-04-01T08:45:00Z\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid:user_id[:org_id][:token]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/personalAccessToken:PersonalAccessToken imported '123456789012345678:123456789012345678:123456789012345678:LHt79...'\n```\n\n ",
            "properties": {
                "expirationDate": {
                    "type": "string",
                    "description": "Expiration date of the token in the RFC3339 format\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "token": {
                    "type": "string",
                    "description": "Value of the token\n",
                    "secret": true
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n"
                }
            },
            "required": [
                "token",
                "userId"
            ],
            "inputProperties": {
                "expirationDate": {
                    "type": "string",
                    "description": "Expiration date of the token in the RFC3339 format\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PersonalAccessToken resources.\n",
                "properties": {
                    "expirationDate": {
                        "type": "string",
                        "description": "Expiration date of the token in the RFC3339 format\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "description": "Value of the token\n",
                        "secret": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/privacyPolicy:PrivacyPolicy": {
            "description": "Resource representing the custom privacy policy of an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.PrivacyPolicy(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    tosLink: \"https://example.com/tos\",\n    privacyLink: \"https://example.com/privacy\",\n    helpLink: \"https://example.com/help\",\n    supportEmail: \"support@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.PrivacyPolicy(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    tos_link=\"https://example.com/tos\",\n    privacy_link=\"https://example.com/privacy\",\n    help_link=\"https://example.com/help\",\n    support_email=\"support@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.PrivacyPolicy(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        TosLink = \"https://example.com/tos\",\n        PrivacyLink = \"https://example.com/privacy\",\n        HelpLink = \"https://example.com/help\",\n        SupportEmail = \"support@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewPrivacyPolicy(ctx, \"default\", \u0026zitadel.PrivacyPolicyArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tTosLink:      pulumi.String(\"https://example.com/tos\"),\n\t\t\tPrivacyLink:  pulumi.String(\"https://example.com/privacy\"),\n\t\t\tHelpLink:     pulumi.String(\"https://example.com/help\"),\n\t\t\tSupportEmail: pulumi.String(\"support@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.PrivacyPolicy;\nimport com.pulumi.zitadel.PrivacyPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new PrivacyPolicy(\"default\", PrivacyPolicyArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .tosLink(\"https://example.com/tos\")\n            .privacyLink(\"https://example.com/privacy\")\n            .helpLink(\"https://example.com/help\")\n            .supportEmail(\"support@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:PrivacyPolicy\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      tosLink: https://example.com/tos\n      privacyLink: https://example.com/privacy\n      helpLink: https://example.com/help\n      supportEmail: support@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c[org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/privacyPolicy:PrivacyPolicy imported '123456789012345678'\n```\n\n ",
            "properties": {
                "helpLink": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "privacyLink": {
                    "type": "string"
                },
                "supportEmail": {
                    "type": "string"
                },
                "tosLink": {
                    "type": "string"
                }
            },
            "inputProperties": {
                "helpLink": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "privacyLink": {
                    "type": "string"
                },
                "supportEmail": {
                    "type": "string"
                },
                "tosLink": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivacyPolicy resources.\n",
                "properties": {
                    "helpLink": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "privacyLink": {
                        "type": "string"
                    },
                    "supportEmail": {
                        "type": "string"
                    },
                    "tosLink": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/project:Project": {
            "description": "Resource representing the project, which can then be granted to different organizations or users directly, containing different applications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.Project(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    projectRoleAssertion: true,\n    projectRoleCheck: true,\n    hasProjectCheck: true,\n    privateLabelingSetting: \"PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.Project(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_role_assertion=True,\n    project_role_check=True,\n    has_project_check=True,\n    private_labeling_setting=\"PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.Project(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectRoleAssertion = true,\n        ProjectRoleCheck = true,\n        HasProjectCheck = true,\n        PrivateLabelingSetting = \"PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewProject(ctx, \"default\", \u0026zitadel.ProjectArgs{\n\t\t\tOrgId:                  pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tProjectRoleAssertion:   pulumi.Bool(true),\n\t\t\tProjectRoleCheck:       pulumi.Bool(true),\n\t\t\tHasProjectCheck:        pulumi.Bool(true),\n\t\t\tPrivateLabelingSetting: pulumi.String(\"PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.Project;\nimport com.pulumi.zitadel.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new Project(\"default\", ProjectArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .projectRoleAssertion(true)\n            .projectRoleCheck(true)\n            .hasProjectCheck(true)\n            .privateLabelingSetting(\"PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:Project\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      projectRoleAssertion: true\n      projectRoleCheck: true\n      hasProjectCheck: true\n      privateLabelingSetting: PRIVATE_LABELING_SETTING_ENFORCE_PROJECT_RESOURCE_OWNER_POLICY\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/project:Project imported '123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "hasProjectCheck": {
                    "type": "boolean",
                    "description": "ZITADEL checks if the org of the user has permission to this project\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the project\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "privateLabelingSetting": {
                    "type": "string",
                    "description": "Defines from where the private labeling should be triggered, supported values: PRIVATE*LABELING*SETTING*UNSPECIFIED, PRIVATE*LABELING*SETTING*ENFORCE*PROJECT*RESOURCE*OWNER*POLICY, PRIVATE*LABELING*SETTING*ALLOW*LOGIN*USER*RESOURCE*OWNER*POLICY\n"
                },
                "projectRoleAssertion": {
                    "type": "boolean",
                    "description": "describes if roles of user should be added in token\n"
                },
                "projectRoleCheck": {
                    "type": "boolean",
                    "description": "ZITADEL checks if the user has at least one on this project\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the project\n"
                }
            },
            "required": [
                "name",
                "state"
            ],
            "inputProperties": {
                "hasProjectCheck": {
                    "type": "boolean",
                    "description": "ZITADEL checks if the org of the user has permission to this project\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the project\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "privateLabelingSetting": {
                    "type": "string",
                    "description": "Defines from where the private labeling should be triggered, supported values: PRIVATE*LABELING*SETTING*UNSPECIFIED, PRIVATE*LABELING*SETTING*ENFORCE*PROJECT*RESOURCE*OWNER*POLICY, PRIVATE*LABELING*SETTING*ALLOW*LOGIN*USER*RESOURCE*OWNER*POLICY\n"
                },
                "projectRoleAssertion": {
                    "type": "boolean",
                    "description": "describes if roles of user should be added in token\n"
                },
                "projectRoleCheck": {
                    "type": "boolean",
                    "description": "ZITADEL checks if the user has at least one on this project\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "hasProjectCheck": {
                        "type": "boolean",
                        "description": "ZITADEL checks if the org of the user has permission to this project\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the project\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "privateLabelingSetting": {
                        "type": "string",
                        "description": "Defines from where the private labeling should be triggered, supported values: PRIVATE*LABELING*SETTING*UNSPECIFIED, PRIVATE*LABELING*SETTING*ENFORCE*PROJECT*RESOURCE*OWNER*POLICY, PRIVATE*LABELING*SETTING*ALLOW*LOGIN*USER*RESOURCE*OWNER*POLICY\n"
                    },
                    "projectRoleAssertion": {
                        "type": "boolean",
                        "description": "describes if roles of user should be added in token\n"
                    },
                    "projectRoleCheck": {
                        "type": "boolean",
                        "description": "ZITADEL checks if the user has at least one on this project\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the project\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/projectGrant:ProjectGrant": {
            "description": "Resource representing the grant of a project to a different organization, also containing the available roles which can be given to the members of the projectgrant.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.ProjectGrant(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    grantedOrgId: data.zitadel_org.granted_org.id,\n    roleKeys: [\"super-user\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.ProjectGrant(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    granted_org_id=data[\"zitadel_org\"][\"granted_org\"][\"id\"],\n    role_keys=[\"super-user\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.ProjectGrant(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        GrantedOrgId = data.Zitadel_org.Granted_org.Id,\n        RoleKeys = new[]\n        {\n            \"super-user\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewProjectGrant(ctx, \"default\", \u0026zitadel.ProjectGrantArgs{\n\t\t\tOrgId:        pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tProjectId:    pulumi.Any(data.Zitadel_project.Default.Id),\n\t\t\tGrantedOrgId: pulumi.Any(data.Zitadel_org.Granted_org.Id),\n\t\t\tRoleKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"super-user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ProjectGrant;\nimport com.pulumi.zitadel.ProjectGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ProjectGrant(\"default\", ProjectGrantArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .grantedOrgId(data.zitadel_org().granted_org().id())\n            .roleKeys(\"super-user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:ProjectGrant\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      projectId: ${data.zitadel_project.default.id}\n      grantedOrgId: ${data.zitadel_org.granted_org.id}\n      roleKeys:\n        - super-user\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid:project_id[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/projectGrant:ProjectGrant imported '123456789012345678:123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "grantedOrgId": {
                    "type": "string",
                    "description": "ID of the organization granted the project\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n"
                },
                "roleKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                }
            },
            "required": [
                "grantedOrgId",
                "projectId"
            ],
            "inputProperties": {
                "grantedOrgId": {
                    "type": "string",
                    "description": "ID of the organization granted the project\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n",
                    "willReplaceOnChanges": true
                },
                "roleKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                }
            },
            "requiredInputs": [
                "grantedOrgId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectGrant resources.\n",
                "properties": {
                    "grantedOrgId": {
                        "type": "string",
                        "description": "ID of the organization granted the project\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n",
                        "willReplaceOnChanges": true
                    },
                    "roleKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roles granted\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/projectGrantMember:ProjectGrantMember": {
            "description": "Resource representing the membership of a user on an granted project, defined with the given role.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.ProjectGrantMember(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    userId: data.zitadel_human_user[\"default\"].id,\n    grantId: \"123456789012345678\",\n    roles: [\"PROJECT_GRANT_OWNER\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.ProjectGrantMember(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    user_id=data[\"zitadel_human_user\"][\"default\"][\"id\"],\n    grant_id=\"123456789012345678\",\n    roles=[\"PROJECT_GRANT_OWNER\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.ProjectGrantMember(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        UserId = data.Zitadel_human_user.Default.Id,\n        GrantId = \"123456789012345678\",\n        Roles = new[]\n        {\n            \"PROJECT_GRANT_OWNER\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewProjectGrantMember(ctx, \"default\", \u0026zitadel.ProjectGrantMemberArgs{\n\t\t\tOrgId:     pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tProjectId: pulumi.Any(data.Zitadel_project.Default.Id),\n\t\t\tUserId:    pulumi.Any(data.Zitadel_human_user.Default.Id),\n\t\t\tGrantId:   pulumi.String(\"123456789012345678\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"PROJECT_GRANT_OWNER\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ProjectGrantMember;\nimport com.pulumi.zitadel.ProjectGrantMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ProjectGrantMember(\"default\", ProjectGrantMemberArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .userId(data.zitadel_human_user().default().id())\n            .grantId(\"123456789012345678\")\n            .roles(\"PROJECT_GRANT_OWNER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:ProjectGrantMember\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      projectId: ${data.zitadel_project.default.id}\n      userId: ${data.zitadel_human_user.default.id}\n      grantId: '123456789012345678'\n      roles:\n        - PROJECT_GRANT_OWNER\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cproject_id:grant_id:user_id[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/projectGrantMember:ProjectGrantMember imported '123456789012345678:123456789012345678:123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "grantId": {
                    "type": "string",
                    "description": "ID of the grant\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n"
                }
            },
            "required": [
                "grantId",
                "projectId",
                "roles",
                "userId"
            ],
            "inputProperties": {
                "grantId": {
                    "type": "string",
                    "description": "ID of the grant\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "grantId",
                "projectId",
                "roles",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectGrantMember resources.\n",
                "properties": {
                    "grantId": {
                        "type": "string",
                        "description": "ID of the grant\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roles granted\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/projectMember:ProjectMember": {
            "description": "Resource representing the membership of a user on an project, defined with the given role.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.ProjectMember(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    userId: data.zitadel_human_user[\"default\"].id,\n    roles: [\"PROJECT_OWNER\"],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.ProjectMember(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    user_id=data[\"zitadel_human_user\"][\"default\"][\"id\"],\n    roles=[\"PROJECT_OWNER\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.ProjectMember(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        UserId = data.Zitadel_human_user.Default.Id,\n        Roles = new[]\n        {\n            \"PROJECT_OWNER\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewProjectMember(ctx, \"default\", \u0026zitadel.ProjectMemberArgs{\n\t\t\tOrgId:     pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tProjectId: pulumi.Any(data.Zitadel_project.Default.Id),\n\t\t\tUserId:    pulumi.Any(data.Zitadel_human_user.Default.Id),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"PROJECT_OWNER\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ProjectMember;\nimport com.pulumi.zitadel.ProjectMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ProjectMember(\"default\", ProjectMemberArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .userId(data.zitadel_human_user().default().id())\n            .roles(\"PROJECT_OWNER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:ProjectMember\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      projectId: ${data.zitadel_project.default.id}\n      userId: ${data.zitadel_human_user.default.id}\n      roles:\n        - PROJECT_OWNER\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cproject_id:user_id[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/projectMember:ProjectMember imported '123456789012345678:123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n"
                }
            },
            "required": [
                "projectId",
                "roles",
                "userId"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n",
                    "willReplaceOnChanges": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "projectId",
                "roles",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectMember resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n",
                        "willReplaceOnChanges": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roles granted\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/projectRole:ProjectRole": {
            "description": "Resource representing the project roles, which can be given as authorizations to users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.ProjectRole(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    roleKey: \"super-user\",\n    displayName: \"display_name2\",\n    group: \"role_group\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.ProjectRole(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    role_key=\"super-user\",\n    display_name=\"display_name2\",\n    group=\"role_group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.ProjectRole(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        RoleKey = \"super-user\",\n        DisplayName = \"display_name2\",\n        Group = \"role_group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewProjectRole(ctx, \"default\", \u0026zitadel.ProjectRoleArgs{\n\t\t\tOrgId:       pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tProjectId:   pulumi.Any(data.Zitadel_project.Default.Id),\n\t\t\tRoleKey:     pulumi.String(\"super-user\"),\n\t\t\tDisplayName: pulumi.String(\"display_name2\"),\n\t\t\tGroup:       pulumi.String(\"role_group\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ProjectRole;\nimport com.pulumi.zitadel.ProjectRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ProjectRole(\"default\", ProjectRoleArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .roleKey(\"super-user\")\n            .displayName(\"display_name2\")\n            .group(\"role_group\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:ProjectRole\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      projectId: ${data.zitadel_project.default.id}\n      roleKey: super-user\n      displayName: display_name2\n      group: role_group\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cproject_id:role_key[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/projectRole:ProjectRole imported '123456789012345678:my-role-key:123456789012345678'\n```\n\n ",
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "Name used for project role\n"
                },
                "group": {
                    "type": "string",
                    "description": "Group used for project role\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n"
                },
                "roleKey": {
                    "type": "string",
                    "description": "Key used for project role\n"
                }
            },
            "required": [
                "displayName",
                "projectId",
                "roleKey"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "Name used for project role\n"
                },
                "group": {
                    "type": "string",
                    "description": "Group used for project role\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n",
                    "willReplaceOnChanges": true
                },
                "roleKey": {
                    "type": "string",
                    "description": "Key used for project role\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "displayName",
                "projectId",
                "roleKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectRole resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Name used for project role\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "Group used for project role\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n",
                        "willReplaceOnChanges": true
                    },
                    "roleKey": {
                        "type": "string",
                        "description": "Key used for project role\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/smsProviderTwilio:SmsProviderTwilio": {
            "description": "Resource representing the SMS provider Twilio configuration of an instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.SmsProviderTwilio(\"default\", {\n    senderNumber: \"019920892\",\n    sid: \"sid\",\n    token: \"twilio_token\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.SmsProviderTwilio(\"default\",\n    sender_number=\"019920892\",\n    sid=\"sid\",\n    token=\"twilio_token\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.SmsProviderTwilio(\"default\", new()\n    {\n        SenderNumber = \"019920892\",\n        Sid = \"sid\",\n        Token = \"twilio_token\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewSmsProviderTwilio(ctx, \"default\", \u0026zitadel.SmsProviderTwilioArgs{\n\t\t\tSenderNumber: pulumi.String(\"019920892\"),\n\t\t\tSid:          pulumi.String(\"sid\"),\n\t\t\tToken:        pulumi.String(\"twilio_token\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.SmsProviderTwilio;\nimport com.pulumi.zitadel.SmsProviderTwilioArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new SmsProviderTwilio(\"default\", SmsProviderTwilioArgs.builder()        \n            .senderNumber(\"019920892\")\n            .sid(\"sid\")\n            .token(\"twilio_token\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:SmsProviderTwilio\n    properties:\n      senderNumber: '019920892'\n      sid: sid\n      token: twilio_token\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cid[:token]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/smsProviderTwilio:SmsProviderTwilio imported '123456789012345678:12345678901234567890123456abcdef'\n```\n\n ",
            "properties": {
                "senderNumber": {
                    "type": "string",
                    "description": "Sender number which is used to send the SMS.\n"
                },
                "sid": {
                    "type": "string",
                    "description": "SID used to communicate with Twilio.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token used to communicate with Twilio.\n",
                    "secret": true
                }
            },
            "required": [
                "senderNumber",
                "sid",
                "token"
            ],
            "inputProperties": {
                "senderNumber": {
                    "type": "string",
                    "description": "Sender number which is used to send the SMS.\n"
                },
                "sid": {
                    "type": "string",
                    "description": "SID used to communicate with Twilio.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token used to communicate with Twilio.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "senderNumber",
                "sid",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SmsProviderTwilio resources.\n",
                "properties": {
                    "senderNumber": {
                        "type": "string",
                        "description": "Sender number which is used to send the SMS.\n"
                    },
                    "sid": {
                        "type": "string",
                        "description": "SID used to communicate with Twilio.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token used to communicate with Twilio.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/smtpConfig:SmtpConfig": {
            "description": "Resource representing the SMTP configuration of an instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.SmtpConfig(\"default\", {\n    host: \"localhost:25\",\n    password: \"secret_password\",\n    replyToAddress: \"replyto@example.com\",\n    senderAddress: \"sender@example.com\",\n    senderName: \"no-reply\",\n    tls: true,\n    user: \"user\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.SmtpConfig(\"default\",\n    host=\"localhost:25\",\n    password=\"secret_password\",\n    reply_to_address=\"replyto@example.com\",\n    sender_address=\"sender@example.com\",\n    sender_name=\"no-reply\",\n    tls=True,\n    user=\"user\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.SmtpConfig(\"default\", new()\n    {\n        Host = \"localhost:25\",\n        Password = \"secret_password\",\n        ReplyToAddress = \"replyto@example.com\",\n        SenderAddress = \"sender@example.com\",\n        SenderName = \"no-reply\",\n        Tls = true,\n        User = \"user\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewSmtpConfig(ctx, \"default\", \u0026zitadel.SmtpConfigArgs{\n\t\t\tHost:           pulumi.String(\"localhost:25\"),\n\t\t\tPassword:       pulumi.String(\"secret_password\"),\n\t\t\tReplyToAddress: pulumi.String(\"replyto@example.com\"),\n\t\t\tSenderAddress:  pulumi.String(\"sender@example.com\"),\n\t\t\tSenderName:     pulumi.String(\"no-reply\"),\n\t\t\tTls:            pulumi.Bool(true),\n\t\t\tUser:           pulumi.String(\"user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.SmtpConfig;\nimport com.pulumi.zitadel.SmtpConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new SmtpConfig(\"default\", SmtpConfigArgs.builder()        \n            .host(\"localhost:25\")\n            .password(\"secret_password\")\n            .replyToAddress(\"replyto@example.com\")\n            .senderAddress(\"sender@example.com\")\n            .senderName(\"no-reply\")\n            .tls(true)\n            .user(\"user\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:SmtpConfig\n    properties:\n      host: localhost:25\n      password: secret_password\n      replyToAddress: replyto@example.com\n      senderAddress: sender@example.com\n      senderName: no-reply\n      tls: true\n      user: user\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003c[password]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/smtpConfig:SmtpConfig imported 'p4ssw0rd'\n```\n\n ",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host and port address to your SMTP server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to communicate with your SMTP server.\n",
                    "secret": true
                },
                "replyToAddress": {
                    "type": "string",
                    "description": "Address to reply to.\n"
                },
                "senderAddress": {
                    "type": "string",
                    "description": "Address used to send emails.\n"
                },
                "senderName": {
                    "type": "string",
                    "description": "Sender name used to send emails.\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "TLS used to communicate with your SMTP server.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used to communicate with your SMTP server.\n"
                }
            },
            "required": [
                "host",
                "senderAddress",
                "senderName"
            ],
            "inputProperties": {
                "host": {
                    "type": "string",
                    "description": "Host and port address to your SMTP server.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password used to communicate with your SMTP server.\n",
                    "secret": true
                },
                "replyToAddress": {
                    "type": "string",
                    "description": "Address to reply to.\n"
                },
                "senderAddress": {
                    "type": "string",
                    "description": "Address used to send emails.\n"
                },
                "senderName": {
                    "type": "string",
                    "description": "Sender name used to send emails.\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "TLS used to communicate with your SMTP server.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User used to communicate with your SMTP server.\n"
                }
            },
            "requiredInputs": [
                "host",
                "senderAddress",
                "senderName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SmtpConfig resources.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "Host and port address to your SMTP server.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password used to communicate with your SMTP server.\n",
                        "secret": true
                    },
                    "replyToAddress": {
                        "type": "string",
                        "description": "Address to reply to.\n"
                    },
                    "senderAddress": {
                        "type": "string",
                        "description": "Address used to send emails.\n"
                    },
                    "senderName": {
                        "type": "string",
                        "description": "Sender name used to send emails.\n"
                    },
                    "tls": {
                        "type": "boolean",
                        "description": "TLS used to communicate with your SMTP server.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "User used to communicate with your SMTP server.\n"
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/triggerActions:TriggerActions": {
            "description": "Resource representing triggers, when actions get started\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.TriggerActions(\"default\", {\n    orgId: data.zitadel_org[\"default\"].id,\n    flowType: \"FLOW_TYPE_CUSTOMISE_TOKEN\",\n    triggerType: \"TRIGGER_TYPE_PRE_ACCESS_TOKEN_CREATION\",\n    actionIds: [data.zitadel_action[\"default\"].id],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.TriggerActions(\"default\",\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    flow_type=\"FLOW_TYPE_CUSTOMISE_TOKEN\",\n    trigger_type=\"TRIGGER_TYPE_PRE_ACCESS_TOKEN_CREATION\",\n    action_ids=[data[\"zitadel_action\"][\"default\"][\"id\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.TriggerActions(\"default\", new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        FlowType = \"FLOW_TYPE_CUSTOMISE_TOKEN\",\n        TriggerType = \"TRIGGER_TYPE_PRE_ACCESS_TOKEN_CREATION\",\n        ActionIds = new[]\n        {\n            data.Zitadel_action.Default.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewTriggerActions(ctx, \"default\", \u0026zitadel.TriggerActionsArgs{\n\t\t\tOrgId:       pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tFlowType:    pulumi.String(\"FLOW_TYPE_CUSTOMISE_TOKEN\"),\n\t\t\tTriggerType: pulumi.String(\"TRIGGER_TYPE_PRE_ACCESS_TOKEN_CREATION\"),\n\t\t\tActionIds: pulumi.StringArray{\n\t\t\t\tdata.Zitadel_action.Default.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.TriggerActions;\nimport com.pulumi.zitadel.TriggerActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new TriggerActions(\"default\", TriggerActionsArgs.builder()        \n            .orgId(data.zitadel_org().default().id())\n            .flowType(\"FLOW_TYPE_CUSTOMISE_TOKEN\")\n            .triggerType(\"TRIGGER_TYPE_PRE_ACCESS_TOKEN_CREATION\")\n            .actionIds(data.zitadel_action().default().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:TriggerActions\n    properties:\n      orgId: ${data.zitadel_org.default.id}\n      flowType: FLOW_TYPE_CUSTOMISE_TOKEN\n      triggerType: TRIGGER_TYPE_PRE_ACCESS_TOKEN_CREATION\n      actionIds:\n        - ${data.zitadel_action.default.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cflow_type:trigger_type[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/triggerActions:TriggerActions imported 'FLOW_TYPE_EXTERNAL_AUTHENTICATION:TRIGGER_TYPE_POST_CREATION:123456789012345678'\n```\n\n ",
            "properties": {
                "actionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the triggered actions\n"
                },
                "flowType": {
                    "type": "string",
                    "description": "Type of the flow to which the action triggers belong, supported values: , FLOW*TYPE*EXTERNAL*AUTHENTICATION, FLOW*TYPE*CUSTOMISE*TOKEN\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "triggerType": {
                    "type": "string",
                    "description": "Trigger type on when the actions get triggered, supported values: , TRIGGER*TYPE*POST*AUTHENTICATION, TRIGGER*TYPE*PRE*CREATION, TRIGGER*TYPE*POST*CREATION, TRIGGER*TYPE*PRE*USERINFO_CREATION\n"
                }
            },
            "required": [
                "actionIds",
                "flowType",
                "triggerType"
            ],
            "inputProperties": {
                "actionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the triggered actions\n"
                },
                "flowType": {
                    "type": "string",
                    "description": "Type of the flow to which the action triggers belong, supported values: , FLOW*TYPE*EXTERNAL*AUTHENTICATION, FLOW*TYPE*CUSTOMISE*TOKEN\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "triggerType": {
                    "type": "string",
                    "description": "Trigger type on when the actions get triggered, supported values: , TRIGGER*TYPE*POST*AUTHENTICATION, TRIGGER*TYPE*PRE*CREATION, TRIGGER*TYPE*POST*CREATION, TRIGGER*TYPE*PRE*USERINFO_CREATION\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "actionIds",
                "flowType",
                "triggerType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TriggerActions resources.\n",
                "properties": {
                    "actionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the triggered actions\n"
                    },
                    "flowType": {
                        "type": "string",
                        "description": "Type of the flow to which the action triggers belong, supported values: , FLOW*TYPE*EXTERNAL*AUTHENTICATION, FLOW*TYPE*CUSTOMISE*TOKEN\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "Trigger type on when the actions get triggered, supported values: , TRIGGER*TYPE*POST*AUTHENTICATION, TRIGGER*TYPE*PRE*CREATION, TRIGGER*TYPE*POST*CREATION, TRIGGER*TYPE*PRE*USERINFO_CREATION\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zitadel:index/userGrant:UserGrant": {
            "description": "Resource representing the authorization given to a user directly, including the given roles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumiverse/zitadel\";\n\nconst _default = new zitadel.UserGrant(\"default\", {\n    projectId: data.zitadel_project[\"default\"].id,\n    orgId: data.zitadel_org[\"default\"].id,\n    roleKeys: [\"super-user\"],\n    userId: data.zitadel_human_user[\"default\"].id,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_zitadel as zitadel\n\ndefault = zitadel.UserGrant(\"default\",\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    role_keys=[\"super-user\"],\n    user_id=data[\"zitadel_human_user\"][\"default\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumiverse.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Zitadel.UserGrant(\"default\", new()\n    {\n        ProjectId = data.Zitadel_project.Default.Id,\n        OrgId = data.Zitadel_org.Default.Id,\n        RoleKeys = new[]\n        {\n            \"super-user\",\n        },\n        UserId = data.Zitadel_human_user.Default.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.NewUserGrant(ctx, \"default\", \u0026zitadel.UserGrantArgs{\n\t\t\tProjectId: pulumi.Any(data.Zitadel_project.Default.Id),\n\t\t\tOrgId:     pulumi.Any(data.Zitadel_org.Default.Id),\n\t\t\tRoleKeys: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"super-user\"),\n\t\t\t},\n\t\t\tUserId: pulumi.Any(data.Zitadel_human_user.Default.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.UserGrant;\nimport com.pulumi.zitadel.UserGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new UserGrant(\"default\", UserGrantArgs.builder()        \n            .projectId(data.zitadel_project().default().id())\n            .orgId(data.zitadel_org().default().id())\n            .roleKeys(\"super-user\")\n            .userId(data.zitadel_human_user().default().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: zitadel:UserGrant\n    properties:\n      projectId: ${data.zitadel_project.default.id}\n      orgId: ${data.zitadel_org.default.id}\n      roleKeys:\n        - super-user\n      userId: ${data.zitadel_human_user.default.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nterraform The resource can be imported using the ID format `\u003cflow_type:trigger_type[:org_id]\u003e`, e.g.\n\n```sh\n $ pulumi import zitadel:index/userGrant:UserGrant imported '123456789012345678:123456789012345678:123456789012345678'\n```\n\n ",
            "properties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n"
                },
                "projectGrantId": {
                    "type": "string",
                    "description": "ID of the granted project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n"
                },
                "roleKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n"
                }
            },
            "required": [
                "userId"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string",
                    "description": "ID of the organization\n",
                    "willReplaceOnChanges": true
                },
                "projectGrantId": {
                    "type": "string",
                    "description": "ID of the granted project\n",
                    "willReplaceOnChanges": true
                },
                "projectId": {
                    "type": "string",
                    "description": "ID of the project\n",
                    "willReplaceOnChanges": true
                },
                "roleKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles granted\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGrant resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "projectGrantId": {
                        "type": "string",
                        "description": "ID of the granted project\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n",
                        "willReplaceOnChanges": true
                    },
                    "roleKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roles granted\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of the user\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "zitadel:index/getAction:getAction": {
            "description": "Datasource representing an action belonging to an organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getAction({\n    orgId: data.zitadel_org[\"default\"].id,\n    actionId: \"123456789012345678\",\n});\nexport const action = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_action(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    action_id=\"123456789012345678\")\npulumi.export(\"action\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetAction.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ActionId = \"123456789012345678\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"action\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupAction(ctx, \u0026zitadel.LookupActionArgs{\n\t\t\tOrgId:    pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tActionId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"action\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getAction(GetActionArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .actionId(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"action\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getAction\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        actionId: '123456789012345678'\noutputs:\n  action: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAction.\n",
                "properties": {
                    "actionId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "actionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAction.\n",
                "properties": {
                    "actionId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "allowedToFail": {
                        "type": "boolean",
                        "description": "when true, the next action will be called even if this action fails\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "script": {
                        "type": "string"
                    },
                    "state": {
                        "type": "integer",
                        "description": "the state of the action\n"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "after which time the action will be terminated if not finished\n"
                    }
                },
                "type": "object",
                "required": [
                    "actionId",
                    "allowedToFail",
                    "name",
                    "script",
                    "state",
                    "timeout",
                    "id"
                ]
            }
        },
        "zitadel:index/getApplicationApi:getApplicationApi": {
            "description": "Datasource representing an API application belonging to a project, with all configuration possibilities.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getApplicationApi({\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    appId: \"123456789012345678\",\n});\nexport const applicationApi = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_application_api(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    app_id=\"123456789012345678\")\npulumi.export(\"applicationApi\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetApplicationApi.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        AppId = \"123456789012345678\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"applicationApi\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupApplicationApi(ctx, \u0026zitadel.LookupApplicationApiArgs{\n\t\t\tOrgId:     pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tProjectId: data.Zitadel_project.Default.Id,\n\t\t\tAppId:     \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"applicationApi\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetApplicationApiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getApplicationApi(GetApplicationApiArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .appId(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"applicationApi\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getApplicationApi\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        projectId: ${data.zitadel_project.default.id}\n        appId: '123456789012345678'\noutputs:\n  applicationApi: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationApi.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationApi.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "authMethodType": {
                        "type": "string",
                        "description": "Auth method type\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "authMethodType",
                    "name",
                    "projectId",
                    "id"
                ]
            }
        },
        "zitadel:index/getApplicationOidc:getApplicationOidc": {
            "description": "Datasource representing an OIDC application belonging to a project, with all configuration possibilities.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getApplicationOidc({\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    appId: \"123456789012345678\",\n});\nexport const applicationOidc = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_application_oidc(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    app_id=\"123456789012345678\")\npulumi.export(\"applicationOidc\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetApplicationOidc.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        AppId = \"123456789012345678\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"applicationOidc\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupApplicationOidc(ctx, \u0026zitadel.LookupApplicationOidcArgs{\n\t\t\tOrgId:     pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tProjectId: data.Zitadel_project.Default.Id,\n\t\t\tAppId:     \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"applicationOidc\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetApplicationOidcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getApplicationOidc(GetApplicationOidcArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .appId(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"applicationOidc\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getApplicationOidc\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        projectId: ${data.zitadel_project.default.id}\n        appId: '123456789012345678'\noutputs:\n  applicationOidc: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getApplicationOidc.\n",
                "properties": {
                    "appId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n"
                    }
                },
                "type": "object",
                "required": [
                    "appId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApplicationOidc.\n",
                "properties": {
                    "accessTokenRoleAssertion": {
                        "type": "boolean",
                        "description": "Access token role assertion\n"
                    },
                    "accessTokenType": {
                        "type": "string",
                        "description": "Access token type\n"
                    },
                    "additionalOrigins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional origins\n"
                    },
                    "appId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "appType": {
                        "type": "string",
                        "description": "App type\n"
                    },
                    "authMethodType": {
                        "type": "string",
                        "description": "Auth method type\n"
                    },
                    "clockSkew": {
                        "type": "string",
                        "description": "Clockskew\n"
                    },
                    "devMode": {
                        "type": "boolean",
                        "description": "Dev mode\n"
                    },
                    "grantTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Grant types\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "idTokenRoleAssertion": {
                        "type": "boolean",
                        "description": "ID token role assertion\n"
                    },
                    "idTokenUserinfoAssertion": {
                        "type": "boolean",
                        "description": "Token userinfo assertion\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "postLogoutRedirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Post logout redirect URIs\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n"
                    },
                    "redirectUris": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "RedirectURIs\n"
                    },
                    "responseTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Response type\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessTokenRoleAssertion",
                    "accessTokenType",
                    "additionalOrigins",
                    "appId",
                    "appType",
                    "authMethodType",
                    "clockSkew",
                    "devMode",
                    "grantTypes",
                    "idTokenRoleAssertion",
                    "idTokenUserinfoAssertion",
                    "name",
                    "postLogoutRedirectUris",
                    "projectId",
                    "redirectUris",
                    "responseTypes",
                    "version",
                    "id"
                ]
            }
        },
        "zitadel:index/getDefaultOidcSettings:getDefaultOidcSettings": {
            "description": "Datasource representing the default oidc settings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getDefaultOidcSettings({});\nexport const oidcSettings = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_default_oidc_settings()\npulumi.export(\"oidcSettings\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetDefaultOidcSettings.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"oidcSettings\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupDefaultOidcSettings(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"oidcSettings\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getDefaultOidcSettings();\n\n        ctx.export(\"oidcSettings\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getDefaultOidcSettings\n      Arguments: {}\noutputs:\n  oidcSettings: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDefaultOidcSettings.\n",
                "properties": {
                    "accessTokenLifetime": {
                        "type": "string",
                        "description": "lifetime duration of access tokens\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "idTokenLifetime": {
                        "type": "string",
                        "description": "lifetime duration of id tokens\n"
                    },
                    "refreshTokenExpiration": {
                        "type": "string",
                        "description": "expiration duration of refresh tokens\n"
                    },
                    "refreshTokenIdleExpiration": {
                        "type": "string",
                        "description": "expiration duration of idle refresh tokens\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessTokenLifetime",
                    "idTokenLifetime",
                    "refreshTokenExpiration",
                    "refreshTokenIdleExpiration",
                    "id"
                ]
            }
        },
        "zitadel:index/getHumanUser:getHumanUser": {
            "description": "Datasource representing a human user situated under an organization, which then can be authorized through memberships or direct grants on other resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getHumanUser({\n    orgId: data.zitadel_org[\"default\"].id,\n    userId: \"123456789012345678\",\n});\nexport const humanUser = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_human_user(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_id=\"123456789012345678\")\npulumi.export(\"humanUser\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetHumanUser.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserId = \"123456789012345678\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"humanUser\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupHumanUser(ctx, \u0026zitadel.LookupHumanUserArgs{\n\t\t\tOrgId:  data.Zitadel_org.Default.Id,\n\t\t\tUserId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"humanUser\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetHumanUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getHumanUser(GetHumanUserArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .userId(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"humanUser\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getHumanUser\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        userId: '123456789012345678'\noutputs:\n  humanUser: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getHumanUser.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHumanUser.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the user\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email of the user\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "First name of the user\n"
                    },
                    "gender": {
                        "type": "string",
                        "description": "Gender of the user\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Is the email verified of the user, can only be true if password of the user is set\n"
                    },
                    "isPhoneVerified": {
                        "type": "boolean",
                        "description": "Is the phone verified of the user\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "Last name of the user\n"
                    },
                    "loginNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Loginnames\n"
                    },
                    "nickName": {
                        "type": "string",
                        "description": "Nick name of the user\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone of the user\n"
                    },
                    "preferredLanguage": {
                        "type": "string",
                        "description": "Preferred language of the user\n"
                    },
                    "preferredLoginName": {
                        "type": "string",
                        "description": "Preferred login name\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the user\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Username\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "email",
                    "firstName",
                    "gender",
                    "isEmailVerified",
                    "isPhoneVerified",
                    "lastName",
                    "loginNames",
                    "nickName",
                    "orgId",
                    "phone",
                    "preferredLanguage",
                    "preferredLoginName",
                    "state",
                    "userId",
                    "userName",
                    "id"
                ]
            }
        },
        "zitadel:index/getIdpAzureAd:getIdpAzureAd": {
            "description": "Datasource representing an Azure AD IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getIdpAzureAd({\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_idp_azure_ad(id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetIdpAzureAd.Invoke(new()\n    {\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupIdpAzureAd(ctx, \u0026zitadel.LookupIdpAzureAdArgs{\n\t\t\tId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetIdpAzureAdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getIdpAzureAd(GetIdpAzureAdArgs.builder()\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getIdpAzureAd\n      Arguments:\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdpAzureAd.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdpAzureAd.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "automatically mark emails as verified\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "the azure ad tenant id\n"
                    },
                    "tenantType": {
                        "type": "string",
                        "description": "the azure ad tenant type\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "emailVerified",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes",
                    "tenantId",
                    "tenantType"
                ]
            }
        },
        "zitadel:index/getIdpGithub:getIdpGithub": {
            "description": "Datasource representing a GitHub IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getIdpGithub({\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_idp_github(id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetIdpGithub.Invoke(new()\n    {\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupIdpGithub(ctx, \u0026zitadel.LookupIdpGithubArgs{\n\t\t\tId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetIdpGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getIdpGithub(GetIdpGithubArgs.builder()\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getIdpGithub\n      Arguments:\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdpGithub.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdpGithub.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getIdpGithubEs:getIdpGithubEs": {
            "description": "Datasource representing a GitHub Enterprise IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getIdpGithubEs({\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_idp_github_es(id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetIdpGithubEs.Invoke(new()\n    {\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupIdpGithubEs(ctx, \u0026zitadel.LookupIdpGithubEsArgs{\n\t\t\tId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetIdpGithubEsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getIdpGithubEs(GetIdpGithubEsArgs.builder()\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getIdpGithubEs\n      Arguments:\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdpGithubEs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdpGithubEs.\n",
                "properties": {
                    "authorizationEndpoint": {
                        "type": "string",
                        "description": "the providers authorization endpoint\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    },
                    "tokenEndpoint": {
                        "type": "string",
                        "description": "the providers token endpoint\n"
                    },
                    "userEndpoint": {
                        "type": "string",
                        "description": "the providers user endpoint\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorizationEndpoint",
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes",
                    "tokenEndpoint",
                    "userEndpoint"
                ]
            }
        },
        "zitadel:index/getIdpGitlab:getIdpGitlab": {
            "description": "Datasource representing a GitLab IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getIdpGitlab({\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_idp_gitlab(id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetIdpGitlab.Invoke(new()\n    {\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupIdpGitlab(ctx, \u0026zitadel.LookupIdpGitlabArgs{\n\t\t\tId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetIdpGitlabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getIdpGitlab(GetIdpGitlabArgs.builder()\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getIdpGitlab\n      Arguments:\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdpGitlab.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdpGitlab.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getIdpGitlabSelfHosted:getIdpGitlabSelfHosted": {
            "description": "Datasource representing a GitLab Self Hosted IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getIdpGitlabSelfHosted({\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_idp_gitlab_self_hosted(id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetIdpGitlabSelfHosted.Invoke(new()\n    {\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupIdpGitlabSelfHosted(ctx, \u0026zitadel.LookupIdpGitlabSelfHostedArgs{\n\t\t\tId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetIdpGitlabSelfHostedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getIdpGitlabSelfHosted(GetIdpGitlabSelfHostedArgs.builder()\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getIdpGitlabSelfHosted\n      Arguments:\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdpGitlabSelfHosted.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdpGitlabSelfHosted.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "the providers issuer\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "issuer",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getIdpGoogle:getIdpGoogle": {
            "description": "Datasource representing a Google IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getIdpGoogle({\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_idp_google(id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetIdpGoogle.Invoke(new()\n    {\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupIdpGoogle(ctx, \u0026zitadel.LookupIdpGoogleArgs{\n\t\t\tId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetIdpGoogleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getIdpGoogle(GetIdpGoogleArgs.builder()\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getIdpGoogle\n      Arguments:\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdpGoogle.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdpGoogle.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getIdpLdap:getIdpLdap": {
            "description": "Datasource representing an LDAP IDP on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getIdpLdap({\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_idp_ldap(id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetIdpLdap.Invoke(new()\n    {\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupIdpLdap(ctx, \u0026zitadel.LookupIdpLdapArgs{\n\t\t\tId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetIdpLdapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getIdpLdap(GetIdpLdapArgs.builder()\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getIdpLdap\n      Arguments:\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIdpLdap.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIdpLdap.\n",
                "properties": {
                    "avatarUrlAttribute": {
                        "type": "string",
                        "description": "User attribute for the avatar url\n"
                    },
                    "baseDn": {
                        "type": "string",
                        "description": "Base DN for LDAP connections\n"
                    },
                    "bindDn": {
                        "type": "string",
                        "description": "Bind DN for LDAP connections\n"
                    },
                    "bindPassword": {
                        "type": "string",
                        "description": "Bind password for LDAP connections\n",
                        "secret": true
                    },
                    "displayNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the display name\n"
                    },
                    "emailAttribute": {
                        "type": "string",
                        "description": "User attribute for the email\n"
                    },
                    "emailVerifiedAttribute": {
                        "type": "string",
                        "description": "User attribute for the email verified state\n"
                    },
                    "firstNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the first name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "idAttribute": {
                        "type": "string",
                        "description": "User attribute for the id\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "lastNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the last name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "nickNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the nick name\n"
                    },
                    "phoneAttribute": {
                        "type": "string",
                        "description": "User attribute for the phone\n"
                    },
                    "phoneVerifiedAttribute": {
                        "type": "string",
                        "description": "User attribute for the phone verified state\n"
                    },
                    "preferredLanguageAttribute": {
                        "type": "string",
                        "description": "User attribute for the preferred language\n"
                    },
                    "preferredUsernameAttribute": {
                        "type": "string",
                        "description": "User attribute for the preferred username\n"
                    },
                    "profileAttribute": {
                        "type": "string",
                        "description": "User attribute for the profile\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Servers to try in order for establishing LDAP connections\n"
                    },
                    "startTls": {
                        "type": "boolean",
                        "description": "Wether to use StartTLS for LDAP connections\n"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "Timeout for LDAP connections\n"
                    },
                    "userBase": {
                        "type": "string",
                        "description": "User base for LDAP connections\n"
                    },
                    "userFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User filters for LDAP connections\n"
                    },
                    "userObjectClasses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User object classes for LDAP connections\n"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrlAttribute",
                    "baseDn",
                    "bindDn",
                    "bindPassword",
                    "displayNameAttribute",
                    "emailAttribute",
                    "emailVerifiedAttribute",
                    "firstNameAttribute",
                    "id",
                    "idAttribute",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "lastNameAttribute",
                    "name",
                    "nickNameAttribute",
                    "phoneAttribute",
                    "phoneVerifiedAttribute",
                    "preferredLanguageAttribute",
                    "preferredUsernameAttribute",
                    "profileAttribute",
                    "servers",
                    "startTls",
                    "timeout",
                    "userBase",
                    "userFilters",
                    "userObjectClasses"
                ]
            }
        },
        "zitadel:index/getMachineUser:getMachineUser": {
            "description": "Datasource representing a serviceaccount situated under an organization, which then can be authorized through memberships or direct grants on other resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getMachineUser({\n    orgId: data.zitadel_org[\"default\"].id,\n    userId: \"123456789012345678\",\n});\nexport const machineUser = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_machine_user(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    user_id=\"123456789012345678\")\npulumi.export(\"machineUser\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetMachineUser.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        UserId = \"123456789012345678\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"machineUser\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupMachineUser(ctx, \u0026zitadel.LookupMachineUserArgs{\n\t\t\tOrgId:  pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tUserId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"machineUser\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetMachineUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getMachineUser(GetMachineUserArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .userId(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"machineUser\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getMachineUser\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        userId: '123456789012345678'\noutputs:\n  machineUser: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMachineUser.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "userId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMachineUser.\n",
                "properties": {
                    "accessTokenType": {
                        "type": "string",
                        "description": "Access token type\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the user\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "loginNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Loginnames\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the machine user\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "preferredLoginName": {
                        "type": "string",
                        "description": "Preferred login name\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the user\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Username\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessTokenType",
                    "description",
                    "loginNames",
                    "name",
                    "preferredLoginName",
                    "state",
                    "userId",
                    "userName",
                    "id"
                ]
            }
        },
        "zitadel:index/getOrg:getOrg": {
            "description": "Datasource representing an organization in ZITADEL, which is the highest level after the instance and contains several other resource including policies if the configuration differs to the default policies on the instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrg({\n    id: \"123456789012345678\",\n});\nexport const org = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org(id=\"123456789012345678\")\npulumi.export(\"org\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrg.Invoke(new()\n    {\n        Id = \"123456789012345678\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"org\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupOrg(ctx, \u0026zitadel.LookupOrgArgs{\n\t\t\tId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"org\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrg(GetOrgArgs.builder()\n            .id(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"org\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrg\n      Arguments:\n        id: '123456789012345678'\noutputs:\n  org: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrg.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrg.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the org.\n"
                    },
                    "primaryDomain": {
                        "type": "string",
                        "description": "Primary domain of the org\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the org, supported values: ORG*STATE*UNSPECIFIED, ORG*STATE*ACTIVE, ORG*STATE*INACTIVE, ORG*STATE*REMOVED\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "primaryDomain",
                    "state"
                ]
            }
        },
        "zitadel:index/getOrgIdpAzureAd:getOrgIdpAzureAd": {
            "description": "Datasource representing an Azure AD IdP of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrgIdpAzureAd({\n    orgId: data.zitadel_org[\"default\"].id,\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org_idp_azure_ad(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrgIdpAzureAd.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupOrgIdpAzureAd(ctx, \u0026zitadel.LookupOrgIdpAzureAdArgs{\n\t\t\tOrgId: pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tId:    \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgIdpAzureAdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgIdpAzureAd(GetOrgIdpAzureAdArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgIdpAzureAd\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgIdpAzureAd.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgIdpAzureAd.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "emailVerified": {
                        "type": "boolean",
                        "description": "automatically mark emails as verified\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    },
                    "tenantId": {
                        "type": "string",
                        "description": "the azure ad tenant id\n"
                    },
                    "tenantType": {
                        "type": "string",
                        "description": "the azure ad tenant type\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "emailVerified",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes",
                    "tenantId",
                    "tenantType"
                ]
            }
        },
        "zitadel:index/getOrgIdpGithub:getOrgIdpGithub": {
            "description": "Datasource representing a GitHub IdP of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrgIdpGithub({\n    orgId: data.zitadel_org[\"default\"].id,\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org_idp_github(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrgIdpGithub.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupOrgIdpGithub(ctx, \u0026zitadel.LookupOrgIdpGithubArgs{\n\t\t\tOrgId: pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tId:    \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgIdpGithubArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgIdpGithub(GetOrgIdpGithubArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgIdpGithub\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgIdpGithub.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgIdpGithub.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getOrgIdpGithubEs:getOrgIdpGithubEs": {
            "description": "Datasource representing a GitHub Enterprise IdP of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrgIdpGithubEs({\n    orgId: data.zitadel_org[\"default\"].id,\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org_idp_github_es(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrgIdpGithubEs.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupOrgIdpGithubEs(ctx, \u0026zitadel.LookupOrgIdpGithubEsArgs{\n\t\t\tOrgId: pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tId:    \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgIdpGithubEsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgIdpGithubEs(GetOrgIdpGithubEsArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgIdpGithubEs\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgIdpGithubEs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgIdpGithubEs.\n",
                "properties": {
                    "authorizationEndpoint": {
                        "type": "string",
                        "description": "the providers authorization endpoint\n"
                    },
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    },
                    "tokenEndpoint": {
                        "type": "string",
                        "description": "the providers token endpoint\n"
                    },
                    "userEndpoint": {
                        "type": "string",
                        "description": "the providers user endpoint\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorizationEndpoint",
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes",
                    "tokenEndpoint",
                    "userEndpoint"
                ]
            }
        },
        "zitadel:index/getOrgIdpGitlab:getOrgIdpGitlab": {
            "description": "Datasource representing a GitLab IdP of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrgIdpGitlab({\n    orgId: data.zitadel_org[\"default\"].id,\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org_idp_gitlab(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrgIdpGitlab.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupOrgIdpGitlab(ctx, \u0026zitadel.LookupOrgIdpGitlabArgs{\n\t\t\tOrgId: pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tId:    \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgIdpGitlabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgIdpGitlab(GetOrgIdpGitlabArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgIdpGitlab\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgIdpGitlab.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgIdpGitlab.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getOrgIdpGitlabSelfHosted:getOrgIdpGitlabSelfHosted": {
            "description": "Datasource representing a GitLab Self Hosted IdP of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrgIdpGitlabSelfHosted({\n    orgId: data.zitadel_org[\"default\"].id,\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org_idp_gitlab_self_hosted(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrgIdpGitlabSelfHosted.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupOrgIdpGitlabSelfHosted(ctx, \u0026zitadel.LookupOrgIdpGitlabSelfHostedArgs{\n\t\t\tOrgId: pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tId:    \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgIdpGitlabSelfHostedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgIdpGitlabSelfHosted(GetOrgIdpGitlabSelfHostedArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgIdpGitlabSelfHosted\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgIdpGitlabSelfHosted.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgIdpGitlabSelfHosted.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "the providers issuer\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "issuer",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getOrgIdpGoogle:getOrgIdpGoogle": {
            "description": "Datasource representing a Google IdP of the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrgIdpGoogle({\n    orgId: data.zitadel_org[\"default\"].id,\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org_idp_google(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrgIdpGoogle.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupOrgIdpGoogle(ctx, \u0026zitadel.LookupOrgIdpGoogleArgs{\n\t\t\tOrgId: pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tId:    \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgIdpGoogleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgIdpGoogle(GetOrgIdpGoogleArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgIdpGoogle\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgIdpGoogle.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgIdpGoogle.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getOrgIdpLdap:getOrgIdpLdap": {
            "description": "Datasource representing an LDAP IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrgIdpLdap({\n    orgId: data.zitadel_org[\"default\"].id,\n    id: \"123456789012345678\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org_idp_ldap(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    id=\"123456789012345678\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrgIdpLdap.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Id = \"123456789012345678\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zitadel.LookupOrgIdpLdap(ctx, \u0026zitadel.LookupOrgIdpLdapArgs{\n\t\t\tOrgId: pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tId:    \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgIdpLdapArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgIdpLdap(GetOrgIdpLdapArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgIdpLdap\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgIdpLdap.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgIdpLdap.\n",
                "properties": {
                    "avatarUrlAttribute": {
                        "type": "string",
                        "description": "User attribute for the avatar url\n"
                    },
                    "baseDn": {
                        "type": "string",
                        "description": "Base DN for LDAP connections\n"
                    },
                    "bindDn": {
                        "type": "string",
                        "description": "Bind DN for LDAP connections\n"
                    },
                    "bindPassword": {
                        "type": "string",
                        "description": "Bind password for LDAP connections\n",
                        "secret": true
                    },
                    "displayNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the display name\n"
                    },
                    "emailAttribute": {
                        "type": "string",
                        "description": "User attribute for the email\n"
                    },
                    "emailVerifiedAttribute": {
                        "type": "string",
                        "description": "User attribute for the email verified state\n"
                    },
                    "firstNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the first name\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "idAttribute": {
                        "type": "string",
                        "description": "User attribute for the id\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "lastNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the last name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "nickNameAttribute": {
                        "type": "string",
                        "description": "User attribute for the nick name\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "phoneAttribute": {
                        "type": "string",
                        "description": "User attribute for the phone\n"
                    },
                    "phoneVerifiedAttribute": {
                        "type": "string",
                        "description": "User attribute for the phone verified state\n"
                    },
                    "preferredLanguageAttribute": {
                        "type": "string",
                        "description": "User attribute for the preferred language\n"
                    },
                    "preferredUsernameAttribute": {
                        "type": "string",
                        "description": "User attribute for the preferred username\n"
                    },
                    "profileAttribute": {
                        "type": "string",
                        "description": "User attribute for the profile\n"
                    },
                    "servers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Servers to try in order for establishing LDAP connections\n"
                    },
                    "startTls": {
                        "type": "boolean",
                        "description": "Wether to use StartTLS for LDAP connections\n"
                    },
                    "timeout": {
                        "type": "string",
                        "description": "Timeout for LDAP connections\n"
                    },
                    "userBase": {
                        "type": "string",
                        "description": "User base for LDAP connections\n"
                    },
                    "userFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User filters for LDAP connections\n"
                    },
                    "userObjectClasses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User object classes for LDAP connections\n"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrlAttribute",
                    "baseDn",
                    "bindDn",
                    "bindPassword",
                    "displayNameAttribute",
                    "emailAttribute",
                    "emailVerifiedAttribute",
                    "firstNameAttribute",
                    "id",
                    "idAttribute",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isLinkingAllowed",
                    "lastNameAttribute",
                    "name",
                    "nickNameAttribute",
                    "phoneAttribute",
                    "phoneVerifiedAttribute",
                    "preferredLanguageAttribute",
                    "preferredUsernameAttribute",
                    "profileAttribute",
                    "servers",
                    "startTls",
                    "timeout",
                    "userBase",
                    "userFilters",
                    "userObjectClasses"
                ]
            }
        },
        "zitadel:index/getOrgJwtIdp:getOrgJwtIdp": {
            "description": "Datasource representing a generic JWT IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgJwtIdpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgJwtIdp(GetOrgJwtIdpArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"orgIdpOrgJwtIdp\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgJwtIdp\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\noutputs:\n  orgIdpOrgJwtIdp: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgJwtIdp.\n",
                "properties": {
                    "idpId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "idpId",
                    "orgId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgJwtIdp.\n",
                "properties": {
                    "autoRegister": {
                        "type": "boolean",
                        "description": "auto register for users from this idp\n"
                    },
                    "headerName": {
                        "type": "string",
                        "description": "the name of the header where the JWT is sent in, default is authorization\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "idpId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "the issuer of the jwt (for validation)\n"
                    },
                    "jwtEndpoint": {
                        "type": "string",
                        "description": "the endpoint where the jwt can be extracted\n"
                    },
                    "keysEndpoint": {
                        "type": "string",
                        "description": "the endpoint to the key (JWK) which are used to sign the JWT with\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "stylingType": {
                        "type": "string",
                        "description": "Some identity providers specify the styling of the button to their login\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoRegister",
                    "headerName",
                    "idpId",
                    "issuer",
                    "jwtEndpoint",
                    "keysEndpoint",
                    "name",
                    "orgId",
                    "stylingType",
                    "id"
                ]
            }
        },
        "zitadel:index/getOrgOidcIdp:getOrgOidcIdp": {
            "description": "Datasource representing a generic OIDC IdP on the organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getOrgOidcIdp({\n    orgId: data.zitadel_org[\"default\"].id,\n    id: \"123456789012345678\",\n});\nexport const orgOidcIdp = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_org_oidc_idp(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    id=\"123456789012345678\")\npulumi.export(\"orgOidcIdp\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetOrgOidcIdp.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        Id = \"123456789012345678\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"orgOidcIdp\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.GetOrgOidcIdp(ctx, \u0026zitadel.GetOrgOidcIdpArgs{\n\t\t\tOrgId: pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tId:    \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgOidcIdp\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetOrgOidcIdpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getOrgOidcIdp(GetOrgOidcIdpArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .id(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"orgOidcIdp\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getOrgOidcIdp\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        id: '123456789012345678'\noutputs:\n  orgOidcIdp: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgOidcIdp.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrgOidcIdp.\n",
                "properties": {
                    "clientId": {
                        "type": "string",
                        "description": "client id generated by the identity provider\n"
                    },
                    "clientSecret": {
                        "type": "string",
                        "description": "client secret generated by the identity provider\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "isAutoCreation": {
                        "type": "boolean",
                        "description": "enabled if a new account in ZITADEL are created automatically on login with an external account\n"
                    },
                    "isAutoUpdate": {
                        "type": "boolean",
                        "description": "enabled if a the ZITADEL account fields are updated automatically on each login\n"
                    },
                    "isCreationAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to create a new account in ZITADEL when using an external account\n"
                    },
                    "isIdTokenMapping": {
                        "type": "boolean",
                        "description": "if true, provider information get mapped from the id token, not from the userinfo endpoint.\n"
                    },
                    "isLinkingAllowed": {
                        "type": "boolean",
                        "description": "enabled if users are able to link an existing ZITADEL user with an external account\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "the issuer of the idp\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IDP\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "the scopes requested by ZITADEL during the request on the identity provider\n"
                    }
                },
                "type": "object",
                "required": [
                    "clientId",
                    "clientSecret",
                    "id",
                    "isAutoCreation",
                    "isAutoUpdate",
                    "isCreationAllowed",
                    "isIdTokenMapping",
                    "isLinkingAllowed",
                    "issuer",
                    "name",
                    "scopes"
                ]
            }
        },
        "zitadel:index/getOrgs:getOrgs": {
            "description": "Datasource representing an organization in ZITADEL, which is the highest level after the instance and contains several other resource including policies if the configuration differs to the default policies on the instance.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOrgs.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "A domain of the org.\n"
                    },
                    "domainMethod": {
                        "type": "string",
                        "description": "Method for querying orgs by domain, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the org.\n"
                    },
                    "nameMethod": {
                        "type": "string",
                        "description": "Method for querying orgs by name, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the org, supported values: ORG*STATE*UNSPECIFIED, ORG*STATE*ACTIVE, ORG*STATE*INACTIVE, ORG*STATE*REMOVED\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrgs.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "A domain of the org.\n"
                    },
                    "domainMethod": {
                        "type": "string",
                        "description": "Method for querying orgs by domain, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of all organization IDs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the org.\n"
                    },
                    "nameMethod": {
                        "type": "string",
                        "description": "Method for querying orgs by name, supported values: TEXT*QUERY*METHOD*EQUALS, TEXT*QUERY*METHOD*EQUALS*IGNORE*CASE, TEXT*QUERY*METHOD*STARTS*WITH, TEXT*QUERY*METHOD*STARTS*WITH*IGNORE*CASE, TEXT*QUERY*METHOD*CONTAINS, TEXT*QUERY*METHOD*CONTAINS*IGNORE*CASE, TEXT*QUERY*METHOD*ENDS*WITH, TEXT*QUERY*METHOD*ENDS*WITH*IGNORE*CASE\n"
                    },
                    "primaryDomain": {
                        "type": "string",
                        "description": "Primary domain of the org\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the org, supported values: ORG*STATE*UNSPECIFIED, ORG*STATE*ACTIVE, ORG*STATE*INACTIVE, ORG*STATE*REMOVED\n"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "primaryDomain",
                    "id"
                ]
            }
        },
        "zitadel:index/getProject:getProject": {
            "description": "Datasource representing the project, which can then be granted to different organizations or users directly, containing different applications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getProject({\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: \"123456789012345678\",\n});\nexport const project = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_project(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=\"123456789012345678\")\npulumi.export(\"project\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetProject.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = \"123456789012345678\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"project\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupProject(ctx, \u0026zitadel.LookupProjectArgs{\n\t\t\tOrgId:     pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tProjectId: \"123456789012345678\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"project\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getProject(GetProjectArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .projectId(\"123456789012345678\")\n            .build());\n\n        ctx.export(\"project\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getProject\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        projectId: '123456789012345678'\noutputs:\n  project: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "hasProjectCheck": {
                        "type": "boolean",
                        "description": "ZITADEL checks if the org of the user has permission to this project\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the project\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "privateLabelingSetting": {
                        "type": "string",
                        "description": "Defines from where the private labeling should be triggered\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "projectRoleAssertion": {
                        "type": "boolean",
                        "description": "describes if roles of user should be added in token\n"
                    },
                    "projectRoleCheck": {
                        "type": "boolean",
                        "description": "ZITADEL checks if the user has at least one on this project\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the project\n"
                    }
                },
                "type": "object",
                "required": [
                    "hasProjectCheck",
                    "name",
                    "privateLabelingSetting",
                    "projectId",
                    "projectRoleAssertion",
                    "projectRoleCheck",
                    "state",
                    "id"
                ]
            }
        },
        "zitadel:index/getProjectRole:getProjectRole": {
            "description": "Datasource representing the project roles, which can be given as authorizations to users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getProjectRole({\n    orgId: data.zitadel_org[\"default\"].id,\n    projectId: data.zitadel_project[\"default\"].id,\n    roleKey: \"key\",\n});\nexport const projectRole = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_project_role(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    project_id=data[\"zitadel_project\"][\"default\"][\"id\"],\n    role_key=\"key\")\npulumi.export(\"projectRole\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetProjectRole.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        ProjectId = data.Zitadel_project.Default.Id,\n        RoleKey = \"key\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"projectRole\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupProjectRole(ctx, \u0026zitadel.LookupProjectRoleArgs{\n\t\t\tOrgId:     data.Zitadel_org.Default.Id,\n\t\t\tProjectId: data.Zitadel_project.Default.Id,\n\t\t\tRoleKey:   \"key\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"projectRole\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetProjectRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getProjectRole(GetProjectRoleArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .projectId(data.zitadel_project().default().id())\n            .roleKey(\"key\")\n            .build());\n\n        ctx.export(\"projectRole\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getProjectRole\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        projectId: ${data.zitadel_project.default.id}\n        roleKey: key\noutputs:\n  projectRole: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getProjectRole.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n"
                    },
                    "roleKey": {
                        "type": "string",
                        "description": "Key used for project role\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "projectId",
                    "roleKey"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProjectRole.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "Name used for project role\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "Group used for project role\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the project\n"
                    },
                    "roleKey": {
                        "type": "string",
                        "description": "Key used for project role\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "group",
                    "orgId",
                    "projectId",
                    "roleKey",
                    "id"
                ]
            }
        },
        "zitadel:index/getTriggerActions:getTriggerActions": {
            "description": "Resource representing triggers, when actions get started\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zitadel from \"@pulumi/zitadel\";\n\nconst default = zitadel.getTriggerActions({\n    orgId: data.zitadel_org[\"default\"].id,\n    flowType: \"FLOW_TYPE_EXTERNAL_AUTHENTICATION\",\n    triggerType: \"TRIGGER_TYPE_POST_AUTHENTICATION\",\n});\nexport const triggerActions = _default;\n```\n```python\nimport pulumi\nimport pulumi_zitadel as zitadel\n\ndefault = zitadel.get_trigger_actions(org_id=data[\"zitadel_org\"][\"default\"][\"id\"],\n    flow_type=\"FLOW_TYPE_EXTERNAL_AUTHENTICATION\",\n    trigger_type=\"TRIGGER_TYPE_POST_AUTHENTICATION\")\npulumi.export(\"triggerActions\", default)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zitadel = Pulumi.Zitadel;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Zitadel.GetTriggerActions.Invoke(new()\n    {\n        OrgId = data.Zitadel_org.Default.Id,\n        FlowType = \"FLOW_TYPE_EXTERNAL_AUTHENTICATION\",\n        TriggerType = \"TRIGGER_TYPE_POST_AUTHENTICATION\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"triggerActions\"] = @default,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-zitadel/sdk/go/zitadel\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_default, err := zitadel.LookupTriggerActions(ctx, \u0026zitadel.LookupTriggerActionsArgs{\n\t\t\tOrgId:       pulumi.StringRef(data.Zitadel_org.Default.Id),\n\t\t\tFlowType:    \"FLOW_TYPE_EXTERNAL_AUTHENTICATION\",\n\t\t\tTriggerType: \"TRIGGER_TYPE_POST_AUTHENTICATION\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"triggerActions\", _default)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zitadel.ZitadelFunctions;\nimport com.pulumi.zitadel.inputs.GetTriggerActionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = ZitadelFunctions.getTriggerActions(GetTriggerActionsArgs.builder()\n            .orgId(data.zitadel_org().default().id())\n            .flowType(\"FLOW_TYPE_EXTERNAL_AUTHENTICATION\")\n            .triggerType(\"TRIGGER_TYPE_POST_AUTHENTICATION\")\n            .build());\n\n        ctx.export(\"triggerActions\", default_);\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: zitadel:getTriggerActions\n      Arguments:\n        orgId: ${data.zitadel_org.default.id}\n        flowType: FLOW_TYPE_EXTERNAL_AUTHENTICATION\n        triggerType: TRIGGER_TYPE_POST_AUTHENTICATION\noutputs:\n  triggerActions: ${default}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTriggerActions.\n",
                "properties": {
                    "flowType": {
                        "type": "string",
                        "description": "Type of the flow to which the action triggers belong\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n",
                        "willReplaceOnChanges": true
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "Trigger type on when the actions get triggered\n"
                    }
                },
                "type": "object",
                "required": [
                    "flowType",
                    "triggerType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTriggerActions.\n",
                "properties": {
                    "actionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the triggered actions\n"
                    },
                    "flowType": {
                        "type": "string",
                        "description": "Type of the flow to which the action triggers belong\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "ID of the organization\n"
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "Trigger type on when the actions get triggered\n"
                    }
                },
                "type": "object",
                "required": [
                    "actionIds",
                    "flowType",
                    "triggerType",
                    "id"
                ]
            }
        }
    }
}